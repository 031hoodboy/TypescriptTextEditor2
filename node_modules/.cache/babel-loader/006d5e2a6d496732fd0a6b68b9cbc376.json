{"ast":null,"code":"import _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Editor, Element, Transforms } from \"slate\";\nimport { LIST_TYPES, TEXT_ALIGN_TYPES } from \"./constants\";\n\nvar getBlockType = function getBlockType(format) {\n  return TEXT_ALIGN_TYPES.includes(format) ? \"align\" : \"type\";\n};\n\nexport var testIsBlock = function testIsBlock(type) {\n  return type === \"block\";\n};\nexport var testIsMarkActive = function testIsMarkActive(editor, format) {\n  var marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\nexport var testIsBlockActive = function testIsBlockActive(editor, format) {\n  var selection = editor.selection;\n\n  if (!selection) {\n    return false;\n  } else {\n    var blockType = getBlockType(format);\n\n    var _Array$from = Array.from(Editor.nodes(editor, {\n      at: Editor.unhangRange(editor, selection),\n      match: function match(n) {\n        return !Editor.isEditor(n) && Element.isElement(n) && n[blockType] === format;\n      }\n    })),\n        _Array$from2 = _slicedToArray(_Array$from, 1),\n        match = _Array$from2[0];\n\n    return !!match;\n  }\n};\nexport var testIsFormatActive = function testIsFormatActive(editor, format, type) {\n  var isBlock = testIsBlock(type);\n  var test = isBlock ? testIsBlockActive : testIsMarkActive;\n  return test(editor, format);\n};\nexport var toggleFormat = function toggleFormat(editor, format, type) {\n  var isBlock = testIsBlock(type);\n  var toggle = isBlock ? toggleBlock : toggleMark;\n  toggle(editor, format);\n};\nexport var toggleMark = function toggleMark(editor, format) {\n  var isActive = testIsFormatActive(editor, format, \"mark\");\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nvar toggleBlock = function toggleBlock(editor, format) {\n  var isActive = testIsFormatActive(editor, format, \"block\");\n  var isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: function match(n) {\n      return !Editor.isEditor(n) && Element.isElement(n) && LIST_TYPES.includes(n.type) && !TEXT_ALIGN_TYPES.includes(format);\n    },\n    split: true\n  });\n  var newProperties;\n\n  if (TEXT_ALIGN_TYPES.includes(format)) {\n    newProperties = {\n      align: isActive ? undefined : format\n    };\n  } else {\n    newProperties = {\n      type: isActive ? \"p\" : isList ? \"li\" : format\n    };\n  }\n\n  Transforms.setNodes(editor, newProperties);\n\n  if (!isActive && isList) {\n    var block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};","map":{"version":3,"names":["Editor","Element","Transforms","LIST_TYPES","TEXT_ALIGN_TYPES","getBlockType","format","includes","testIsBlock","type","testIsMarkActive","editor","marks","testIsBlockActive","selection","blockType","Array","from","nodes","at","unhangRange","match","n","isEditor","isElement","testIsFormatActive","isBlock","test","toggleFormat","toggle","toggleBlock","toggleMark","isActive","removeMark","addMark","isList","unwrapNodes","split","newProperties","align","undefined","setNodes","block","children","wrapNodes"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/src/TextEditor/format/utils.ts"],"sourcesContent":["import { BaseEditor, Editor, Element, Transforms } from \"slate\";\n\nimport { LIST_TYPES, TEXT_ALIGN_TYPES } from \"./constants\";\n\nconst getBlockType = (format: string) =>\n  TEXT_ALIGN_TYPES.includes(format) ? \"align\" : \"type\";\n\nexport const testIsBlock = (type: string) => type === \"block\";\n\nexport const testIsMarkActive = (\n  editor: BaseEditor,\n  format: string | number\n) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nexport const testIsBlockActive = (editor: BaseEditor, format: string) => {\n  const { selection } = editor;\n  if (!selection) {\n    return false;\n  } else {\n    const blockType = getBlockType(format);\n    const [match] = Array.from(\n      Editor.nodes(editor, {\n        at: Editor.unhangRange(editor, selection),\n        match: (n) =>\n          !Editor.isEditor(n) &&\n          Element.isElement(n) &&\n          n[blockType] === format,\n      })\n    );\n    return !!match;\n  }\n};\n\nexport const testIsFormatActive = (\n  editor: BaseEditor,\n  format: string,\n  type: string\n) => {\n  const isBlock = testIsBlock(type);\n  const test = isBlock ? testIsBlockActive : testIsMarkActive;\n  return test(editor, format);\n};\n\nexport const toggleFormat = (editor: BaseEditor, format: any, type: string) => {\n  const isBlock = testIsBlock(type);\n  const toggle = isBlock ? toggleBlock : toggleMark;\n  toggle(editor, format);\n};\n\nexport const toggleMark = (editor: BaseEditor, format: string) => {\n  const isActive = testIsFormatActive(editor, format, \"mark\");\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst toggleBlock = (editor: BaseEditor, format: string) => {\n  const isActive = testIsFormatActive(editor, format, \"block\");\n  const isList = LIST_TYPES.includes(format);\n\n  Transforms.unwrapNodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) &&\n      Element.isElement(n) &&\n      LIST_TYPES.includes(n.type) &&\n      !TEXT_ALIGN_TYPES.includes(format),\n    split: true,\n  });\n  let newProperties: Partial<Element>;\n  if (TEXT_ALIGN_TYPES.includes(format)) {\n    newProperties = {\n      align: isActive ? undefined : format,\n    };\n  } else {\n    newProperties = {\n      type: isActive ? \"p\" : isList ? \"li\" : format,\n    };\n  }\n  Transforms.setNodes<Element>(editor, newProperties);\n\n  if (!isActive && isList) {\n    const block = { type: format, children: [] };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}