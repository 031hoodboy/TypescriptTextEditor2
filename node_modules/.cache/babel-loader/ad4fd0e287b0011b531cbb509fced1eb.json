{"ast":null,"code":"import _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/src/TextEditor/TextEditor.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { memo, useCallback } from \"react\";\nimport { Slate, Editable } from \"slate-react\";\nimport { Layout } from \"../ui\";\nimport { ActionsBar } from \"./actions\";\nimport { Element, Leaf, editor } from \"./editor\";\nimport { FormatBar, handleFormatHotkey, useToggleFormat } from \"./format\";\nimport { Rnd } from \"react-rnd\";\n/**\n * TODOs\n * - [HARD] support multiple mentions and triggers e.g. `@` (user), `#` (field), `:` (emoji)\n * - [HARD] update component signatures to use use `Option`-based interface and async `mentionResolvers`\n * - add types\n * - productionize\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var TextEditor = /*#__PURE__*/memo(_c = _s(function (props) {\n  _s();\n\n  var _props$formats = props.formats,\n      formats = _props$formats === void 0 ? [] : _props$formats,\n      value = props.value,\n      onChange = props.onChange,\n      onPost = props.onPost;\n  var renderElement = useCallback(Element, []);\n  var renderLeaf = useCallback(Leaf, []);\n\n  var _useToggleFormat = useToggleFormat(formats),\n      _useToggleFormat2 = _slicedToArray(_useToggleFormat, 2),\n      enableFormat = _useToggleFormat2[0],\n      toggleFormat = _useToggleFormat2[1];\n\n  return /*#__PURE__*/_jsxDEV(Slate, {\n    editor: editor,\n    value: coerce(value),\n    onChange: onChange,\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      border: \"border\",\n      borderRadius: \"m\",\n      direction: \"column\",\n      p: 2,\n      spacing: 2,\n      children: [enableFormat && /*#__PURE__*/_jsxDEV(FormatBar, {\n        formats: formats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 26\n      }, _this), /*#__PURE__*/_jsxDEV(Rnd, {\n        children: /*#__PURE__*/_jsxDEV(Editable, {\n          renderElement: renderElement,\n          renderLeaf: renderLeaf,\n          placeholder: \"Enter some rich text\\u2026\",\n          spellCheck: true,\n          autoFocus: true,\n          onKeyDown: handleFormatHotkey(editor),\n          value: \"asd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ActionsBar, {\n        onPost: onPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n}, \"PPwSY68y6nrtNfq+pYKEUJVmyYw=\", false, function () {\n  return [useToggleFormat];\n}));\n/**\n * Initializes a node if AST is empty, returns the provided AST otherwise.\n */\n\n_c2 = TextEditor;\nexport var coerce = function coerce(ast) {\n  if (ast.length === 0) {\n    return [{\n      type: \"p\",\n      children: [{\n        text: \"\"\n      }]\n    }];\n  } else {\n    return ast;\n  }\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextEditor$memo\");\n$RefreshReg$(_c2, \"TextEditor\");","map":{"version":3,"names":["React","memo","useCallback","Slate","Editable","Layout","ActionsBar","Element","Leaf","editor","FormatBar","handleFormatHotkey","useToggleFormat","Rnd","TextEditor","props","formats","value","onChange","onPost","renderElement","renderLeaf","enableFormat","toggleFormat","coerce","ast","length","type","children","text"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/src/TextEditor/TextEditor.tsx"],"sourcesContent":["import React, { memo, useCallback } from \"react\";\nimport { Slate, Editable } from \"slate-react\";\n\nimport { Layout } from \"../ui\";\nimport { ActionsBar } from \"./actions\";\nimport { Element, Leaf, editor } from \"./editor\";\nimport { FormatBar, handleFormatHotkey, useToggleFormat } from \"./format\";\nimport { ContentAst } from \"./types\";\nimport { Rnd } from \"react-rnd\";\n\n/**\n * TODOs\n * - [HARD] support multiple mentions and triggers e.g. `@` (user), `#` (field), `:` (emoji)\n * - [HARD] update component signatures to use use `Option`-based interface and async `mentionResolvers`\n * - add types\n * - productionize\n */\ntype Props = {\n  formats: any;\n  value: any;\n  onChange: any;\n  onPost: any;\n};\n\nexport const TextEditor = memo((props: Props) => {\n  const { formats = [], value, onChange, onPost } = props;\n  const renderElement = useCallback(Element, []);\n  const renderLeaf = useCallback(Leaf, []);\n  const [enableFormat, toggleFormat] = useToggleFormat(formats);\n\n  return (\n    <Slate editor={editor} value={coerce(value)} onChange={onChange}>\n      <Layout\n        border=\"border\"\n        borderRadius=\"m\"\n        direction=\"column\"\n        p={2}\n        spacing={2}\n      >\n        {enableFormat && <FormatBar formats={formats} />}\n        <Rnd>\n          <Editable\n            renderElement={renderElement}\n            renderLeaf={renderLeaf}\n            placeholder=\"Enter some rich textâ€¦\"\n            spellCheck\n            autoFocus\n            onKeyDown={handleFormatHotkey(editor)}\n            value=\"asd\"\n          />\n        </Rnd>\n\n        <ActionsBar onPost={onPost} />\n      </Layout>\n    </Slate>\n  );\n});\n\n/**\n * Initializes a node if AST is empty, returns the provided AST otherwise.\n */\nexport const coerce = (ast: ContentAst): ContentAst => {\n  if (ast.length === 0) {\n    return [\n      {\n        type: \"p\",\n        children: [\n          {\n            text: \"\",\n          },\n        ],\n      },\n    ];\n  } else {\n    return ast;\n  }\n};\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,QAAyC,OAAzC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,aAAhC;AAEA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,MAAxB,QAAsC,UAAtC;AACA,SAASC,SAAT,EAAoBC,kBAApB,EAAwCC,eAAxC,QAA+D,UAA/D;AAEA,SAASC,GAAT,QAAoB,WAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAQA,OAAO,IAAMC,UAAU,gBAAGb,IAAI,SAAC,UAACc,KAAD,EAAkB;EAAA;;EAC/C,qBAAkDA,KAAlD,CAAQC,OAAR;EAAA,IAAQA,OAAR,+BAAkB,EAAlB;EAAA,IAAsBC,KAAtB,GAAkDF,KAAlD,CAAsBE,KAAtB;EAAA,IAA6BC,QAA7B,GAAkDH,KAAlD,CAA6BG,QAA7B;EAAA,IAAuCC,MAAvC,GAAkDJ,KAAlD,CAAuCI,MAAvC;EACA,IAAMC,aAAa,GAAGlB,WAAW,CAACK,OAAD,EAAU,EAAV,CAAjC;EACA,IAAMc,UAAU,GAAGnB,WAAW,CAACM,IAAD,EAAO,EAAP,CAA9B;;EACA,uBAAqCI,eAAe,CAACI,OAAD,CAApD;EAAA;EAAA,IAAOM,YAAP;EAAA,IAAqBC,YAArB;;EAEA,oBACE,QAAC,KAAD;IAAO,MAAM,EAAEd,MAAf;IAAuB,KAAK,EAAEe,MAAM,CAACP,KAAD,CAApC;IAA6C,QAAQ,EAAEC,QAAvD;IAAA,uBACE,QAAC,MAAD;MACE,MAAM,EAAC,QADT;MAEE,YAAY,EAAC,GAFf;MAGE,SAAS,EAAC,QAHZ;MAIE,CAAC,EAAE,CAJL;MAKE,OAAO,EAAE,CALX;MAAA,WAOGI,YAAY,iBAAI,QAAC,SAAD;QAAW,OAAO,EAAEN;MAApB;QAAA;QAAA;QAAA;MAAA,SAPnB,eAQE,QAAC,GAAD;QAAA,uBACE,QAAC,QAAD;UACE,aAAa,EAAEI,aADjB;UAEE,UAAU,EAAEC,UAFd;UAGE,WAAW,EAAC,4BAHd;UAIE,UAAU,MAJZ;UAKE,SAAS,MALX;UAME,SAAS,EAAEV,kBAAkB,CAACF,MAAD,CAN/B;UAOE,KAAK,EAAC;QAPR;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,SARF,eAoBE,QAAC,UAAD;QAAY,MAAM,EAAEU;MAApB;QAAA;QAAA;QAAA;MAAA,SApBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,SADF;AA0BD,CAhC6B;EAAA,QAISP,eAJT;AAAA,GAAvB;AAkCP;AACA;AACA;;MApCaE,U;AAqCb,OAAO,IAAMU,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAiC;EACrD,IAAIA,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;IACpB,OAAO,CACL;MACEC,IAAI,EAAE,GADR;MAEEC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE;MADR,CADQ;IAFZ,CADK,CAAP;EAUD,CAXD,MAWO;IACL,OAAOJ,GAAP;EACD;AACF,CAfM"},"metadata":{},"sourceType":"module"}