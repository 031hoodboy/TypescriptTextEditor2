{"ast":null,"code":"import isBase64 from './isBase64';\nvar formats = {\n  '.woff': 'woff',\n  '.woff2': 'woff2',\n  '.eot': 'embedded-opentype',\n  '.ttf': 'truetype',\n  '.otf': 'opentype',\n  '.svg': 'svg',\n  '.svgz': 'svg'\n};\nvar base64Formats = {\n  'image/svg+xml': 'svg',\n  'application/x-font-woff': 'woff',\n  'application/font-woff': 'woff',\n  'application/x-font-woff2': 'woff2',\n  'application/font-woff2': 'woff2',\n  'font/woff2': 'woff2',\n  'application/octet-stream': 'truetype',\n  'application/x-font-ttf': 'truetype',\n  'application/x-font-truetype': 'truetype',\n  'application/x-font-opentype': 'opentype',\n  'application/vnd.ms-fontobject': 'embedded-opentype',\n  'application/font-sfnt': 'sfnt'\n};\nexport default function getFontFormat(src) {\n  if (isBase64(src)) {\n    var mime = '';\n\n    for (var i = 5;; i++) {\n      // 'data:'.length === 5\n      var c = src.charAt(i);\n\n      if (c === ';' || c === ',') {\n        break;\n      }\n\n      mime += c;\n    }\n\n    var fmt = base64Formats[mime];\n\n    if (fmt) {\n      return fmt;\n    }\n\n    console.warn('A invalid base64 font was used. Please use one of the following mime type: ' + Object.keys(base64Formats).join(', ') + '.');\n  } else {\n    var extension = '';\n\n    for (var _i = src.length - 1;; _i--) {\n      var _c = src.charAt(_i);\n\n      if (_c === '.') {\n        // fetches all the string from the gotten dot to the end\n        // of the string\n        var strippedSrc = src.slice(_i, src.length); // removes all query string that are usually attached to the\n        // font face strings e.g ./font-location/font.woff2?some-query\n        // Reference: https://github.com/robinweser/fela/issues/642\n\n        extension = strippedSrc.includes('?') ? strippedSrc.split('?', 1)[0] : strippedSrc;\n        break;\n      }\n    }\n\n    var _fmt = formats[extension];\n\n    if (_fmt) {\n      return _fmt;\n    }\n\n    console.warn('A invalid font-format was used in \"' + src + '\". Use one of these: ' + Object.keys(formats).join(', ') + '.');\n  }\n\n  return '';\n}","map":{"version":3,"names":["isBase64","formats","base64Formats","getFontFormat","src","mime","i","c","charAt","fmt","console","warn","Object","keys","join","extension","_i","length","_c","strippedSrc","slice","includes","split","_fmt"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/fela/es/getFontFormat.js"],"sourcesContent":["import isBase64 from './isBase64';\n\nvar formats = {\n  '.woff': 'woff',\n  '.woff2': 'woff2',\n  '.eot': 'embedded-opentype',\n  '.ttf': 'truetype',\n  '.otf': 'opentype',\n  '.svg': 'svg',\n  '.svgz': 'svg'\n};\n\nvar base64Formats = {\n  'image/svg+xml': 'svg',\n  'application/x-font-woff': 'woff',\n  'application/font-woff': 'woff',\n  'application/x-font-woff2': 'woff2',\n  'application/font-woff2': 'woff2',\n  'font/woff2': 'woff2',\n  'application/octet-stream': 'truetype',\n  'application/x-font-ttf': 'truetype',\n  'application/x-font-truetype': 'truetype',\n  'application/x-font-opentype': 'opentype',\n  'application/vnd.ms-fontobject': 'embedded-opentype',\n  'application/font-sfnt': 'sfnt'\n};\n\nexport default function getFontFormat(src) {\n  if (isBase64(src)) {\n    var mime = '';\n    for (var i = 5;; i++) {\n      // 'data:'.length === 5\n      var c = src.charAt(i);\n\n      if (c === ';' || c === ',') {\n        break;\n      }\n\n      mime += c;\n    }\n\n    var fmt = base64Formats[mime];\n    if (fmt) {\n      return fmt;\n    }\n\n    console.warn('A invalid base64 font was used. Please use one of the following mime type: ' + Object.keys(base64Formats).join(', ') + '.');\n  } else {\n    var extension = '';\n    for (var _i = src.length - 1;; _i--) {\n      var _c = src.charAt(_i);\n\n      if (_c === '.') {\n        // fetches all the string from the gotten dot to the end\n        // of the string\n        var strippedSrc = src.slice(_i, src.length);\n\n        // removes all query string that are usually attached to the\n        // font face strings e.g ./font-location/font.woff2?some-query\n        // Reference: https://github.com/robinweser/fela/issues/642\n        extension = strippedSrc.includes('?') ? strippedSrc.split('?', 1)[0] : strippedSrc;\n\n        break;\n      }\n    }\n\n    var _fmt = formats[extension];\n    if (_fmt) {\n      return _fmt;\n    }\n\n    console.warn('A invalid font-format was used in \"' + src + '\". Use one of these: ' + Object.keys(formats).join(', ') + '.');\n  }\n  return '';\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAIC,OAAO,GAAG;EACZ,SAAS,MADG;EAEZ,UAAU,OAFE;EAGZ,QAAQ,mBAHI;EAIZ,QAAQ,UAJI;EAKZ,QAAQ,UALI;EAMZ,QAAQ,KANI;EAOZ,SAAS;AAPG,CAAd;AAUA,IAAIC,aAAa,GAAG;EAClB,iBAAiB,KADC;EAElB,2BAA2B,MAFT;EAGlB,yBAAyB,MAHP;EAIlB,4BAA4B,OAJV;EAKlB,0BAA0B,OALR;EAMlB,cAAc,OANI;EAOlB,4BAA4B,UAPV;EAQlB,0BAA0B,UARR;EASlB,+BAA+B,UATb;EAUlB,+BAA+B,UAVb;EAWlB,iCAAiC,mBAXf;EAYlB,yBAAyB;AAZP,CAApB;AAeA,eAAe,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;EACzC,IAAIJ,QAAQ,CAACI,GAAD,CAAZ,EAAmB;IACjB,IAAIC,IAAI,GAAG,EAAX;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,GAAiBA,CAAC,EAAlB,EAAsB;MACpB;MACA,IAAIC,CAAC,GAAGH,GAAG,CAACI,MAAJ,CAAWF,CAAX,CAAR;;MAEA,IAAIC,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAAvB,EAA4B;QAC1B;MACD;;MAEDF,IAAI,IAAIE,CAAR;IACD;;IAED,IAAIE,GAAG,GAAGP,aAAa,CAACG,IAAD,CAAvB;;IACA,IAAII,GAAJ,EAAS;MACP,OAAOA,GAAP;IACD;;IAEDC,OAAO,CAACC,IAAR,CAAa,gFAAgFC,MAAM,CAACC,IAAP,CAAYX,aAAZ,EAA2BY,IAA3B,CAAgC,IAAhC,CAAhF,GAAwH,GAArI;EACD,CAnBD,MAmBO;IACL,IAAIC,SAAS,GAAG,EAAhB;;IACA,KAAK,IAAIC,EAAE,GAAGZ,GAAG,CAACa,MAAJ,GAAa,CAA3B,GAA+BD,EAAE,EAAjC,EAAqC;MACnC,IAAIE,EAAE,GAAGd,GAAG,CAACI,MAAJ,CAAWQ,EAAX,CAAT;;MAEA,IAAIE,EAAE,KAAK,GAAX,EAAgB;QACd;QACA;QACA,IAAIC,WAAW,GAAGf,GAAG,CAACgB,KAAJ,CAAUJ,EAAV,EAAcZ,GAAG,CAACa,MAAlB,CAAlB,CAHc,CAKd;QACA;QACA;;QACAF,SAAS,GAAGI,WAAW,CAACE,QAAZ,CAAqB,GAArB,IAA4BF,WAAW,CAACG,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0B,CAA1B,CAA5B,GAA2DH,WAAvE;QAEA;MACD;IACF;;IAED,IAAII,IAAI,GAAGtB,OAAO,CAACc,SAAD,CAAlB;;IACA,IAAIQ,IAAJ,EAAU;MACR,OAAOA,IAAP;IACD;;IAEDb,OAAO,CAACC,IAAR,CAAa,wCAAwCP,GAAxC,GAA8C,uBAA9C,GAAwEQ,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqBa,IAArB,CAA0B,IAA1B,CAAxE,GAA0G,GAAvH;EACD;;EACD,OAAO,EAAP;AACD"},"metadata":{},"sourceType":"module"}