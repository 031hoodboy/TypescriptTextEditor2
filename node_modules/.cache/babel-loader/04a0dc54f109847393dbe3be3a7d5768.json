{"ast":null,"code":"import _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/src/TextEditor/TextEditor.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { memo, useCallback } from \"react\";\nimport { Slate, Editable } from \"slate-react\";\nimport { Layout } from \"../ui\";\nimport { ActionsBar } from \"./actions\";\nimport { Element, Leaf, editor } from \"./editor\";\nimport { FormatBar, handleFormatHotkey, useToggleFormat } from \"./format\";\nimport { handleTriggerMention, MentionSuggestions } from \"./mention\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var TextEditor = /*#__PURE__*/memo(_c = _s(function (_ref) {\n  _s();\n\n  var _ref$formats = _ref.formats,\n      formats = _ref$formats === void 0 ? [] : _ref$formats,\n      _ref$mentions = _ref.mentions,\n      mentions = _ref$mentions === void 0 ? [] : _ref$mentions,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      onPost = _ref.onPost;\n  var renderElement = useCallback(Element, []);\n  var renderLeaf = useCallback(Leaf, []);\n\n  var _useToggleFormat = useToggleFormat(formats),\n      _useToggleFormat2 = _slicedToArray(_useToggleFormat, 2),\n      enableFormat = _useToggleFormat2[0],\n      toggleFormat = _useToggleFormat2[1];\n\n  return /*#__PURE__*/_jsxDEV(Slate, {\n    editor: editor,\n    value: coerce(value),\n    onChange: onChange,\n    children: [/*#__PURE__*/_jsxDEV(Layout, {\n      border: \"border\",\n      borderRadius: \"m\",\n      direction: \"column\",\n      p: 2,\n      spacing: 2,\n      children: [enableFormat && /*#__PURE__*/_jsxDEV(FormatBar, {\n        formats: formats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 28\n      }, _this), /*#__PURE__*/_jsxDEV(Editable, {\n        renderElement: renderElement,\n        renderLeaf: renderLeaf,\n        placeholder: \"Enter some rich text\\u2026\",\n        spellCheck: true,\n        autoFocus: true,\n        onKeyDown: handleFormatHotkey(editor)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(ActionsBar, {\n        enableFormat: enableFormat,\n        onMention: handleTriggerMention(editor),\n        onPost: onPost,\n        onToggleFormat: toggleFormat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(MentionSuggestions, {\n      mentions: mentions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, _this);\n}, \"PPwSY68y6nrtNfq+pYKEUJVmyYw=\", false, function () {\n  return [useToggleFormat];\n}));\n/**\n * Initializes a node if AST is empty, returns the provided AST otherwise.\n */\n\n_c2 = TextEditor;\nexport var coerce = function coerce(ast) {\n  if (ast.length === 0) {\n    return [{\n      type: \"p\",\n      children: [{\n        text: \"\"\n      }]\n    }];\n  } else {\n    return ast;\n  }\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextEditor$memo\");\n$RefreshReg$(_c2, \"TextEditor\");","map":{"version":3,"names":["React","memo","useCallback","Slate","Editable","Layout","ActionsBar","Element","Leaf","editor","FormatBar","handleFormatHotkey","useToggleFormat","handleTriggerMention","MentionSuggestions","TextEditor","formats","mentions","value","onChange","onPost","renderElement","renderLeaf","enableFormat","toggleFormat","coerce","ast","length","type","children","text"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/src/TextEditor/TextEditor.tsx"],"sourcesContent":["import React, { memo, useCallback } from \"react\";\nimport { Slate, Editable } from \"slate-react\";\n\nimport { Layout } from \"../ui\";\nimport { ActionsBar } from \"./actions\";\nimport { Element, Leaf, editor } from \"./editor\";\nimport { FormatBar, handleFormatHotkey, useToggleFormat } from \"./format\";\nimport { handleTriggerMention, MentionSuggestions } from \"./mention\";\nimport { ContentAst } from \"./types\";\n\n/**\n * TODOs\n * - [HARD] support multiple mentions and triggers e.g. `@` (user), `#` (field), `:` (emoji)\n * - [HARD] update component signatures to use use `Option`-based interface and async `mentionResolvers`\n * - add types\n * - productionize\n */\ntype Props = {\n  formats: Array;\n  mentions: Array;\n  value: any;\n  onChange: any;\n  onPost: any;\n};\n\nexport const TextEditor = memo(\n  ({ formats = [], mentions = [], value, onChange, onPost }) => {\n    const renderElement = useCallback(Element, []);\n    const renderLeaf = useCallback(Leaf, []);\n    const [enableFormat, toggleFormat] = useToggleFormat(formats);\n\n    return (\n      <Slate editor={editor} value={coerce(value)} onChange={onChange}>\n        <Layout\n          border=\"border\"\n          borderRadius=\"m\"\n          direction=\"column\"\n          p={2}\n          spacing={2}\n        >\n          {enableFormat && <FormatBar formats={formats} />}\n          <Editable\n            renderElement={renderElement}\n            renderLeaf={renderLeaf}\n            placeholder=\"Enter some rich textâ€¦\"\n            spellCheck\n            autoFocus\n            onKeyDown={handleFormatHotkey(editor)}\n          />\n          <ActionsBar\n            enableFormat={enableFormat}\n            onMention={handleTriggerMention(editor)}\n            onPost={onPost}\n            onToggleFormat={toggleFormat}\n          />\n        </Layout>\n        <MentionSuggestions mentions={mentions} />\n      </Slate>\n    );\n  }\n);\n\n/**\n * Initializes a node if AST is empty, returns the provided AST otherwise.\n */\nexport const coerce = (ast: ContentAst): ContentAst => {\n  if (ast.length === 0) {\n    return [\n      {\n        type: \"p\",\n        children: [\n          {\n            text: \"\",\n          },\n        ],\n      },\n    ];\n  } else {\n    return ast;\n  }\n};\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,QAAyC,OAAzC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,aAAhC;AAEA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,MAAxB,QAAsC,UAAtC;AACA,SAASC,SAAT,EAAoBC,kBAApB,EAAwCC,eAAxC,QAA+D,UAA/D;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,WAAzD;;AAkBA,OAAO,IAAMC,UAAU,gBAAGd,IAAI,SAC5B,gBAA8D;EAAA;;EAAA,wBAA3De,OAA2D;EAAA,IAA3DA,OAA2D,6BAAjD,EAAiD;EAAA,yBAA7CC,QAA6C;EAAA,IAA7CA,QAA6C,8BAAlC,EAAkC;EAAA,IAA9BC,KAA8B,QAA9BA,KAA8B;EAAA,IAAvBC,QAAuB,QAAvBA,QAAuB;EAAA,IAAbC,MAAa,QAAbA,MAAa;EAC5D,IAAMC,aAAa,GAAGnB,WAAW,CAACK,OAAD,EAAU,EAAV,CAAjC;EACA,IAAMe,UAAU,GAAGpB,WAAW,CAACM,IAAD,EAAO,EAAP,CAA9B;;EACA,uBAAqCI,eAAe,CAACI,OAAD,CAApD;EAAA;EAAA,IAAOO,YAAP;EAAA,IAAqBC,YAArB;;EAEA,oBACE,QAAC,KAAD;IAAO,MAAM,EAAEf,MAAf;IAAuB,KAAK,EAAEgB,MAAM,CAACP,KAAD,CAApC;IAA6C,QAAQ,EAAEC,QAAvD;IAAA,wBACE,QAAC,MAAD;MACE,MAAM,EAAC,QADT;MAEE,YAAY,EAAC,GAFf;MAGE,SAAS,EAAC,QAHZ;MAIE,CAAC,EAAE,CAJL;MAKE,OAAO,EAAE,CALX;MAAA,WAOGI,YAAY,iBAAI,QAAC,SAAD;QAAW,OAAO,EAAEP;MAApB;QAAA;QAAA;QAAA;MAAA,SAPnB,eAQE,QAAC,QAAD;QACE,aAAa,EAAEK,aADjB;QAEE,UAAU,EAAEC,UAFd;QAGE,WAAW,EAAC,4BAHd;QAIE,UAAU,MAJZ;QAKE,SAAS,MALX;QAME,SAAS,EAAEX,kBAAkB,CAACF,MAAD;MAN/B;QAAA;QAAA;QAAA;MAAA,SARF,eAgBE,QAAC,UAAD;QACE,YAAY,EAAEc,YADhB;QAEE,SAAS,EAAEV,oBAAoB,CAACJ,MAAD,CAFjC;QAGE,MAAM,EAAEW,MAHV;QAIE,cAAc,EAAEI;MAJlB;QAAA;QAAA;QAAA;MAAA,SAhBF;IAAA;MAAA;MAAA;MAAA;IAAA,SADF,eAwBE,QAAC,kBAAD;MAAoB,QAAQ,EAAEP;IAA9B;MAAA;MAAA;MAAA;IAAA,SAxBF;EAAA;IAAA;IAAA;IAAA;EAAA,SADF;AA4BD,CAlC2B;EAAA,QAIWL,eAJX;AAAA,GAAvB;AAqCP;AACA;AACA;;MAvCaG,U;AAwCb,OAAO,IAAMU,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAiC;EACrD,IAAIA,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;IACpB,OAAO,CACL;MACEC,IAAI,EAAE,GADR;MAEEC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE;MADR,CADQ;IAFZ,CADK,CAAP;EAUD,CAXD,MAWO;IACL,OAAOJ,GAAP;EACD;AACF,CAfM"},"metadata":{},"sourceType":"module"}