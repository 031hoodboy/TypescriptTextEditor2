{"ast":null,"code":"// @ts-ignore: formal types unavailable\nimport felaResponsiveValue from 'fela-plugin-responsive-value';\nexport { responsiveValue };\n/**\n * @typedef {import('fela').TPlugin} Plugin\n */\n\n/**\n * Fela plugin to handle responsive values.\n *\n * @param {object} props\n * @param {string[]} props.breakpoints\n * @param {string[]} props.responsiveCssProperties\n * @returns {Plugin}\n */\n\nvar responsiveValue = function responsiveValue(_ref) {\n  var breakpoints = _ref.breakpoints,\n      responsiveCssProperties = _ref.responsiveCssProperties;\n  return felaResponsiveValue(getMediaQueries(breakpoints), getResponsiveProperties(responsiveCssProperties));\n};\n/**\n * Returns a callback that returns min-width-based media query breakpoints.\n *\n * @param {string[]} breakpoints\n * @returns {() => string[]}\n */\n\n\nvar getMediaQueries = function getMediaQueries(breakpoints) {\n  return function () {\n    return breakpoints.map(function (breakpoint) {\n      return \"@media screen and (min-width: \".concat(breakpoint, \")\");\n    });\n  };\n};\n/**\n * Reduces an array of responsive CSS properties into object notation.\n *\n * @param {string[]} responsiveCssProperties\n * @returns {Object<string, boolean>}\n */\n\n\nvar getResponsiveProperties = function getResponsiveProperties(responsiveCssProperties) {\n  /** @type {Object<string, boolean>} */\n  var initialAcc = {};\n  return responsiveCssProperties.reduce(function (acc, attribute) {\n    acc[attribute] = true;\n    return acc;\n  }, initialAcc);\n};","map":{"version":3,"names":["felaResponsiveValue","responsiveValue","breakpoints","responsiveCssProperties","getMediaQueries","getResponsiveProperties","map","breakpoint","initialAcc","reduce","acc","attribute"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/uinix-ui/lib/renderer/plugin-responsive-value.js"],"sourcesContent":["// @ts-ignore: formal types unavailable\nimport felaResponsiveValue from 'fela-plugin-responsive-value';\n\nexport {responsiveValue};\n\n/**\n * @typedef {import('fela').TPlugin} Plugin\n */\n\n/**\n * Fela plugin to handle responsive values.\n *\n * @param {object} props\n * @param {string[]} props.breakpoints\n * @param {string[]} props.responsiveCssProperties\n * @returns {Plugin}\n */\nconst responsiveValue = ({breakpoints, responsiveCssProperties}) =>\n  felaResponsiveValue(\n    getMediaQueries(breakpoints),\n    getResponsiveProperties(responsiveCssProperties),\n  );\n\n/**\n * Returns a callback that returns min-width-based media query breakpoints.\n *\n * @param {string[]} breakpoints\n * @returns {() => string[]}\n */\nconst getMediaQueries = (breakpoints) => () =>\n  breakpoints.map(\n    (breakpoint) => `@media screen and (min-width: ${breakpoint})`,\n  );\n\n/**\n * Reduces an array of responsive CSS properties into object notation.\n *\n * @param {string[]} responsiveCssProperties\n * @returns {Object<string, boolean>}\n */\nconst getResponsiveProperties = (responsiveCssProperties) => {\n  /** @type {Object<string, boolean>} */\n  const initialAcc = {};\n  return responsiveCssProperties.reduce((acc, attribute) => {\n    acc[attribute] = true;\n    return acc;\n  }, initialAcc);\n};\n"],"mappings":"AAAA;AACA,OAAOA,mBAAP,MAAgC,8BAAhC;AAEA,SAAQC,eAAR;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB;EAAA,IAAEC,WAAF,QAAEA,WAAF;EAAA,IAAeC,uBAAf,QAAeA,uBAAf;EAAA,OACtBH,mBAAmB,CACjBI,eAAe,CAACF,WAAD,CADE,EAEjBG,uBAAuB,CAACF,uBAAD,CAFN,CADG;AAAA,CAAxB;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACF,WAAD;EAAA,OAAiB;IAAA,OACvCA,WAAW,CAACI,GAAZ,CACE,UAACC,UAAD;MAAA,+CAAiDA,UAAjD;IAAA,CADF,CADuC;EAAA,CAAjB;AAAA,CAAxB;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMF,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACF,uBAAD,EAA6B;EAC3D;EACA,IAAMK,UAAU,GAAG,EAAnB;EACA,OAAOL,uBAAuB,CAACM,MAAxB,CAA+B,UAACC,GAAD,EAAMC,SAAN,EAAoB;IACxDD,GAAG,CAACC,SAAD,CAAH,GAAiB,IAAjB;IACA,OAAOD,GAAP;EACD,CAHM,EAGJF,UAHI,CAAP;AAID,CAPD"},"metadata":{},"sourceType":"module"}