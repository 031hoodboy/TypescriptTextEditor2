{"ast":null,"code":"import _createClass from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createForOfIteratorHelper from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty2 from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { useLayoutEffect, useEffect, useRef, useState, Fragment, useContext, createContext, useMemo, useCallback, useReducer } from 'react';\nimport { Path, Node, Editor, Text as Text$1, Range, Element as Element$1, Transforms } from 'slate';\nimport getDirection from 'direction';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { isKeyHotkey } from 'is-hotkey';\nimport ReactDOM from 'react-dom';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar IS_REACT_VERSION_17_OR_ABOVE = parseInt(React.version.split('.')[0], 10) >= 17;\nvar IS_IOS = typeof navigator !== 'undefined' && typeof window !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nvar IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);\nvar IS_ANDROID = typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent);\nvar IS_FIREFOX = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nvar IS_SAFARI = typeof navigator !== 'undefined' && /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent); // \"modern\" Edge was released at 79.x\n\nvar IS_EDGE_LEGACY = typeof navigator !== 'undefined' && /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])(\\.)/i.test(navigator.userAgent);\nvar IS_CHROME = typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent); // Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\n\nvar IS_CHROME_LEGACY = typeof navigator !== 'undefined' && /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])(\\.)/i.test(navigator.userAgent); // Firefox did not support `beforeInput` until `v87`.\n\nvar IS_FIREFOX_LEGACY = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(navigator.userAgent); // qq browser\n\nvar IS_QQBROWSER = typeof navigator !== 'undefined' && /.*QQBrowser/.test(navigator.userAgent); // UC mobile browser\n\nvar IS_UC_MOBILE = typeof navigator !== 'undefined' && /.*UCBrowser/.test(navigator.userAgent); // Wechat browser\n\nvar IS_WECHATBROWSER = typeof navigator !== 'undefined' && /.*Wechat/.test(navigator.userAgent); // Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\n\nvar CAN_USE_DOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined'); // COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\n\nvar HAS_BEFORE_INPUT_SUPPORT = !IS_CHROME_LEGACY && !IS_EDGE_LEGACY && // globalThis is undefined in older browsers\ntypeof globalThis !== 'undefined' && globalThis.InputEvent && // @ts-ignore The `getTargetRanges` property isn't recognized.\ntypeof globalThis.InputEvent.prototype.getTargetRanges === 'function';\n/**\r\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\r\n */\n\nvar useIsomorphicLayoutEffect = CAN_USE_DOM ? useLayoutEffect : useEffect;\n/**\r\n * Leaf content strings.\r\n */\n\nvar String = function String(props) {\n  var isLast = props.isLast,\n      leaf = props.leaf,\n      parent = props.parent,\n      text = props.text;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = Path.parent(path); // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      length: Node.string(parent).length\n    });\n  } // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n\n\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isLineBreak: true\n    });\n  } // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n\n\n  if (leaf.text === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, null);\n  } // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n\n\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\r\n * Leaf strings with text in them.\r\n */\n\n\nvar TextString = function TextString(props) {\n  var text = props.text,\n      _props$isTrailing = props.isTrailing,\n      isTrailing = _props$isTrailing === void 0 ? false : _props$isTrailing;\n  var ref = useRef(null);\n\n  var getTextContent = function getTextContent() {\n    return \"\".concat(text !== null && text !== void 0 ? text : '').concat(isTrailing ? '\\n' : '');\n  }; // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n  // useLayoutEffect: updating our span before browser paint\n\n\n  useIsomorphicLayoutEffect(function () {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    var textWithTrailing = getTextContent();\n\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing;\n    } // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n\n  }); // Render text content immediately if it's the first-time render\n  // Ensure that text content is rendered on server-side rendering\n\n  if (!ref.current) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      \"data-slate-string\": true,\n      ref: ref\n    }, getTextContent());\n  } // the span is intentionally same on every render in virtual DOM, actual rendering happens in the layout effect above\n\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref\n  });\n};\n/**\r\n * Leaf strings without text, render as zero-width strings.\r\n */\n\n\nvar ZeroWidthString = function ZeroWidthString(props) {\n  var _props$length = props.length,\n      length = _props$length === void 0 ? 0 : _props$length,\n      _props$isLineBreak = props.isLineBreak,\n      isLineBreak = _props$isLineBreak === void 0 ? false : _props$isLineBreak;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-zero-width\": isLineBreak ? 'n' : 'z',\n    \"data-slate-length\": length\n  }, \"\\uFEFF\", isLineBreak ? /*#__PURE__*/React.createElement(\"br\", null) : null);\n};\n/**\r\n * Two weak maps that allow us rebuild a path given a node. They are populated\r\n * at render time such that after a render occurs we can always backtrack.\r\n */\n\n\nvar NODE_TO_INDEX = new WeakMap();\nvar NODE_TO_PARENT = new WeakMap();\n/**\r\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\r\n * are used to resolve DOM event-related logic into Slate actions.\r\n */\n\nvar EDITOR_TO_WINDOW = new WeakMap();\nvar EDITOR_TO_ELEMENT = new WeakMap();\nvar ELEMENT_TO_NODE = new WeakMap();\nvar NODE_TO_ELEMENT = new WeakMap();\nvar NODE_TO_KEY = new WeakMap();\nvar EDITOR_TO_KEY_TO_ELEMENT = new WeakMap();\n/**\r\n * Weak maps for storing editor-related state.\r\n */\n\nvar IS_READ_ONLY = new WeakMap();\nvar IS_FOCUSED = new WeakMap();\nvar IS_COMPOSING = new WeakMap();\nvar IS_ON_COMPOSITION_END = new WeakMap();\nvar EDITOR_TO_USER_SELECTION = new WeakMap();\n/**\r\n * Weak maps for saving text on composition stage.\r\n */\n\nvar EDITOR_ON_COMPOSITION_TEXT = new WeakMap();\n/**\r\n * Weak map for associating the context `onChange` context with the plugin.\r\n */\n\nvar EDITOR_TO_ON_CHANGE = new WeakMap();\nvar NODE_TO_RESTORE_DOM = new WeakMap();\n/**\r\n * Symbols.\r\n */\n\nvar PLACEHOLDER_SYMBOL = Symbol('placeholder');\n/**\r\n * Individual leaves in a text node with unique formatting.\r\n */\n\nvar Leaf = function Leaf(props) {\n  var leaf = props.leaf,\n      isLast = props.isLast,\n      text = props.text,\n      parent = props.parent,\n      renderPlaceholder = props.renderPlaceholder,\n      _props$renderLeaf = props.renderLeaf,\n      renderLeaf = _props$renderLeaf === void 0 ? function (props) {\n    return /*#__PURE__*/React.createElement(DefaultLeaf, Object.assign({}, props));\n  } : _props$renderLeaf;\n  var placeholderRef = useRef(null);\n  useEffect(function () {\n    var placeholderEl = placeholderRef === null || placeholderRef === void 0 ? void 0 : placeholderRef.current;\n    var editorEl = document.querySelector('[data-slate-editor=\"true\"]');\n\n    if (!placeholderEl || !editorEl) {\n      return;\n    }\n\n    editorEl.style.minHeight = \"\".concat(placeholderEl.clientHeight, \"px\");\n    return function () {\n      editorEl.style.minHeight = 'auto';\n    };\n  }, [placeholderRef, leaf]);\n  var children = /*#__PURE__*/React.createElement(String, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none'\n        },\n        contentEditable: false,\n        ref: placeholderRef\n      }\n    };\n    children = /*#__PURE__*/React.createElement(React.Fragment, null, renderPlaceholder(placeholderProps), children);\n  } // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n\n\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes: attributes,\n    children: children,\n    leaf: leaf,\n    text: text\n  });\n};\n\nvar MemoizedLeaf = /*#__PURE__*/React.memo(Leaf, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && Text$1.equals(next.leaf, prev.leaf) && next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];\n});\n\nvar DefaultLeaf = function DefaultLeaf(props) {\n  var attributes = props.attributes,\n      children = props.children;\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n\nvar _excluded$3 = [\"anchor\", \"focus\"],\n    _excluded2 = [\"anchor\", \"focus\"];\n\nvar shallowCompare = function shallowCompare(obj1, obj2) {\n  return Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every(function (key) {\n    return obj2.hasOwnProperty(key) && obj1[key] === obj2[key];\n  });\n};\n/**\r\n * Check if a list of decorator ranges are equal to another.\r\n *\r\n * PERF: this requires the two lists to also have the ranges inside them in the\r\n * same order, but this is an okay constraint for us since decorations are\r\n * kept in order, and the odd case where they aren't is okay to re-render for.\r\n */\n\n\nvar isDecoratorRangeListEqual = function isDecoratorRangeListEqual(list, another) {\n  if (list.length !== another.length) {\n    return false;\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var range = list[i];\n    var other = another[i];\n\n    var rangeOwnProps = _objectWithoutProperties(range, _excluded$3);\n\n    var otherOwnProps = _objectWithoutProperties(other, _excluded2);\n\n    if (!Range.equals(range, other) || range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] || !shallowCompare(rangeOwnProps, otherOwnProps)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction useContentKey(node) {\n  var contentKeyRef = useRef(0);\n  var updateAnimationFrameRef = useRef(null);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      setForceRerenderCounter = _useState2[1];\n\n  useEffect(function () {\n    NODE_TO_RESTORE_DOM.set(node, function () {\n      // Update is already queued and node hasn't re-render yet\n      if (updateAnimationFrameRef.current) {\n        return;\n      }\n\n      updateAnimationFrameRef.current = requestAnimationFrame(function () {\n        setForceRerenderCounter(function (state) {\n          return state + 1;\n        });\n        updateAnimationFrameRef.current = null;\n      });\n      contentKeyRef.current++;\n    });\n    return function () {\n      NODE_TO_RESTORE_DOM.delete(node);\n    };\n  }, [node]); // Node was restored => clear scheduled update\n\n  if (updateAnimationFrameRef.current) {\n    cancelAnimationFrame(updateAnimationFrameRef.current);\n    updateAnimationFrameRef.current = null;\n  }\n\n  return contentKeyRef.current;\n}\n/**\r\n * Text.\r\n */\n\n\nvar Text = function Text(props) {\n  var decorations = props.decorations,\n      isLast = props.isLast,\n      parent = props.parent,\n      renderPlaceholder = props.renderPlaceholder,\n      renderLeaf = props.renderLeaf,\n      text = props.text;\n  var editor = useSlateStatic();\n  var ref = useRef(null);\n  var leaves = Text$1.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push( /*#__PURE__*/React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(function () {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n\n    if (ref.current) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(text, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(text);\n    }\n  });\n  var contentKey = IS_ANDROID ? useContentKey(text) : undefined;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: ref,\n    key: contentKey\n  }, children);\n};\n\nvar MemoizedText = /*#__PURE__*/React.memo(Text, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && isDecoratorRangeListEqual(next.decorations, prev.decorations);\n});\n/**\r\n * Element.\r\n */\n\nvar Element = function Element(props) {\n  var decorations = props.decorations,\n      element = props.element,\n      _props$renderElement = props.renderElement,\n      renderElement = _props$renderElement === void 0 ? function (p) {\n    return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, p));\n  } : _props$renderElement,\n      renderPlaceholder = props.renderPlaceholder,\n      renderLeaf = props.renderLeaf,\n      selection = props.selection;\n  var ref = useRef(null);\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var children = useChildren({\n    decorations: decorations,\n    node: element,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: selection\n  }); // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n\n  var attributes = {\n    'data-slate-node': 'element',\n    ref: ref\n  };\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  } // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n\n\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    var text = Node.string(element);\n    var dir = getDirection(text);\n\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  } // If it's a void node, wrap the children in extra void-specific elements.\n\n\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n\n    var Tag = isInline ? 'span' : 'div';\n\n    var _Node$texts = Node.texts(element),\n        _Node$texts2 = _slicedToArray(_Node$texts, 1),\n        _Node$texts2$ = _slicedToArray(_Node$texts2[0], 1),\n        _text = _Node$texts2$[0];\n\n    children = /*#__PURE__*/React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/React.createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    NODE_TO_INDEX.set(_text, 0);\n    NODE_TO_PARENT.set(_text, element);\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(function () {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n\n    if (ref.current) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(element, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(element);\n    }\n  });\n  var content = renderElement({\n    attributes: attributes,\n    children: children,\n    element: element\n  });\n\n  if (IS_ANDROID) {\n    var contentKey = useContentKey(element);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: contentKey\n    }, content);\n  }\n\n  return content;\n};\n\nvar MemoizedElement = /*#__PURE__*/React.memo(Element, function (prev, next) {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isDecoratorRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && Range.equals(prev.selection, next.selection));\n});\n/**\r\n * The default element renderer.\r\n */\n\nvar DefaultElement = function DefaultElement(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/React.createElement(Tag, Object.assign({}, attributes, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n/**\r\n * A React context for sharing the editor object.\r\n */\n\n\nvar EditorContext = /*#__PURE__*/createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlateStatic = function useSlateStatic() {\n  var editor = useContext(EditorContext);\n\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return editor;\n};\n/**\r\n * A React context for sharing the `selected` state of an element.\r\n */\n\n\nvar SelectedContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `selected` state of an element.\r\n */\n\nvar useSelected = function useSelected() {\n  return useContext(SelectedContext);\n};\n/**\r\n * Children.\r\n */\n\n\nvar useChildren = function useChildren(props) {\n  var decorations = props.decorations,\n      node = props.node,\n      renderElement = props.renderElement,\n      renderPlaceholder = props.renderPlaceholder,\n      renderLeaf = props.renderLeaf,\n      selection = props.selection;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = Element$1.isElement(node) && !editor.isInline(node) && Editor.hasInlines(editor, node);\n\n  var _loop = function _loop(i) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = Editor.range(editor, p);\n    var sel = selection && Range.intersection(range, selection);\n    var ds = decorations.reduce(function (acc, dec) {\n      var intersection = Range.intersection(dec, range);\n      if (intersection) acc.push(intersection);\n      return acc;\n    }, []);\n\n    if (Element$1.isElement(n)) {\n      children.push( /*#__PURE__*/React.createElement(SelectedContext.Provider, {\n        key: \"provider-\".concat(key.id),\n        value: !!sel\n      }, /*#__PURE__*/React.createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      })));\n    } else {\n      children.push( /*#__PURE__*/React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n\n    NODE_TO_INDEX.set(n, i);\n    NODE_TO_PARENT.set(n, node);\n  };\n\n  for (var i = 0; i < node.children.length; i++) {\n    _loop(i);\n  }\n\n  return children;\n};\n/**\r\n * Hotkey mappings for each platform.\r\n */\n\n\nvar HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  insertSoftBreak: 'shift+enter',\n  splitBlock: 'enter',\n  undo: 'mod+z'\n};\nvar APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t'\n};\nvar WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z']\n};\n/**\r\n * Create a platform-aware hotkey checker.\r\n */\n\nvar create = function create(key) {\n  var generic = HOTKEYS[key];\n  var apple = APPLE_HOTKEYS[key];\n  var windows = WINDOWS_HOTKEYS[key];\n  var isGeneric = generic && isKeyHotkey(generic);\n  var isApple = apple && isKeyHotkey(apple);\n  var isWindows = windows && isKeyHotkey(windows);\n  return function (event) {\n    if (isGeneric && isGeneric(event)) return true;\n    if (IS_APPLE && isApple && isApple(event)) return true;\n    if (!IS_APPLE && isWindows && isWindows(event)) return true;\n    return false;\n  };\n};\n/**\r\n * Hotkeys.\r\n */\n\n\nvar Hotkeys = {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSoftBreak: create('insertSoftBreak'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo')\n};\n/**\r\n * A React context for sharing the `readOnly` state of the editor.\r\n */\n\nvar ReadOnlyContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `readOnly` state of the editor.\r\n */\n\nvar useReadOnly = function useReadOnly() {\n  return useContext(ReadOnlyContext);\n};\n/**\r\n * A React context for sharing the editor object, in a way that re-renders the\r\n * context whenever changes occur.\r\n */\n\n\nvar SlateContext = /*#__PURE__*/createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlate = function useSlate() {\n  var context = useContext(SlateContext);\n\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n\n  var _context = _slicedToArray(context, 1),\n      editor = _context[0];\n\n  return editor;\n};\n/**\r\n * A React context for sharing the `decorate` prop of the editable.\r\n */\n\n\nvar DecorateContext = /*#__PURE__*/createContext(function () {\n  return [];\n});\n/**\r\n * Types.\r\n */\n\n/**\r\n * Returns the host window of a DOM node\r\n */\n\nvar getDefaultView = function getDefaultView(value) {\n  return value && value.ownerDocument && value.ownerDocument.defaultView || null;\n};\n/**\r\n * Check if a DOM node is a comment node.\r\n */\n\n\nvar isDOMComment = function isDOMComment(value) {\n  return isDOMNode(value) && value.nodeType === 8;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMElement = function isDOMElement(value) {\n  return isDOMNode(value) && value.nodeType === 1;\n};\n/**\r\n * Check if a value is a DOM node.\r\n */\n\n\nvar isDOMNode = function isDOMNode(value) {\n  var window = getDefaultView(value);\n  return !!window && value instanceof window.Node;\n};\n/**\r\n * Check if a value is a DOM selection.\r\n */\n\n\nvar isDOMSelection = function isDOMSelection(value) {\n  var window = value && value.anchorNode && getDefaultView(value.anchorNode);\n  return !!window && value instanceof window.Selection;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMText = function isDOMText(value) {\n  return isDOMNode(value) && value.nodeType === 3;\n};\n/**\r\n * Checks whether a paste event is a plaintext-only event.\r\n */\n\n\nvar isPlainTextOnlyPaste = function isPlainTextOnlyPaste(event) {\n  return event.clipboardData && event.clipboardData.getData('text/plain') !== '' && event.clipboardData.types.length === 1;\n};\n/**\r\n * Normalize a DOM point so that it always refers to a text node.\r\n */\n\n\nvar normalizeDOMPoint = function normalizeDOMPoint(domPoint) {\n  var _domPoint = _slicedToArray(domPoint, 2),\n      node = _domPoint[0],\n      offset = _domPoint[1]; // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n\n\n  if (isDOMElement(node) && node.childNodes.length) {\n    var isLast = offset === node.childNodes.length;\n    var index = isLast ? offset - 1 : offset;\n\n    var _getEditableChildAndI = getEditableChildAndIndex(node, index, isLast ? 'backward' : 'forward');\n\n    var _getEditableChildAndI2 = _slicedToArray(_getEditableChildAndI, 2);\n\n    node = _getEditableChildAndI2[0];\n    index = _getEditableChildAndI2[1];\n    // If the editable child found is in front of input offset, we instead seek to its end\n    isLast = index < offset; // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n\n    while (isDOMElement(node) && node.childNodes.length) {\n      var i = isLast ? node.childNodes.length - 1 : 0;\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward');\n    } // Determine the new offset inside the text node.\n\n\n    offset = isLast && node.textContent != null ? node.textContent.length : 0;\n  } // Return the node and offset.\n\n\n  return [node, offset];\n};\n/**\r\n * Determines wether the active element is nested within a shadowRoot\r\n */\n\n\nvar hasShadowRoot = function hasShadowRoot() {\n  return !!(window.document.activeElement && window.document.activeElement.shadowRoot);\n};\n/**\r\n * Get the nearest editable child and index at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\n\nvar getEditableChildAndIndex = function getEditableChildAndIndex(parent, index, direction) {\n  var childNodes = parent.childNodes;\n  var child = childNodes[index];\n  var i = index;\n  var triedForward = false;\n  var triedBackward = false; // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n\n  while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute('contenteditable') === 'false') {\n    if (triedForward && triedBackward) {\n      break;\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true;\n      i = index - 1;\n      direction = 'backward';\n      continue;\n    }\n\n    if (i < 0) {\n      triedBackward = true;\n      i = index + 1;\n      direction = 'forward';\n      continue;\n    }\n\n    child = childNodes[i];\n    index = i;\n    i += direction === 'forward' ? 1 : -1;\n  }\n\n  return [child, index];\n};\n/**\r\n * Get the nearest editable child at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\n\nvar getEditableChild = function getEditableChild(parent, index, direction) {\n  var _getEditableChildAndI3 = getEditableChildAndIndex(parent, index, direction),\n      _getEditableChildAndI4 = _slicedToArray(_getEditableChildAndI3, 1),\n      child = _getEditableChildAndI4[0];\n\n  return child;\n};\n/**\r\n * Get a plaintext representation of the content of a node, accounting for block\r\n * elements which get a newline appended.\r\n *\r\n * The domNode must be attached to the DOM.\r\n */\n\n\nvar getPlainText = function getPlainText(domNode) {\n  var text = '';\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue;\n  }\n\n  if (isDOMElement(domNode)) {\n    for (var _i = 0, _Array$from = Array.from(domNode.childNodes); _i < _Array$from.length; _i++) {\n      var childNode = _Array$from[_i];\n      text += getPlainText(childNode);\n    }\n\n    var display = getComputedStyle(domNode).getPropertyValue('display');\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n';\n    }\n  }\n\n  return text;\n};\n/**\r\n * Get x-slate-fragment attribute from data-slate-fragment\r\n */\n\n\nvar catchSlateFragment = /data-slate-fragment=\"(.+?)\"/m;\n\nvar getSlateFragmentAttribute = function getSlateFragmentAttribute(dataTransfer) {\n  var htmlData = dataTransfer.getData('text/html');\n\n  var _ref8 = htmlData.match(catchSlateFragment) || [],\n      _ref9 = _slicedToArray(_ref8, 2),\n      fragment = _ref9[1];\n\n  return fragment;\n};\n/**\r\n * Get the x-slate-fragment attribute that exist in text/html data\r\n * and append it to the DataTransfer object\r\n */\n\n\nvar getClipboardData = function getClipboardData(dataTransfer) {\n  if (!dataTransfer.getData('application/x-slate-fragment')) {\n    var fragment = getSlateFragmentAttribute(dataTransfer);\n\n    if (fragment) {\n      var clipboardData = new DataTransfer();\n      dataTransfer.types.forEach(function (type) {\n        clipboardData.setData(type, dataTransfer.getData(type));\n      });\n      clipboardData.setData('application/x-slate-fragment', fragment);\n      return clipboardData;\n    }\n  }\n\n  return dataTransfer;\n};\n\nvar TRIPLE_CLICK = 3;\nvar _excluded$2 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\"];\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Children = function Children(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, useChildren(props));\n};\n/**\r\n * Editable.\r\n */\n\n\nvar Editable$1 = function Editable$1(props) {\n  var autoFocus = props.autoFocus,\n      _props$decorate = props.decorate,\n      decorate = _props$decorate === void 0 ? defaultDecorate : _props$decorate,\n      propsOnDOMBeforeInput = props.onDOMBeforeInput,\n      placeholder = props.placeholder,\n      _props$readOnly = props.readOnly,\n      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n      renderElement = props.renderElement,\n      renderLeaf = props.renderLeaf,\n      _props$renderPlacehol = props.renderPlaceholder,\n      renderPlaceholder = _props$renderPlacehol === void 0 ? function (props) {\n    return /*#__PURE__*/React.createElement(DefaultPlaceholder, Object.assign({}, props));\n  } : _props$renderPlacehol,\n      _props$scrollSelectio = props.scrollSelectionIntoView,\n      scrollSelectionIntoView = _props$scrollSelectio === void 0 ? defaultScrollSelectionIntoView : _props$scrollSelectio,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {} : _props$style,\n      _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      attributes = _objectWithoutProperties(props, _excluded$2);\n\n  var editor = useSlate(); // Rerender editor when composition status changed\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isComposing = _useState4[0],\n      setIsComposing = _useState4[1];\n\n  var ref = useRef(null);\n  var deferredOperations = useRef([]); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = useMemo(function () {\n    return {\n      isComposing: false,\n      hasInsertPrefixInCompositon: false,\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null\n    };\n  }, []); // Whenever the editor updates...\n\n  useIsomorphicLayoutEffect(function () {\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n    } // Make sure the DOM selection state is in sync.\n\n\n    var selection = editor.selection;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return;\n    }\n\n    var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n    if (!selection && !hasDomSelection) {\n      return;\n    } // verify that the dom selection is in the editor\n\n\n    var editorElement = EDITOR_TO_ELEMENT.get(editor);\n    var hasDomSelectionInEditor = false;\n\n    if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n      hasDomSelectionInEditor = true;\n    } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true,\n        // domSelection is not necessarily a valid Slate range\n        // (e.g. when clicking on contentEditable:false element)\n        suppressThrow: true\n      });\n\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return;\n      }\n    } // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n\n\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: false\n      });\n      return;\n    } // Otherwise the DOM selection is out of sync, so update it.\n\n\n    state.isUpdatingSelection = true;\n    var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n\n    if (newDomRange) {\n      if (Range.isBackward(selection)) {\n        domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n      } else {\n        domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n      }\n\n      scrollSelectionIntoView(editor, newDomRange);\n    } else {\n      domSelection.removeAllRanges();\n    }\n\n    setTimeout(function () {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        el.focus();\n      }\n\n      state.isUpdatingSelection = false;\n    });\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(function () {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = useCallback(throttle(function () {\n    if (!state.isComposing && !state.isUpdatingSelection && !state.isDraggingInternally) {\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var activeElement = root.activeElement;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = root.getSelection();\n\n      if (activeElement === el) {\n        state.latestElement = activeElement;\n        IS_FOCUSED.set(editor, true);\n      } else {\n        IS_FOCUSED.delete(editor);\n      }\n\n      if (!domSelection) {\n        return Transforms.deselect(editor);\n      }\n\n      var anchorNode = domSelection.anchorNode,\n          focusNode = domSelection.focusNode;\n      var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideNonReadonlyVoid(editor, anchorNode);\n      var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideNonReadonlyVoid(editor, focusNode);\n\n      if (anchorNodeSelectable && focusNodeSelectable) {\n        var range = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: false\n        });\n        Transforms.select(editor, range);\n      }\n    }\n  }, 100), [readOnly]);\n  var scheduleOnDOMSelectionChange = useMemo(function () {\n    return debounce(onDOMSelectionChange, 0);\n  }, [onDOMSelectionChange]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = useCallback(function (event) {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var _EDITOR_TO_USER_SELEC; // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n\n\n      scheduleOnDOMSelectionChange.flush();\n      onDOMSelectionChange.flush();\n      var selection = editor.selection;\n      var type = event.inputType;\n      var data = event.dataTransfer || event.data || undefined; // These two types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n\n      if (type === 'insertCompositionText' || type === 'deleteCompositionText') {\n        return;\n      }\n\n      var native = false;\n\n      if (type === 'insertText' && selection && Range.isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        native = true; // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n\n        if (editor.marks) {\n          native = false;\n        } // Chrome also has issues correctly editing the end of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n        // Therefore we don't allow native events to insert text at the end of nodes.\n\n\n        var anchor = selection.anchor;\n        var inline = Editor.above(editor, {\n          at: anchor,\n          match: function match(n) {\n            return Editor.isInline(editor, n);\n          },\n          mode: 'highest'\n        });\n\n        if (inline) {\n          var _inline = _slicedToArray(inline, 2),\n              inlinePath = _inline[1];\n\n          if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n            native = false;\n          }\n        }\n      }\n\n      if (!native) {\n        event.preventDefault();\n      } // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n\n\n      if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n        var _event$getTargetRange = event.getTargetRanges(),\n            _event$getTargetRange2 = _slicedToArray(_event$getTargetRange, 1),\n            targetRange = _event$getTargetRange2[0];\n\n        if (targetRange) {\n          var range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n\n          if (!selection || !Range.equals(selection, range)) {\n            var selectionRef = editor.selection && Editor.rangeRef(editor, editor.selection);\n            Transforms.select(editor, range);\n\n            if (selectionRef) {\n              EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n            }\n          }\n        }\n      } // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n\n\n      if (selection && Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        Editor.deleteFragment(editor, {\n          direction: direction\n        });\n        return;\n      }\n\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            Editor.deleteFragment(editor);\n            break;\n          }\n\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            Editor.deleteForward(editor);\n            break;\n          }\n\n        case 'deleteContentBackward':\n          {\n            Editor.deleteBackward(editor);\n            break;\n          }\n\n        case 'deleteEntireSoftLine':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteWordBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'deleteWordForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'insertLineBreak':\n          Editor.insertSoftBreak(editor);\n          break;\n\n        case 'insertParagraph':\n          {\n            Editor.insertBreak(editor);\n            break;\n          }\n\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            var _selection = editor.selection;\n\n            if (_selection) {\n              if (Range.isExpanded(_selection)) {\n                Editor.deleteFragment(editor);\n              }\n            }\n\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              state.isComposing && setIsComposing(false);\n              state.isComposing = false;\n            } // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n\n\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(function () {\n                  return Editor.insertText(editor, data);\n                });\n              } else {\n                Editor.insertText(editor, data);\n              }\n            }\n\n            break;\n          }\n      } // Restore the actual user section if nothing manually set it.\n\n\n      var toRestore = (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n      EDITOR_TO_USER_SELECTION.delete(editor);\n\n      if (toRestore && (!editor.selection || !Range.equals(editor.selection, toRestore))) {\n        Transforms.select(editor, toRestore);\n      }\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n\n  useIsomorphicLayoutEffect(function () {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput);\n    }\n\n    return function () {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    };\n  }, [onDOMBeforeInput]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(function () {\n    var window = ReactEditor.getWindow(editor);\n    window.document.addEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    return function () {\n      window.document.removeEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    };\n  }, [scheduleOnDOMSelectionChange]);\n\n  var decorations = _toConsumableArray(Node.nodes(editor)).flatMap(function (_ref) {\n    var _ref10 = _slicedToArray(_ref, 2),\n        n = _ref10[0],\n        p = _ref10[1];\n\n    return decorate([n, p]);\n  });\n\n  if (placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '' && !isComposing) {\n    var _decorations$push;\n\n    var start = Editor.start(editor, []);\n    decorations.push((_decorations$push = {}, _defineProperty2(_decorations$push, PLACEHOLDER_SYMBOL, true), _defineProperty2(_decorations$push, \"placeholder\", placeholder), _defineProperty2(_decorations$push, \"anchor\", start), _defineProperty2(_decorations$push, \"focus\", start), _decorations$push));\n  }\n\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: _objectSpread$1({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, style),\n    onBeforeInput: useCallback(function (event) {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && hasEditableTarget(editor, event.target)) {\n        event.preventDefault();\n\n        if (!state.isComposing) {\n          var text = event.data;\n          Editor.insertText(editor, text);\n        }\n      }\n    }, [readOnly]),\n    onInput: useCallback(function (event) {\n      // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n      var _iterator = _createForOfIteratorHelper(deferredOperations.current),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var op = _step.value;\n          op();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      deferredOperations.current = [];\n    }, []),\n    onBlur: useCallback(function (event) {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n\n      var relatedTarget = event.relatedTarget;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      } // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n\n\n      if (IS_SAFARI) {\n        var domSelection = root.getSelection();\n        domSelection === null || domSelection === void 0 ? void 0 : domSelection.removeAllRanges();\n      }\n\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, attributes.onBlur]),\n    onClick: useCallback(function (event) {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n\n        if (event.detail === TRIPLE_CLICK) {\n          var _start = Editor.start(editor, [path[0]]);\n\n          var end = Editor.end(editor, [path[0]]);\n          var range = Editor.range(editor, _start, end);\n          Transforms.select(editor, range);\n          return;\n        }\n\n        if (readOnly) {\n          return;\n        } // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n\n\n        if (Editor.hasPath(editor, path)) {\n          var lookupNode = Node.get(editor, path);\n\n          if (lookupNode === node) {\n            var _start2 = Editor.start(editor, path);\n\n            var _end = Editor.end(editor, path);\n\n            var startVoid = Editor.void(editor, {\n              at: _start2\n            });\n            var endVoid = Editor.void(editor, {\n              at: _end\n            });\n\n            if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {\n              var _range = Editor.range(editor, _start2);\n\n              Transforms.select(editor, _range);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onClick]),\n    onCompositionEnd: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionEnd)) {\n        state.isComposing && setIsComposing(false);\n        state.isComposing = false; // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n\n        if (!IS_SAFARI && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_QQBROWSER && !IS_WECHATBROWSER && !IS_UC_MOBILE && event.data) {\n          Editor.insertText(editor, event.data);\n        }\n\n        if (editor.selection && Range.isCollapsed(editor.selection)) {\n          var leafPath = editor.selection.anchor.path;\n          var currentTextNode = Node.leaf(editor, leafPath);\n\n          if (state.hasInsertPrefixInCompositon) {\n            state.hasInsertPrefixInCompositon = false;\n            Editor.withoutNormalizing(editor, function () {\n              // remove Unicode BOM prefix added in `onCompositionStart`\n              var text = currentTextNode.text.replace(/^\\uFEFF/, '');\n              Transforms.delete(editor, {\n                distance: currentTextNode.text.length,\n                reverse: true\n              });\n              Editor.insertText(editor, text);\n            });\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd]),\n    onCompositionUpdate: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        !state.isComposing && setIsComposing(true);\n        state.isComposing = true;\n      }\n    }, [attributes.onCompositionUpdate]),\n    onCompositionStart: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionStart)) {\n        var selection = editor.selection,\n            marks = editor.marks;\n\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n            return;\n          }\n\n          var inline = Editor.above(editor, {\n            match: function match(n) {\n              return Editor.isInline(editor, n);\n            },\n            mode: 'highest'\n          });\n\n          if (inline) {\n            var _inline2 = _slicedToArray(inline, 2),\n                inlinePath = _inline2[1];\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              var point = Editor.after(editor, inlinePath);\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point\n              });\n            }\n          } // insert new node in advance to ensure composition text will insert\n          // along with final input text\n          // add Unicode BOM prefix to avoid normalize removing this node\n\n\n          if (marks) {\n            state.hasInsertPrefixInCompositon = true;\n            Transforms.insertNodes(editor, _objectSpread$1({\n              text: \"\\uFEFF\"\n            }, marks), {\n              select: true\n            });\n          }\n        }\n      }\n    }, [attributes.onCompositionStart]),\n    onCopy: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var selection = editor.selection;\n\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n\n            if (Editor.isVoid(editor, node)) {\n              Transforms.delete(editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onDragOver: useCallback(function (event) {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n\n        if (Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver]),\n    onDragStart: useCallback(function (event) {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = Editor.isVoid(editor, node) || Editor.void(editor, {\n          at: path,\n          voids: true\n        }); // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n\n        if (voidMatch) {\n          var range = Editor.range(editor, path);\n          Transforms.select(editor, range);\n        }\n\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag');\n      }\n    }, [readOnly, attributes.onDragStart]),\n    onDrop: useCallback(function (event) {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault(); // Keep a reference to the dragged range before updating selection\n\n        var draggedRange = editor.selection; // Find the range where the drop happened\n\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        Transforms.select(editor, range);\n\n        if (state.isDraggingInternally) {\n          if (draggedRange && !Range.equals(draggedRange, range) && !Editor.void(editor, {\n            at: range,\n            voids: true\n          })) {\n            Transforms.delete(editor, {\n              at: draggedRange\n            });\n          }\n        }\n\n        ReactEditor.insertData(editor, data); // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n\n      state.isDraggingInternally = false;\n    }, [readOnly, attributes.onDrop]),\n    onDragEnd: useCallback(function (event) {\n      if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && hasTarget(editor, event.target)) {\n        attributes.onDragEnd(event);\n      } // When dropping on a different droppable element than the current editor,\n      // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n      // Note: `onDragEnd` is only called when `onDrop` is not called\n\n\n      state.isDraggingInternally = false;\n    }, [readOnly, attributes.onDragEnd]),\n    onFocus: useCallback(function (event) {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement; // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n\n        if (IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onKeyDown: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onKeyDown) && !state.isComposing) {\n        var nativeEvent = event.nativeEvent;\n        var selection = editor.selection;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = getDirection(Node.string(element)) === 'rtl'; // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n\n        if (Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n\n          return;\n        } // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n\n\n        if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        } // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n\n\n        if (Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'start'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'end'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        } // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n\n\n        if (!HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n\n          if (Hotkeys.isSoftBreak(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertSoftBreak(editor);\n            return;\n          }\n\n          if (Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertBreak(editor);\n            return;\n          }\n\n          if (Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n        } else {\n          if (IS_CHROME || IS_SAFARI) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && Range.isCollapsed(selection)) {\n              var currentNode = Node.parent(editor, selection.anchor.path);\n\n              if (Element$1.isElement(currentNode) && Editor.isVoid(editor, currentNode) && Editor.isInline(editor, currentNode)) {\n                event.preventDefault();\n                Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onKeyDown]),\n    onPaste: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent)) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, attributes.onPaste])\n  }), /*#__PURE__*/React.createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))));\n};\n/**\r\n * The default placeholder element\r\n */\n\n\nvar DefaultPlaceholder = function DefaultPlaceholder(_ref2) {\n  var attributes = _ref2.attributes,\n      children = _ref2.children;\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n/**\r\n * A default memoized decorate function.\r\n */\n\n\nvar defaultDecorate = function defaultDecorate() {\n  return [];\n};\n/**\r\n * A default implement to scroll dom range into view.\r\n */\n\n\nvar defaultScrollSelectionIntoView = function defaultScrollSelectionIntoView(editor, domRange) {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (!editor.selection || editor.selection && Range.isCollapsed(editor.selection)) {\n    var leafEl = domRange.startContainer.parentElement;\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed'\n    });\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\r\n * Check if the target is in the editor.\r\n */\n\n\nvar hasTarget = function hasTarget(editor, target) {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);\n};\n/**\r\n * Check if the target is editable and in the editor.\r\n */\n\n\nvar hasEditableTarget = function hasEditableTarget(editor, target) {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {\n    editable: true\n  });\n};\n/**\r\n * Check if the target is inside void and in an non-readonly editor.\r\n */\n\n\nvar isTargetInsideNonReadonlyVoid = function isTargetInsideNonReadonlyVoid(editor, target) {\n  if (IS_READ_ONLY.get(editor)) return false;\n  var slateNode = hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);\n  return Editor.isVoid(editor, slateNode);\n};\n/**\r\n * Check if an event is overrided by a handler.\r\n */\n\n\nvar isEventHandled = function isEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n\n  var shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\r\n * Check if a DOM event is overrided by a handler.\r\n */\n\n\nvar isDOMEventHandled = function isDOMEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n\n  var shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.defaultPrevented;\n};\n/**\r\n * Returns the number of characters that are the same at the beginning of the\r\n * String.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @returns the offset of the start of the difference; null if there is no difference\r\n */\n\n\nfunction getDiffStart(prev, next) {\n  var length = Math.min(prev.length, next.length);\n\n  for (var i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i;\n  }\n\n  if (prev.length !== next.length) return length;\n  return null;\n}\n/**\r\n * Returns the number of characters that are the same at the end of the String\r\n * up to `max`. Max prevents double-counting characters when there are\r\n * multiple duplicate characters around the diff area.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @param max  the max length to test.\r\n * @returns number of characters that are the same at the end of the string\r\n */\n\n\nfunction getDiffEnd(prev, next, max) {\n  var prevLength = prev.length;\n  var nextLength = next.length;\n  var length = Math.min(prevLength, nextLength, max);\n\n  for (var i = 0; i < length; i++) {\n    var prevChar = prev.charAt(prevLength - i - 1);\n    var nextChar = next.charAt(nextLength - i - 1);\n    if (prevChar !== nextChar) return i;\n  }\n\n  if (prev.length !== next.length) return length;\n  return null;\n}\n/**\r\n * Takes two strings and returns an object representing two offsets. The\r\n * first, `start` represents the number of characters that are the same at\r\n * the front of the String. The `end` represents the number of characters\r\n * that are the same at the end of the String.\r\n *\r\n * Returns null if they are identical.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @returns the difference text range; null if there are no differences.\r\n */\n\n\nfunction getDiffOffsets(prev, next) {\n  if (prev === next) return null;\n  var start = getDiffStart(prev, next);\n  if (start === null) return null;\n  var maxEnd = Math.min(prev.length - start, next.length - start);\n  var end = getDiffEnd(prev, next, maxEnd);\n  if (end === null) return null;\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\r\n * Takes a text string and returns a slice from the string at the given text range\r\n *\r\n * @param text  the text\r\n * @param offsets  the text range\r\n * @returns the text slice at text range\r\n */\n\n\nfunction sliceText(text, offsets) {\n  return text.slice(offsets.start, text.length - offsets.end);\n}\n/**\r\n * Takes two strings and returns a smart diff that can be used to describe the\r\n * change in a way that can be used as operations like inserting, removing or\r\n * replacing text.\r\n *\r\n * @param prev the previous text\r\n * @param next the next text\r\n * @returns the text difference\r\n */\n\n\nfunction diffText(prev, next) {\n  if (prev === undefined || next === undefined) return null;\n  var offsets = getDiffOffsets(prev, next);\n  if (offsets == null) return null;\n  var insertText = sliceText(next, offsets);\n  var removeText = sliceText(prev, offsets);\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText: insertText,\n    removeText: removeText\n  };\n}\n\nfunction combineInsertedText(insertedText) {\n  return insertedText.reduce(function (acc, _ref) {\n    var text = _ref.text;\n    return \"\".concat(acc).concat(text.insertText);\n  }, '');\n}\n\nfunction getTextInsertion(editor, domNode) {\n  var node = ReactEditor.toSlateNode(editor, domNode);\n\n  if (!Text$1.isText(node)) {\n    return undefined;\n  }\n\n  var prevText = node.text;\n  var nextText = domNode.textContent; // textContent will pad an extra \\n when the textContent ends with an \\n\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1);\n  } // If the text is no different, there is no diff.\n\n\n  if (nextText !== prevText) {\n    var textDiff = diffText(prevText, nextText);\n\n    if (textDiff !== null) {\n      var textPath = ReactEditor.findPath(editor, node);\n      return {\n        text: textDiff,\n        path: textPath\n      };\n    }\n  }\n\n  return undefined;\n}\n\nfunction normalizeTextInsertionRange(editor, range, _ref2) {\n  var path = _ref2.path,\n      text = _ref2.text;\n  var insertionRange = {\n    anchor: {\n      path: path,\n      offset: text.start\n    },\n    focus: {\n      path: path,\n      offset: text.end\n    }\n  };\n\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange;\n  }\n\n  var insertText = text.insertText,\n      removeText = text.removeText;\n  var isSingleCharacterInsertion = insertText.length === 1 || removeText.length === 1;\n  /**\r\n   * This code handles edge cases that arise from text diffing when the\r\n   * inserted or removed character is a single character, and the character\r\n   * right before or after the anchor is the same as the one being inserted or\r\n   * removed.\r\n   *\r\n   * Take this example: hello|o\r\n   *\r\n   * If another `o` is inserted at the selection's anchor in the example above,\r\n   * it should be inserted at the anchor, but using text diffing, we actually\r\n   * detect that the character was inserted after the second `o`:\r\n   *\r\n   * helloo[o]|\r\n   *\r\n   * Instead, in these very specific edge cases, we assume that the character\r\n   * needs to be inserted after the anchor rather than where the diff was found:\r\n   *\r\n   * hello[o]|o\r\n   */\n\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    var _Array$from2 = Array.from(Editor.nodes(editor, {\n      at: range,\n      match: Text$1.isText\n    })),\n        _Array$from3 = _slicedToArray(_Array$from2, 1),\n        _text = _Array$from3[0];\n\n    if (_text) {\n      var _text2 = _slicedToArray(_text, 1),\n          node = _text2[0];\n\n      var anchor = range.anchor;\n      var characterBeforeAnchor = node.text[anchor.offset - 1];\n      var characterAfterAnchor = node.text[anchor.offset];\n\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range;\n      }\n\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: {\n            path: path,\n            offset: anchor.offset - 1\n          },\n          focus: {\n            path: path,\n            offset: anchor.offset\n          }\n        };\n      }\n    }\n  }\n\n  return insertionRange;\n}\n/**\r\n * An auto-incrementing identifier for keys.\r\n */\n\n\nvar n = 0;\n/**\r\n * A class that keeps track of a key string. We use a full class here because we\r\n * want to be able to use them as keys in `WeakMap` objects.\r\n */\n\nvar Key = /*#__PURE__*/_createClass(function Key() {\n  _classCallCheck(this, Key);\n\n  this.id = \"\".concat(n++);\n});\n\nvar ReactEditor = {\n  /**\r\n   * Return the host window of the current editor.\r\n   */\n  getWindow: function getWindow(editor) {\n    var window = EDITOR_TO_WINDOW.get(editor);\n\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor');\n    }\n\n    return window;\n  },\n\n  /**\r\n   * Find a key for a Slate node.\r\n   */\n  findKey: function findKey(editor, node) {\n    var key = NODE_TO_KEY.get(node);\n\n    if (!key) {\n      key = new Key();\n      NODE_TO_KEY.set(node, key);\n    }\n\n    return key;\n  },\n\n  /**\r\n   * Find the path of Slate node.\r\n   */\n  findPath: function findPath(editor, node) {\n    var path = [];\n    var child = node;\n\n    while (true) {\n      var parent = NODE_TO_PARENT.get(child);\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path;\n        } else {\n          break;\n        }\n      }\n\n      var i = NODE_TO_INDEX.get(child);\n\n      if (i == null) {\n        break;\n      }\n\n      path.unshift(i);\n      child = parent;\n    }\n\n    throw new Error(\"Unable to find the path for Slate node: \".concat(JSON.stringify(node)));\n  },\n\n  /**\r\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\r\n   */\n  findDocumentOrShadowRoot: function findDocumentOrShadowRoot(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n\n    if ((root instanceof Document || root instanceof ShadowRoot) && root.getSelection != null) {\n      return root;\n    }\n\n    return el.ownerDocument;\n  },\n\n  /**\r\n   * Check if the editor is focused.\r\n   */\n  isFocused: function isFocused(editor) {\n    return !!IS_FOCUSED.get(editor);\n  },\n\n  /**\r\n   * Check if the editor is in read-only mode.\r\n   */\n  isReadOnly: function isReadOnly(editor) {\n    return !!IS_READ_ONLY.get(editor);\n  },\n\n  /**\r\n   * Blur the editor.\r\n   */\n  blur: function blur(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, false);\n\n    if (root.activeElement === el) {\n      el.blur();\n    }\n  },\n\n  /**\r\n   * Focus the editor.\r\n   */\n  focus: function focus(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, true);\n\n    if (root.activeElement !== el) {\n      el.focus({\n        preventScroll: true\n      });\n    }\n  },\n\n  /**\r\n   * Deselect the editor.\r\n   */\n  deselect: function deselect(editor) {\n    ReactEditor.toDOMNode(editor, editor);\n    var selection = editor.selection;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges();\n    }\n\n    if (selection) {\n      Transforms.deselect(editor);\n    }\n  },\n\n  /**\r\n   * Check if a DOM node is within the editor.\r\n   */\n  hasDOMNode: function hasDOMNode(editor, target) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _options$editable = options.editable,\n        editable = _options$editable === void 0 ? false : _options$editable;\n    var editorEl = ReactEditor.toDOMNode(editor, editor);\n    var targetEl; // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n\n    try {\n      targetEl = isDOMElement(target) ? target : target.parentElement;\n    } catch (err) {\n      if (!err.message.includes('Permission denied to access property \"nodeType\"')) {\n        throw err;\n      }\n    }\n\n    if (!targetEl) {\n      return false;\n    }\n\n    return targetEl.closest(\"[data-slate-editor]\") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === 'boolean' && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined\n    // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable=\"false\"(readOnly)\n    targetEl.closest('[contenteditable=\"false\"]') === editorEl || !!targetEl.getAttribute('data-slate-zero-width'));\n  },\n\n  /**\r\n   * Insert data from a `DataTransfer` into the editor.\r\n   */\n  insertData: function insertData(editor, data) {\n    editor.insertData(data);\n  },\n\n  /**\r\n   * Insert fragment data from a `DataTransfer` into the editor.\r\n   */\n  insertFragmentData: function insertFragmentData(editor, data) {\n    return editor.insertFragmentData(data);\n  },\n\n  /**\r\n   * Insert text data from a `DataTransfer` into the editor.\r\n   */\n  insertTextData: function insertTextData(editor, data) {\n    return editor.insertTextData(data);\n  },\n\n  /**\r\n   * Sets data from the currently selected fragment on a `DataTransfer`.\r\n   */\n  setFragmentData: function setFragmentData(editor, data, originEvent) {\n    editor.setFragmentData(data, originEvent);\n  },\n\n  /**\r\n   * Find the native DOM element from a Slate node.\r\n   */\n  toDOMNode: function toDOMNode(editor, node) {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    var domNode = Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));\n\n    if (!domNode) {\n      throw new Error(\"Cannot resolve a DOM node from Slate node: \".concat(JSON.stringify(node)));\n    }\n\n    return domNode;\n  },\n\n  /**\r\n   * Find a native DOM selection point from a Slate point.\r\n   */\n  toDOMPoint: function toDOMPoint(editor, point) {\n    var _Editor$node = Editor.node(editor, point.path),\n        _Editor$node2 = _slicedToArray(_Editor$node, 1),\n        node = _Editor$node2[0];\n\n    var el = ReactEditor.toDOMNode(editor, node);\n    var domPoint; // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n\n    if (Editor.void(editor, {\n      at: point\n    })) {\n      point = {\n        path: point.path,\n        offset: 0\n      };\n    } // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n\n\n    var selector = \"[data-slate-string], [data-slate-zero-width]\";\n    var texts = Array.from(el.querySelectorAll(selector));\n    var start = 0;\n\n    for (var _i2 = 0, _texts = texts; _i2 < _texts.length; _i2++) {\n      var text = _texts[_i2];\n      var domNode = text.childNodes[0];\n\n      if (domNode == null || domNode.textContent == null) {\n        continue;\n      }\n\n      var length = domNode.textContent.length;\n      var attr = text.getAttribute('data-slate-length');\n      var trueLength = attr == null ? length : parseInt(attr, 10);\n      var end = start + trueLength;\n\n      if (point.offset <= end) {\n        var offset = Math.min(length, Math.max(0, point.offset - start));\n        domPoint = [domNode, offset];\n        break;\n      }\n\n      start = end;\n    }\n\n    if (!domPoint) {\n      throw new Error(\"Cannot resolve a DOM point from Slate point: \".concat(JSON.stringify(point)));\n    }\n\n    return domPoint;\n  },\n\n  /**\r\n   * Find a native DOM range from a Slate `range`.\r\n   *\r\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\r\n   *\r\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\r\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\r\n   */\n  toDOMRange: function toDOMRange(editor, range) {\n    var anchor = range.anchor,\n        focus = range.focus;\n    var isBackward = Range.isBackward(range);\n    var domAnchor = ReactEditor.toDOMPoint(editor, anchor);\n    var domFocus = Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);\n    var window = ReactEditor.getWindow(editor);\n    var domRange = window.document.createRange();\n\n    var _ref11 = isBackward ? domFocus : domAnchor,\n        _ref12 = _slicedToArray(_ref11, 2),\n        startNode = _ref12[0],\n        startOffset = _ref12[1];\n\n    var _ref13 = isBackward ? domAnchor : domFocus,\n        _ref14 = _slicedToArray(_ref13, 2),\n        endNode = _ref14[0],\n        endOffset = _ref14[1]; // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n\n\n    var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;\n    var isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width');\n    var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;\n    var isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width');\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);\n    return domRange;\n  },\n\n  /**\r\n   * Find a Slate node from a native DOM `element`.\r\n   */\n  toSlateNode: function toSlateNode(editor, domNode) {\n    var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(\"[data-slate-node]\");\n    }\n\n    var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;\n\n    if (!node) {\n      throw new Error(\"Cannot resolve a Slate node from DOM node: \".concat(domEl));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Get the target range from a DOM `event`.\r\n   */\n  findEventRange: function findEventRange(editor, event) {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent;\n    }\n\n    var _event = event,\n        x = _event.clientX,\n        y = _event.clientY,\n        target = _event.target;\n\n    if (x == null || y == null) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    }\n\n    var node = ReactEditor.toSlateNode(editor, event.target);\n    var path = ReactEditor.findPath(editor, node); // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n\n    if (Editor.isVoid(editor, node)) {\n      var rect = target.getBoundingClientRect();\n      var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;\n      var edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end'\n      });\n      var point = isPrev ? Editor.before(editor, edge) : Editor.after(editor, edge);\n\n      if (point) {\n        var _range = Editor.range(editor, point);\n\n        return _range;\n      }\n    } // Else resolve a range from the caret position where the drop occured.\n\n\n    var domRange;\n\n    var _ReactEditor$getWindo = ReactEditor.getWindow(editor),\n        document = _ReactEditor$getWindo.document; // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n\n\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y);\n    } else {\n      var position = document.caretPositionFromPoint(x, y);\n\n      if (position) {\n        domRange = document.createRange();\n        domRange.setStart(position.offsetNode, position.offset);\n        domRange.setEnd(position.offsetNode, position.offset);\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    } // Resolve a Slate range from the DOM range.\n\n\n    var range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      suppressThrow: false\n    });\n    return range;\n  },\n\n  /**\r\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\r\n   */\n  toSlatePoint: function toSlatePoint(editor, domPoint, options) {\n    var exactMatch = options.exactMatch,\n        suppressThrow = options.suppressThrow;\n\n    var _ref15 = exactMatch ? domPoint : normalizeDOMPoint(domPoint),\n        _ref16 = _slicedToArray(_ref15, 2),\n        nearestNode = _ref16[0],\n        nearestOffset = _ref16[1];\n\n    var parentNode = nearestNode.parentNode;\n    var textNode = null;\n    var offset = 0;\n\n    if (parentNode) {\n      var _domNode$textContent;\n\n      var editorEl = ReactEditor.toDOMNode(editor, editor);\n      var potentialVoidNode = parentNode.closest('[data-slate-void=\"true\"]'); // Need to ensure that the closest void node is actually a void node\n      // within this editor, and not a void node within some parent editor. This can happen\n      // if this editor is within a void node of another editor (\"nested editors\", like in\n      // the \"Editable Voids\" example on the docs site).\n\n      var voidNode = potentialVoidNode && editorEl.contains(potentialVoidNode) ? potentialVoidNode : null;\n      var leafNode = parentNode.closest('[data-slate-leaf]');\n      var domNode = null; // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n\n        if (textNode) {\n          var window = ReactEditor.getWindow(editor);\n          var range = window.document.createRange();\n          range.setStart(textNode, 0);\n          range.setEnd(nearestNode, nearestOffset);\n          var contents = range.cloneContents();\n          var removals = [].concat(_toConsumableArray(Array.prototype.slice.call(contents.querySelectorAll('[data-slate-zero-width]'))), _toConsumableArray(Array.prototype.slice.call(contents.querySelectorAll('[contenteditable=false]'))));\n          removals.forEach(function (el) {\n            el.parentNode.removeChild(el);\n          }); // COMPAT: Edge has a bug where Range.prototype.toString() will\n          // convert \\n into \\r\\n. The bug causes a loop when slate-react\n          // attempts to reposition its cursor to match the native position. Use\n          // textContent.length instead.\n          // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n\n          offset = contents.textContent.length;\n          domNode = textNode;\n        }\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]'); // COMPAT: In read-only editors the leaf is not rendered.\n\n        if (!leafNode) {\n          offset = 1;\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]');\n          domNode = leafNode;\n          offset = domNode.textContent.length;\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(function (el) {\n            offset -= el.textContent.length;\n          });\n        }\n      }\n\n      if (domNode && offset === domNode.textContent.length && (parentNode.hasAttribute('data-slate-zero-width') || IS_FIREFOX && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.endsWith('\\n\\n'))) {\n        offset--;\n      }\n    }\n\n    if (!textNode) {\n      if (suppressThrow) {\n        return null;\n      }\n\n      throw new Error(\"Cannot resolve a Slate point from DOM point: \".concat(domPoint));\n    } // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n\n\n    var slateNode = ReactEditor.toSlateNode(editor, textNode);\n    var path = ReactEditor.findPath(editor, slateNode);\n    return {\n      path: path,\n      offset: offset\n    };\n  },\n\n  /**\r\n   * Find a Slate range from a DOM range or selection.\r\n   */\n  toSlateRange: function toSlateRange(editor, domRange, options) {\n    var exactMatch = options.exactMatch,\n        suppressThrow = options.suppressThrow;\n    var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;\n    var anchorNode;\n    var anchorOffset;\n    var focusNode;\n    var focusOffset;\n    var isCollapsed;\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode;\n        anchorOffset = domRange.anchorOffset;\n        focusNode = domRange.focusNode;\n        focusOffset = domRange.focusOffset; // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;\n        } else {\n          isCollapsed = domRange.isCollapsed;\n        }\n      } else {\n        anchorNode = domRange.startContainer;\n        anchorOffset = domRange.startOffset;\n        focusNode = domRange.endContainer;\n        focusOffset = domRange.endOffset;\n        isCollapsed = domRange.collapsed;\n      }\n    }\n\n    if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {\n      throw new Error(\"Cannot resolve a Slate range from DOM range: \".concat(domRange));\n    }\n\n    var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset], {\n      exactMatch: exactMatch,\n      suppressThrow: suppressThrow\n    });\n\n    if (!anchor) {\n      return null;\n    }\n\n    var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {\n      exactMatch: exactMatch,\n      suppressThrow: suppressThrow\n    });\n\n    if (!focus) {\n      return null;\n    }\n\n    var range = {\n      anchor: anchor,\n      focus: focus\n    }; // if the selection is a hanging range that ends in a void\n    // and the DOM focus is an Element\n    // (meaning that the selection ends before the element)\n    // unhang the range to avoid mistakenly including the void\n\n    if (Range.isExpanded(range) && Range.isForward(range) && isDOMElement(focusNode) && Editor.void(editor, {\n      at: range.focus,\n      mode: 'highest'\n    })) {\n      range = Editor.unhangRange(editor, range, {\n        voids: true\n      });\n    }\n\n    return range;\n  },\n  hasRange: function hasRange(editor, range) {\n    var anchor = range.anchor,\n        focus = range.focus;\n    return Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path);\n  }\n};\n\nfunction gatherMutationData(editor, mutations) {\n  var addedNodes = [];\n  var removedNodes = [];\n  var insertedText = [];\n  var characterDataMutations = [];\n  mutations.forEach(function (mutation) {\n    switch (mutation.type) {\n      case 'childList':\n        {\n          if (mutation.addedNodes.length) {\n            mutation.addedNodes.forEach(function (addedNode) {\n              addedNodes.push(addedNode);\n            });\n          }\n\n          mutation.removedNodes.forEach(function (removedNode) {\n            removedNodes.push(removedNode);\n          });\n          break;\n        }\n\n      case 'characterData':\n        {\n          characterDataMutations.push(mutation); // Changes to text nodes should consider the parent element\n\n          var parentNode = mutation.target.parentNode;\n\n          if (!parentNode) {\n            return;\n          }\n\n          var textInsertion = getTextInsertion(editor, parentNode);\n\n          if (!textInsertion) {\n            return;\n          } // If we've already detected a diff at that path, we can return early\n\n\n          if (insertedText.some(function (_ref) {\n            var path = _ref.path;\n            return Path.equals(path, textInsertion.path);\n          })) {\n            return;\n          } // Add the text diff to the array of detected text insertions that need to be reconciled\n\n\n          insertedText.push(textInsertion);\n        }\n    }\n  });\n  return {\n    addedNodes: addedNodes,\n    removedNodes: removedNodes,\n    insertedText: insertedText,\n    characterDataMutations: characterDataMutations\n  };\n}\n/**\r\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\r\n *\r\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\r\n * `addedNodes`.\r\n *\r\n * To account for these edge cases, the most reliable strategy to detect line break mutations\r\n * is to check whether a new block was inserted of the same type as the current block.\r\n */\n\n\nvar isLineBreak = function isLineBreak(editor, _ref2) {\n  var addedNodes = _ref2.addedNodes;\n  var selection = editor.selection;\n  var parentNode = selection ? Node.parent(editor, selection.anchor.path) : null;\n  var parentDOMNode = parentNode ? ReactEditor.toDOMNode(editor, parentNode) : null;\n\n  if (!parentDOMNode) {\n    return false;\n  }\n\n  return addedNodes.some(function (addedNode) {\n    return addedNode instanceof HTMLElement && addedNode.tagName === (parentDOMNode === null || parentDOMNode === void 0 ? void 0 : parentDOMNode.tagName);\n  });\n};\n/**\r\n * So long as we check for line break mutations before deletion mutations,\r\n * we can safely assume that a set of mutations was a deletion if there are\r\n * removed nodes.\r\n */\n\n\nvar isDeletion = function isDeletion(_, _ref3) {\n  var removedNodes = _ref3.removedNodes;\n  return removedNodes.length > 0;\n};\n/**\r\n * If the selection was expanded and there are removed nodes,\r\n * the contents of the selection need to be replaced with the diff\r\n */\n\n\nvar isReplaceExpandedSelection = function isReplaceExpandedSelection(_ref4, _ref5) {\n  var selection = _ref4.selection;\n  var removedNodes = _ref5.removedNodes;\n  return selection ? Range.isExpanded(selection) && removedNodes.length > 0 : false;\n};\n/**\r\n * Plain text insertion\r\n */\n\n\nvar isTextInsertion = function isTextInsertion(_, _ref6) {\n  var insertedText = _ref6.insertedText;\n  return insertedText.length > 0;\n};\n/**\r\n * Edge case. Detect mutations that remove leaf nodes and also update character data\r\n */\n\n\nvar isRemoveLeafNodes = function isRemoveLeafNodes(_, _ref7) {\n  var addedNodes = _ref7.addedNodes,\n      characterDataMutations = _ref7.characterDataMutations,\n      removedNodes = _ref7.removedNodes;\n  return removedNodes.length > 0 && addedNodes.length === 0 && characterDataMutations.length > 0;\n};\n/**\r\n * Based loosely on:\r\n *\r\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\r\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\r\n *\r\n * The input manager attempts to map observed mutations on the document to a\r\n * set of operations in order to reconcile Slate's internal value with the DOM.\r\n *\r\n * Mutations are processed synchronously as they come in. Only mutations that occur\r\n * during a user input loop are processed, as other mutations can occur within the\r\n * document that were not initiated by user input.\r\n *\r\n * The mutation reconciliation process attempts to match mutations to the following\r\n * patterns:\r\n *\r\n * - Text updates\r\n * - Deletions\r\n * - Line breaks\r\n *\r\n * @param editor\r\n * @param restoreDOM\r\n */\n\n\nvar AndroidInputManager = /*#__PURE__*/_createClass(function AndroidInputManager(editor, restoreDOM) {\n  var _this = this;\n\n  _classCallCheck(this, AndroidInputManager);\n\n  this.editor = editor;\n  this.restoreDOM = restoreDOM;\n  /**\r\n   * Handle MutationObserver flush\r\n   *\r\n   * @param mutations\r\n   */\n\n  this.flush = function (mutations) {\n    try {\n      _this.reconcileMutations(mutations);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err); // Failed to reconcile mutations, restore DOM to its previous state\n\n      _this.restoreDOM();\n    }\n  };\n  /**\r\n   * Reconcile a batch of mutations\r\n   *\r\n   * @param mutations\r\n   */\n\n\n  this.reconcileMutations = function (mutations) {\n    var mutationData = gatherMutationData(_this.editor, mutations);\n    var insertedText = mutationData.insertedText,\n        removedNodes = mutationData.removedNodes;\n\n    if (isReplaceExpandedSelection(_this.editor, mutationData)) {\n      var text = combineInsertedText(insertedText);\n\n      _this.replaceExpandedSelection(text);\n    } else if (isLineBreak(_this.editor, mutationData)) {\n      _this.insertBreak();\n    } else if (isRemoveLeafNodes(_this.editor, mutationData)) {\n      _this.removeLeafNodes(removedNodes);\n    } else if (isDeletion(_this.editor, mutationData)) {\n      _this.deleteBackward();\n    } else if (isTextInsertion(_this.editor, mutationData)) {\n      _this.insertText(insertedText);\n    }\n  };\n  /**\r\n   * Apply text diff\r\n   */\n\n\n  this.insertText = function (insertedText) {\n    var selection = _this.editor.selection; // If it is in composing or after `onCompositionend`, set `EDITOR_ON_COMPOSITION_TEXT` and return.\n    // Text will be inserted on compositionend event.\n\n    if (IS_COMPOSING.get(_this.editor) || IS_ON_COMPOSITION_END.get(_this.editor)) {\n      EDITOR_ON_COMPOSITION_TEXT.set(_this.editor, insertedText);\n      IS_ON_COMPOSITION_END.set(_this.editor, false);\n      return;\n    } // Insert the batched text diffs\n\n\n    insertedText.forEach(function (insertion) {\n      var text = insertion.text.insertText;\n      var at = normalizeTextInsertionRange(_this.editor, selection, insertion);\n      Transforms.setSelection(_this.editor, at);\n      Editor.insertText(_this.editor, text);\n    });\n  };\n  /**\r\n   * Handle line breaks\r\n   */\n\n\n  this.insertBreak = function () {\n    var selection = _this.editor.selection;\n    Editor.insertBreak(_this.editor);\n\n    _this.restoreDOM();\n\n    if (selection) {\n      // Compat: Move selection to the newly inserted block if it has not moved\n      setTimeout(function () {\n        if (_this.editor.selection && Range.equals(selection, _this.editor.selection)) {\n          Transforms.move(_this.editor);\n        }\n      }, 100);\n    }\n  };\n  /**\r\n   * Handle expanded selection being deleted or replaced by text\r\n   */\n\n\n  this.replaceExpandedSelection = function (text) {\n    Editor.deleteFragment(_this.editor);\n\n    if (text.length) {\n      // Selection was replaced by text, insert the entire text diff\n      Editor.insertText(_this.editor, text);\n    }\n\n    _this.restoreDOM();\n  };\n  /**\r\n   * Handle `backspace` that merges blocks\r\n   */\n\n\n  this.deleteBackward = function () {\n    Editor.deleteBackward(_this.editor);\n    ReactEditor.focus(_this.editor);\n\n    _this.restoreDOM();\n  };\n  /**\r\n   * Handle mutations that remove specific leaves\r\n   */\n\n\n  this.removeLeafNodes = function (nodes) {\n    var _iterator2 = _createForOfIteratorHelper(nodes),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var node = _step2.value;\n        var slateNode = ReactEditor.toSlateNode(_this.editor, node);\n\n        if (slateNode) {\n          var path = ReactEditor.findPath(_this.editor, slateNode);\n          Transforms.delete(_this.editor, {\n            at: path\n          });\n\n          _this.restoreDOM();\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n\n  this.editor = editor;\n  this.restoreDOM = restoreDOM;\n});\n\nfunction useMutationObserver(node, callback, options) {\n  var _useState5 = useState(function () {\n    return new MutationObserver(callback);\n  }),\n      _useState6 = _slicedToArray(_useState5, 1),\n      mutationObserver = _useState6[0];\n\n  useIsomorphicLayoutEffect(function () {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect();\n  });\n  useEffect(function () {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    } // Attach mutation observer after render phase has finished\n\n\n    mutationObserver.observe(node.current, options); // Clean up after effect\n\n    return mutationObserver.disconnect.bind(mutationObserver);\n  });\n}\n\nvar MUTATION_OBSERVER_CONFIG$1 = {\n  childList: true,\n  characterData: true,\n  subtree: true\n};\n\nfunction findClosestKnowSlateNode(domNode) {\n  var _domEl;\n\n  var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n\n  if (domEl && !domEl.hasAttribute('data-slate-node')) {\n    domEl = domEl.closest(\"[data-slate-node]\");\n  }\n\n  var slateNode = domEl && ELEMENT_TO_NODE.get(domEl);\n\n  if (slateNode) {\n    return slateNode;\n  } // Unknown dom element with a slate-slate-node attribute => the IME\n  // most likely duplicated the node so we have to restore the parent\n\n\n  return (_domEl = domEl) !== null && _domEl !== void 0 && _domEl.parentElement ? findClosestKnowSlateNode(domEl.parentElement) : null;\n}\n\nfunction useRestoreDom(node, receivedUserInput) {\n  var editor = useSlateStatic();\n  var mutatedNodes = useRef(new Set());\n  var handleDOMMutation = useCallback(function (mutations) {\n    if (!receivedUserInput.current) {\n      return;\n    }\n\n    mutations.forEach(function (_ref) {\n      var target = _ref.target;\n      var slateNode = findClosestKnowSlateNode(target);\n\n      if (!slateNode) {\n        return;\n      }\n\n      return mutatedNodes.current.add(slateNode);\n    });\n  }, []);\n  useMutationObserver(node, handleDOMMutation, MUTATION_OBSERVER_CONFIG$1); // Clear mutated nodes on every render\n\n  mutatedNodes.current.clear();\n  var restore = useCallback(function () {\n    var mutated = Array.from(mutatedNodes.current.values()); // Filter out child nodes of nodes that will be restored anyway\n\n    var nodesToRestore = mutated.filter(function (n) {\n      return !mutated.some(function (m) {\n        return Path.isParent(ReactEditor.findPath(editor, m), ReactEditor.findPath(editor, n));\n      });\n    });\n    nodesToRestore.forEach(function (n) {\n      var _NODE_TO_RESTORE_DOM$;\n\n      (_NODE_TO_RESTORE_DOM$ = NODE_TO_RESTORE_DOM.get(n)) === null || _NODE_TO_RESTORE_DOM$ === void 0 ? void 0 : _NODE_TO_RESTORE_DOM$();\n    });\n    mutatedNodes.current.clear();\n  }, []);\n  return restore;\n}\n\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = useRef(false);\n  var animationFrameRef = useRef(null);\n  var onUserInput = useCallback(function () {\n    if (receivedUserInput.current === false) {\n      var window = ReactEditor.getWindow(editor);\n      receivedUserInput.current = true;\n\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current);\n      }\n\n      animationFrameRef.current = window.requestAnimationFrame(function () {\n        receivedUserInput.current = false;\n        animationFrameRef.current = null;\n      });\n    }\n  }, []);\n  useEffect(function () {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false;\n    }\n  });\n  return {\n    receivedUserInput: receivedUserInput,\n    onUserInput: onUserInput\n  };\n}\n\nvar MUTATION_OBSERVER_CONFIG = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true\n};\n\nfunction useAndroidInputManager(node) {\n  var editor = useSlateStatic();\n\n  var _useTrackUserInput = useTrackUserInput(),\n      receivedUserInput = _useTrackUserInput.receivedUserInput,\n      onUserInput = _useTrackUserInput.onUserInput;\n\n  var restoreDom = useRestoreDom(node, receivedUserInput);\n  var inputManager = useMemo(function () {\n    return new AndroidInputManager(editor, restoreDom);\n  }, [restoreDom, editor]);\n  var timeoutId = useRef(null);\n  var isReconciling = useRef(false);\n  var flush = useCallback(function (mutations) {\n    if (!receivedUserInput.current) {\n      return;\n    }\n\n    isReconciling.current = true;\n    inputManager.flush(mutations);\n\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current);\n    }\n\n    timeoutId.current = setTimeout(function () {\n      isReconciling.current = false;\n      timeoutId.current = null;\n    }, 250);\n  }, []);\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG);\n  return {\n    isReconciling: isReconciling,\n    onUserInput: onUserInput\n  };\n}\n\nvar _excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"style\", \"as\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\r\n * Editable.\r\n */\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\n\n\nvar RESOLVE_DELAY = 20;\n\nvar AndroidEditable = function AndroidEditable(props) {\n  var autoFocus = props.autoFocus,\n      _props$decorate2 = props.decorate,\n      decorate = _props$decorate2 === void 0 ? defaultDecorate : _props$decorate2,\n      propsOnDOMBeforeInput = props.onDOMBeforeInput,\n      placeholder = props.placeholder,\n      _props$readOnly2 = props.readOnly,\n      readOnly = _props$readOnly2 === void 0 ? false : _props$readOnly2,\n      renderElement = props.renderElement,\n      renderLeaf = props.renderLeaf,\n      _props$renderPlacehol2 = props.renderPlaceholder,\n      renderPlaceholder = _props$renderPlacehol2 === void 0 ? function (props) {\n    return /*#__PURE__*/React.createElement(DefaultPlaceholder, Object.assign({}, props));\n  } : _props$renderPlacehol2,\n      _props$style2 = props.style,\n      style = _props$style2 === void 0 ? {} : _props$style2,\n      _props$as2 = props.as,\n      Component = _props$as2 === void 0 ? 'div' : _props$as2,\n      attributes = _objectWithoutProperties(props, _excluded$1);\n\n  var editor = useSlate(); // Rerender editor when composition status changed\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isComposing = _useState8[0],\n      setIsComposing = _useState8[1];\n\n  var ref = useRef(null);\n  var inputManager = useAndroidInputManager(ref); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = useMemo(function () {\n    return {\n      isComposing: false,\n      isUpdatingSelection: false,\n      latestElement: null\n    };\n  }, []);\n  var contentKey = useContentKey(editor); // Whenever the editor updates...\n\n  useIsomorphicLayoutEffect(function () {\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n    }\n\n    try {\n      // Make sure the DOM selection state is in sync.\n      var selection = editor.selection;\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var domSelection = root.getSelection();\n\n      if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n        return;\n      }\n\n      var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n      if (!selection && !hasDomSelection) {\n        return;\n      } // verify that the dom selection is in the editor\n\n\n      var editorElement = EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n\n      if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n        hasDomSelectionInEditor = true;\n      } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          suppressThrow: true\n        });\n\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return;\n        }\n      } // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n\n\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: false\n        });\n        return;\n      } // Otherwise the DOM selection is out of sync, so update it.\n\n\n      var el = ReactEditor.toDOMNode(editor, editor);\n      state.isUpdatingSelection = true;\n      var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n\n      if (newDomRange) {\n        if (Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n\n        var leafEl = newDomRange.startContainer.parentElement;\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(newDomRange);\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el\n        }); // @ts-ignore\n\n        delete leafEl.getBoundingClientRect;\n      } else {\n        domSelection.removeAllRanges();\n      }\n\n      setTimeout(function () {\n        state.isUpdatingSelection = false;\n      });\n    } catch (_unused) {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false;\n    }\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(function () {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = useCallback(throttle(function () {\n    try {\n      if (!state.isComposing && !state.isUpdatingSelection && !inputManager.isReconciling.current) {\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var activeElement = root.activeElement;\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var domSelection = root.getSelection();\n\n        if (activeElement === el) {\n          state.latestElement = activeElement;\n          IS_FOCUSED.set(editor, true);\n        } else {\n          IS_FOCUSED.delete(editor);\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor);\n        }\n\n        var anchorNode = domSelection.anchorNode,\n            focusNode = domSelection.focusNode;\n        var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideNonReadonlyVoid(editor, anchorNode);\n        var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideNonReadonlyVoid(editor, focusNode);\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          var range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          Transforms.select(editor, range);\n        } else {\n          Transforms.deselect(editor);\n        }\n      }\n    } catch (_unused2) {// Failed to update selection, likely due to reconciliation error\n    }\n  }, 100), [readOnly]);\n  var scheduleOnDOMSelectionChange = useMemo(function () {\n    return debounce(onDOMSelectionChange, 0);\n  }, [onDOMSelectionChange]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = useCallback(function (event) {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n      scheduleOnDOMSelectionChange.flush();\n      inputManager.onUserInput();\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n\n  useIsomorphicLayoutEffect(function () {\n    var node = ref.current; // @ts-ignore The `beforeinput` event isn't recognized.\n\n    node === null || node === void 0 ? void 0 : node.addEventListener('beforeinput', onDOMBeforeInput); // @ts-ignore The `beforeinput` event isn't recognized.\n\n    return function () {\n      return node === null || node === void 0 ? void 0 : node.removeEventListener('beforeinput', onDOMBeforeInput);\n    };\n  }, [contentKey, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(function () {\n    var window = ReactEditor.getWindow(editor);\n    window.document.addEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    return function () {\n      window.document.removeEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    };\n  }, [scheduleOnDOMSelectionChange]);\n  var decorations = decorate([editor, []]);\n\n  if (placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '' && !isComposing) {\n    var _decorations$push2;\n\n    var start = Editor.start(editor, []);\n    decorations.push((_decorations$push2 = {}, _defineProperty2(_decorations$push2, PLACEHOLDER_SYMBOL, true), _defineProperty2(_decorations$push2, \"placeholder\", placeholder), _defineProperty2(_decorations$push2, \"anchor\", start), _defineProperty2(_decorations$push2, \"focus\", start), _decorations$push2));\n  }\n\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({\n    key: contentKey,\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    spellCheck: attributes.spellCheck,\n    autoCorrect: attributes.autoCorrect,\n    autoCapitalize: attributes.autoCapitalize,\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    contentEditable: readOnly ? undefined : true,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, style),\n    onCopy: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var selection = editor.selection;\n\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n\n            if (Editor.isVoid(editor, node)) {\n              Transforms.delete(editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onFocus: useCallback(function (event) {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onBlur: useCallback(function (event) {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n\n      var relatedTarget = event.relatedTarget;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, attributes.onBlur]),\n    onClick: useCallback(function (event) {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node); // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n\n        if (Editor.hasPath(editor, path)) {\n          var lookupNode = Node.get(editor, path);\n\n          if (lookupNode === node) {\n            var _start = Editor.start(editor, path);\n\n            var end = Editor.end(editor, path);\n            var startVoid = Editor.void(editor, {\n              at: _start\n            });\n            var endVoid = Editor.void(editor, {\n              at: end\n            });\n\n            if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {\n              var range = Editor.range(editor, _start);\n              Transforms.select(editor, range);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onClick]),\n    onCompositionEnd: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionEnd)) {\n        scheduleOnDOMSelectionChange.flush();\n        setTimeout(function () {\n          state.isComposing && setIsComposing(false);\n          state.isComposing = false;\n          IS_COMPOSING.set(editor, false);\n          IS_ON_COMPOSITION_END.set(editor, true);\n          var insertedText = EDITOR_ON_COMPOSITION_TEXT.get(editor) || []; // `insertedText` is set in `MutationObserver` constructor.\n          // If open phone keyboard association function, `CompositionEvent` will be triggered.\n\n          if (!insertedText.length) {\n            return;\n          }\n\n          EDITOR_ON_COMPOSITION_TEXT.set(editor, []);\n          var selection = editor.selection;\n          insertedText.forEach(function (insertion) {\n            var text = insertion.text.insertText;\n            var at = normalizeTextInsertionRange(editor, selection, insertion);\n            Transforms.setSelection(editor, at);\n            Editor.insertText(editor, text);\n          });\n        }, RESOLVE_DELAY);\n      }\n    }, [attributes.onCompositionEnd]),\n    onCompositionUpdate: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        !state.isComposing && setIsComposing(true);\n        state.isComposing = true;\n        IS_COMPOSING.set(editor, true);\n      }\n    }, [attributes.onCompositionUpdate]),\n    onCompositionStart: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionStart)) {\n        !state.isComposing && setIsComposing(true);\n        state.isComposing = true;\n        IS_COMPOSING.set(editor, true);\n      }\n    }, [attributes.onCompositionStart]),\n    onPaste: useCallback(function (event) {\n      // this will make application/x-slate-fragment exist when onPaste attributes is passed\n      event.clipboardData = getClipboardData(event.clipboardData); // This unfortunately needs to be handled with paste events instead.\n\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste) && !readOnly) {\n        event.preventDefault();\n        ReactEditor.insertData(editor, event.clipboardData);\n      }\n    }, [readOnly, attributes.onPaste])\n  }), useChildren({\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))));\n};\n/**\r\n * A React context for sharing the `focused` state of the editor.\r\n */\n\n\nvar FocusedContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `focused` state of the editor.\r\n */\n\nvar useFocused = function useFocused() {\n  return useContext(FocusedContext);\n};\n\nfunction isError(error) {\n  return error instanceof Error;\n}\n/**\r\n * A React context for sharing the editor selector context in a way to control rerenders\r\n */\n\n\nvar SlateSelectorContext = /*#__PURE__*/createContext({});\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\r\n * use redux style selectors to prevent rerendering on every keystroke.\r\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\r\n *\r\n * Example:\r\n * ```\r\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\r\n * ```\r\n */\n\n\nfunction useSlateSelector(selector) {\n  var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      forceRender = _useReducer2[1];\n\n  var context = useContext(SlateSelectorContext);\n\n  if (!context) {\n    throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n  }\n\n  var getSlate = context.getSlate,\n      addEventListener = context.addEventListener;\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef(function () {\n    return null;\n  });\n  var latestSelectedState = useRef(null);\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(getSlate());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(getSlate());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    var unsubscribe = addEventListener(checkForUpdates);\n    checkForUpdates();\n    return function () {\n      return unsubscribe();\n    };\n  }, // don't rerender on equalityFn change since we want to be able to define it inline\n  [addEventListener, getSlate]);\n  return selectedState;\n}\n/**\r\n * Create selector context with editor updating on every editor change\r\n */\n\n\nfunction getSelectorContext(editor) {\n  var eventListeners = useRef([]).current;\n  var slateRef = useRef({\n    editor: editor\n  }).current;\n  var onChange = useCallback(function (editor) {\n    slateRef.editor = editor;\n    eventListeners.forEach(function (listener) {\n      return listener(editor);\n    });\n  }, []);\n  var selectorContext = useMemo(function () {\n    return {\n      getSlate: function getSlate() {\n        return slateRef.editor;\n      },\n      addEventListener: function addEventListener(callback) {\n        eventListeners.push(callback);\n        return function () {\n          eventListeners.splice(eventListeners.indexOf(callback), 1);\n        };\n      }\n    };\n  }, [eventListeners, slateRef]);\n  return {\n    selectorContext: selectorContext,\n    onChange: onChange\n  };\n}\n\nvar _excluded = [\"editor\", \"children\", \"onChange\", \"value\"];\n/**\r\n * A wrapper around the provider to handle `onChange` events, because the editor\r\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\r\n */\n\nvar Slate = function Slate(props) {\n  var editor = props.editor,\n      children = props.children,\n      onChange = props.onChange,\n      value = props.value,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var unmountRef = useRef(false);\n\n  var _React$useState = React.useState(function () {\n    if (!Node.isNodeList(value)) {\n      throw new Error(\"[Slate] value is invalid! Expected a list of elements\" + \"but got: \".concat(JSON.stringify(value)));\n    }\n\n    if (!Editor.isEditor(editor)) {\n      throw new Error(\"[Slate] editor is invalid! you passed:\" + \"\".concat(JSON.stringify(editor)));\n    }\n\n    editor.children = value;\n    Object.assign(editor, rest);\n    return [editor];\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      context = _React$useState2[0],\n      setContext = _React$useState2[1];\n\n  var _getSelectorContext = getSelectorContext(editor),\n      selectorContext = _getSelectorContext.selectorContext,\n      handleSelectorChange = _getSelectorContext.onChange;\n\n  var onContextChange = useCallback(function () {\n    if (onChange) {\n      onChange(editor.children);\n    }\n\n    setContext([editor]);\n    handleSelectorChange(editor);\n  }, [onChange]);\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n  useEffect(function () {\n    return function () {\n      EDITOR_TO_ON_CHANGE.set(editor, function () {});\n      unmountRef.current = true;\n    };\n  }, []);\n\n  var _useState9 = useState(ReactEditor.isFocused(editor)),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isFocused = _useState10[0],\n      setIsFocused = _useState10[1];\n\n  useEffect(function () {\n    setIsFocused(ReactEditor.isFocused(editor));\n  });\n  useIsomorphicLayoutEffect(function () {\n    var fn = function fn() {\n      return setIsFocused(ReactEditor.isFocused(editor));\n    };\n\n    if (IS_REACT_VERSION_17_OR_ABOVE) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn);\n      document.addEventListener('focusout', fn);\n      return function () {\n        document.removeEventListener('focusin', fn);\n        document.removeEventListener('focusout', fn);\n      };\n    } else {\n      document.addEventListener('focus', fn, true);\n      document.addEventListener('blur', fn, true);\n      return function () {\n        document.removeEventListener('focus', fn, true);\n        document.removeEventListener('blur', fn, true);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(SlateSelectorContext.Provider, {\n    value: selectorContext\n  }, /*#__PURE__*/React.createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: editor\n  }, /*#__PURE__*/React.createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children))));\n};\n/**\r\n * Get the current editor object from the React context.\r\n * @deprecated Use useSlateStatic instead.\r\n */\n\n\nvar useEditor = function useEditor() {\n  var editor = useContext(EditorContext);\n\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return editor;\n};\n/**\r\n * Utilities for single-line deletion\r\n */\n\n\nvar doRectsIntersect = function doRectsIntersect(rect, compareRect) {\n  var middle = (compareRect.top + compareRect.bottom) / 2;\n  return rect.top <= middle && rect.bottom >= middle;\n};\n\nvar areRangesSameLine = function areRangesSameLine(editor, range1, range2) {\n  var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();\n  var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);\n};\n/**\r\n * A helper utility that returns the end portion of a `Range`\r\n * which is located on a single line.\r\n *\r\n * @param {Editor} editor The editor object to compare against\r\n * @param {Range} parentRange The parent range to compare against\r\n * @returns {Range} A valid portion of the parentRange which is one a single line\r\n */\n\n\nvar findCurrentLineRange = function findCurrentLineRange(editor, parentRange) {\n  var parentRangeBoundary = Editor.range(editor, Range.end(parentRange));\n  var positions = Array.from(Editor.positions(editor, {\n    at: parentRange\n  }));\n  var left = 0;\n  var right = positions.length;\n  var middle = Math.floor(right / 2);\n\n  if (areRangesSameLine(editor, Editor.range(editor, positions[left]), parentRangeBoundary)) {\n    return Editor.range(editor, positions[left], parentRangeBoundary);\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(editor, positions[positions.length - 1], parentRangeBoundary);\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (areRangesSameLine(editor, Editor.range(editor, positions[middle]), parentRangeBoundary)) {\n      right = middle;\n    } else {\n      left = middle;\n    }\n\n    middle = Math.floor((left + right) / 2);\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary);\n};\n/**\r\n * `withReact` adds React and DOM specific behaviors to the editor.\r\n *\r\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\r\n * this plugin.\r\n *\r\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\r\n */\n\n\nvar withReact = function withReact(editor) {\n  var e = editor;\n  var apply = e.apply,\n      onChange = e.onChange,\n      deleteBackward = e.deleteBackward; // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to\n  // avoid collisions between editors in the DOM that share the same value.\n\n  EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap());\n\n  e.deleteBackward = function (unit) {\n    if (unit !== 'line') {\n      return deleteBackward(unit);\n    }\n\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      var parentBlockEntry = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        },\n        at: editor.selection\n      });\n\n      if (parentBlockEntry) {\n        var _parentBlockEntry = _slicedToArray(parentBlockEntry, 2),\n            parentBlockPath = _parentBlockEntry[1];\n\n        var parentElementRange = Editor.range(editor, parentBlockPath, editor.selection.anchor);\n        var currentLineRange = findCurrentLineRange(e, parentElementRange);\n\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms.delete(editor, {\n            at: currentLineRange\n          });\n        }\n      }\n    }\n  }; // This attempts to reset the NODE_TO_KEY entry to the correct value\n  // as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry\n\n\n  e.apply = function (op) {\n    var matches = [];\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n      case 'split_node':\n        {\n          matches.push.apply(matches, _toConsumableArray(getMatches(e, op.path)));\n          break;\n        }\n\n      case 'set_selection':\n        {\n          var _EDITOR_TO_USER_SELEC; // Selection was manually set, don't restore the user selection after the change.\n\n\n          (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n          EDITOR_TO_USER_SELECTION.delete(editor);\n          break;\n        }\n\n      case 'insert_node':\n      case 'remove_node':\n        {\n          matches.push.apply(matches, _toConsumableArray(getMatches(e, Path.parent(op.path))));\n          break;\n        }\n\n      case 'merge_node':\n        {\n          var prevPath = Path.previous(op.path);\n          matches.push.apply(matches, _toConsumableArray(getMatches(e, prevPath)));\n          break;\n        }\n\n      case 'move_node':\n        {\n          var commonPath = Path.common(Path.parent(op.path), Path.parent(op.newPath));\n          matches.push.apply(matches, _toConsumableArray(getMatches(e, commonPath)));\n          break;\n        }\n    }\n\n    apply(op);\n\n    for (var _i3 = 0, _matches = matches; _i3 < _matches.length; _i3++) {\n      var _matches$_i = _slicedToArray(_matches[_i3], 2),\n          path = _matches$_i[0],\n          key = _matches$_i[1];\n\n      var _Editor$node3 = Editor.node(e, path),\n          _Editor$node4 = _slicedToArray(_Editor$node3, 1),\n          node = _Editor$node4[0];\n\n      NODE_TO_KEY.set(node, key);\n    }\n  };\n\n  e.setFragmentData = function (data) {\n    var selection = e.selection;\n\n    if (!selection) {\n      return;\n    }\n\n    var _Range$edges = Range.edges(selection),\n        _Range$edges2 = _slicedToArray(_Range$edges, 2),\n        start = _Range$edges2[0],\n        end = _Range$edges2[1];\n\n    var startVoid = Editor.void(e, {\n      at: start.path\n    });\n    var endVoid = Editor.void(e, {\n      at: end.path\n    });\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return;\n    } // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n\n\n    var domRange = ReactEditor.toDOMRange(e, selection);\n    var contents = domRange.cloneContents();\n    var attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.\n\n    contents.childNodes.forEach(function (node) {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node;\n      }\n    }); // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n\n    if (endVoid) {\n      var _endVoid = _slicedToArray(endVoid, 1),\n          voidNode = _endVoid[0];\n\n      var r = domRange.cloneRange();\n      var domNode = ReactEditor.toDOMNode(e, voidNode);\n      r.setEndAfter(domNode);\n      contents = r.cloneContents();\n    } // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n\n\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]');\n    } // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n\n\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(function (zw) {\n      var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';\n      zw.textContent = isNewline ? '\\n' : '';\n    }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n\n    if (isDOMText(attach)) {\n      var span = attach.ownerDocument.createElement('span'); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n\n      span.style.whiteSpace = 'pre';\n      span.appendChild(attach);\n      contents.appendChild(span);\n      attach = span;\n    }\n\n    var fragment = e.getFragment();\n    var string = JSON.stringify(fragment);\n    var encoded = window.btoa(encodeURIComponent(string));\n    attach.setAttribute('data-slate-fragment', encoded);\n    data.setData('application/x-slate-fragment', encoded); // Add the content to a <div> so that we can get its inner HTML.\n\n    var div = contents.ownerDocument.createElement('div');\n    div.appendChild(contents);\n    div.setAttribute('hidden', 'true');\n    contents.ownerDocument.body.appendChild(div);\n    data.setData('text/html', div.innerHTML);\n    data.setData('text/plain', getPlainText(div));\n    contents.ownerDocument.body.removeChild(div);\n    return data;\n  };\n\n  e.insertData = function (data) {\n    if (!e.insertFragmentData(data)) {\n      e.insertTextData(data);\n    }\n  };\n\n  e.insertFragmentData = function (data) {\n    /**\r\n     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment\r\n     */\n    var fragment = data.getData('application/x-slate-fragment') || getSlateFragmentAttribute(data);\n\n    if (fragment) {\n      var decoded = decodeURIComponent(window.atob(fragment));\n      var parsed = JSON.parse(decoded);\n      e.insertFragment(parsed);\n      return true;\n    }\n\n    return false;\n  };\n\n  e.insertTextData = function (data) {\n    var text = data.getData('text/plain');\n\n    if (text) {\n      var lines = text.split(/\\r\\n|\\r|\\n/);\n      var split = false;\n\n      var _iterator3 = _createForOfIteratorHelper(lines),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var line = _step3.value;\n\n          if (split) {\n            Transforms.splitNodes(e, {\n              always: true\n            });\n          }\n\n          e.insertText(line);\n          split = true;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  e.onChange = function () {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(function () {\n      var onContextChange = EDITOR_TO_ON_CHANGE.get(e);\n\n      if (onContextChange) {\n        onContextChange();\n      }\n\n      onChange();\n    });\n  };\n\n  return e;\n};\n\nvar getMatches = function getMatches(e, path) {\n  var matches = [];\n\n  var _iterator4 = _createForOfIteratorHelper(Editor.levels(e, {\n    at: path\n  })),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          n = _step4$value[0],\n          p = _step4$value[1];\n\n      var key = ReactEditor.findKey(e, n);\n      matches.push([p, key]);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return matches;\n}; // Components\n\n\nvar Editable = IS_ANDROID ? AndroidEditable : Editable$1;\nexport { AndroidEditable, Editable$1 as DefaultEditable, DefaultElement, DefaultLeaf, DefaultPlaceholder, Editable, ReactEditor, Slate, useEditor, useFocused, useReadOnly, useSelected, useSlate, useSlateSelector, useSlateStatic, withReact };","map":{"version":3,"sources":["../../../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../src/utils/environment.ts","../src/hooks/use-isomorphic-layout-effect.ts","../src/components/string.tsx","../src/utils/weak-maps.ts","../src/components/leaf.tsx","../src/utils/range-list.ts","../src/hooks/use-content-key.ts","../src/components/text.tsx","../src/components/element.tsx","../src/hooks/use-slate-static.tsx","../src/hooks/use-selected.ts","../src/hooks/use-children.tsx","../src/utils/hotkeys.ts","../src/hooks/use-read-only.ts","../src/hooks/use-slate.tsx","../src/hooks/use-decorate.ts","../src/utils/dom.ts","../src/utils/constants.ts","../src/components/editable.tsx","../src/components/android/diff-text.ts","../src/utils/key.ts","../src/plugin/react-editor.ts","../src/components/android/mutation-detection.ts","../src/components/android/android-input-manager.ts","../src/components/android/use-mutation-observer.ts","../src/components/android/use-restore-dom.tsx","../src/components/android/use-track-user-input.ts","../src/components/android/use-android-input-manager.ts","../src/components/android/android-editable.tsx","../src/hooks/use-focused.ts","../src/hooks/use-slate-selector.tsx","../src/components/slate.tsx","../src/hooks/use-editor.tsx","../src/utils/lines.ts","../src/plugin/with-react.ts","../src/index.ts"],"names":["objectWithoutPropertiesLoose","IS_REACT_VERSION_17_OR_ABOVE","parseInt","React","IS_IOS","navigator","window","IS_APPLE","IS_ANDROID","IS_FIREFOX","IS_SAFARI","IS_EDGE_LEGACY","IS_CHROME","IS_CHROME_LEGACY","IS_FIREFOX_LEGACY","IS_QQBROWSER","IS_UC_MOBILE","IS_WECHATBROWSER","CAN_USE_DOM","HAS_BEFORE_INPUT_SUPPORT","globalThis","useIsomorphicLayoutEffect","String","props","text","editor","useSlateStatic","path","ReactEditor","parentPath","Path","length","Node","leaf","parent","Editor","isLineBreak","isLast","isTrailing","TextString","ref","useRef","getTextContent","textWithTrailing","ZeroWidthString","NODE_TO_INDEX","NODE_TO_PARENT","EDITOR_TO_WINDOW","EDITOR_TO_ELEMENT","ELEMENT_TO_NODE","NODE_TO_ELEMENT","NODE_TO_KEY","EDITOR_TO_KEY_TO_ELEMENT","IS_READ_ONLY","IS_FOCUSED","IS_COMPOSING","IS_ON_COMPOSITION_END","EDITOR_TO_USER_SELECTION","EDITOR_ON_COMPOSITION_TEXT","EDITOR_TO_ON_CHANGE","NODE_TO_RESTORE_DOM","PLACEHOLDER_SYMBOL","Symbol","Leaf","renderLeaf","placeholderRef","useEffect","placeholderEl","editorEl","document","children","placeholderProps","attributes","style","position","pointerEvents","width","maxWidth","display","opacity","userSelect","textDecoration","contentEditable","renderPlaceholder","MemoizedLeaf","next","prev","Text","DefaultLeaf","shallowCompare","Object","key","obj2","obj1","isDecoratorRangeListEqual","list","another","i","range","other","rangeOwnProps","otherOwnProps","Range","useContentKey","node","contentKeyRef","updateAnimationFrameRef","useState","requestAnimationFrame","setForceRerenderCounter","state","cancelAnimationFrame","leaves","SlateText","KEY_TO_ELEMENT","contentKey","MemoizedText","Element","renderElement","p","selection","readOnly","useReadOnly","isInline","useChildren","decorations","dir","getDirection","Tag","height","color","outline","element","content","MemoizedElement","DefaultElement","EditorContext","createContext","useContext","SelectedContext","useSelected","isLeafBlock","n","sel","ds","intersection","acc","value","id","HOTKEYS","bold","compose","moveBackward","moveForward","moveWordBackward","moveWordForward","deleteBackward","deleteForward","extendBackward","extendForward","italic","insertSoftBreak","splitBlock","undo","APPLE_HOTKEYS","moveLineBackward","moveLineForward","deleteLineBackward","deleteLineForward","deleteWordBackward","deleteWordForward","extendLineBackward","extendLineForward","redo","transposeCharacter","WINDOWS_HOTKEYS","create","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","event","isBold","isCompose","isMoveBackward","isMoveForward","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","isExtendBackward","isExtendForward","isExtendLineBackward","isExtendLineForward","isItalic","isMoveLineBackward","isMoveLineForward","isMoveWordBackward","isMoveWordForward","isRedo","isSoftBreak","isSplitBlock","isTransposeCharacter","isUndo","ReadOnlyContext","SlateContext","useSlate","context","DecorateContext","getDefaultView","isDOMComment","isDOMNode","isDOMElement","isDOMSelection","isDOMText","isPlainTextOnlyPaste","normalizeDOMPoint","domPoint","offset","index","getEditableChildAndIndex","getEditableChild","hasShadowRoot","childNodes","child","triedForward","triedBackward","direction","getPlainText","domNode","childNode","Array","getComputedStyle","catchSlateFragment","getSlateFragmentAttribute","dataTransfer","htmlData","getClipboardData","fragment","clipboardData","type","TRIPLE_CLICK","Children","Editable","decorate","onDOMBeforeInput","scrollSelectionIntoView","as","Component","deferredOperations","useMemo","isComposing","hasInsertPrefixInCompositon","isDraggingInternally","isUpdatingSelection","latestElement","root","domSelection","hasDomSelection","editorElement","hasDomSelectionInEditor","slateRange","exactMatch","suppressThrow","newDomRange","setTimeout","el","onDOMSelectionChange","useCallback","throttle","activeElement","Transforms","focusNode","anchorNodeSelectable","hasEditableTarget","isTargetInsideNonReadonlyVoid","focusNodeSelectable","scheduleOnDOMSelectionChange","debounce","isDOMEventHandled","inputType","data","native","anchor","inline","at","match","mode","selectionRef","unit","setIsComposing","toRestore","placeholder","start","role","spellCheck","autoCorrect","autoCapitalize","zindex","suppressContentEditableWarning","whiteSpace","wordWrap","onBeforeInput","isEventHandled","onInput","op","onBlur","relatedTarget","onClick","hasTarget","end","lookupNode","startVoid","endVoid","onCompositionEnd","leafPath","currentTextNode","distance","reverse","onCompositionUpdate","onCompositionStart","marks","point","focus","select","onCopy","onCut","onDragOver","onDragStart","voidMatch","voids","onDrop","draggedRange","onDragEnd","onFocus","onKeyDown","nativeEvent","isRTL","Hotkeys","maybeHistoryEditor","edge","currentNode","onPaste","DefaultPlaceholder","defaultDecorate","defaultScrollSelectionIntoView","leafEl","domRange","scrollIntoView","scrollMode","editable","slateNode","shouldTreatEventAsHandled","handler","Math","prevLength","nextLength","prevChar","nextChar","getDiffStart","maxEnd","getDiffEnd","offsets","diffText","getDiffOffsets","insertText","sliceText","removeText","combineInsertedText","insertedText","getTextInsertion","prevText","nextText","textDiff","textPath","normalizeTextInsertionRange","insertionRange","isSingleCharacterInsertion","isText","characterBeforeAnchor","characterAfterAnchor","Key","constructor","getWindow","findKey","findPath","JSON","findDocumentOrShadowRoot","isFocused","isReadOnly","blur","preventScroll","deselect","hasDOMNode","options","targetEl","target","err","insertData","insertFragmentData","insertTextData","setFragmentData","toDOMNode","toDOMPoint","selector","texts","attr","trueLength","toDOMRange","isBackward","domAnchor","domFocus","startEl","startNode","isStartAtZeroWidth","endEl","endNode","isEndAtZeroWidth","toSlateNode","domEl","findEventRange","clientX","clientY","x","y","rect","isPrev","toSlatePoint","parentNode","nearestNode","textNode","potentialVoidNode","voidNode","leafNode","contents","removals","toSlateRange","anchorNode","anchorOffset","focusOffset","isCollapsed","hasRange","gatherMutationData","mutations","addedNodes","removedNodes","characterDataMutations","mutation","addedNode","removedNode","textInsertion","parentDOMNode","isDeletion","isReplaceExpandedSelection","isTextInsertion","isRemoveLeafNodes","AndroidInputManager","console","mutationData","insertion","nodes","useMutationObserver","callback","mutationObserver","MUTATION_OBSERVER_CONFIG","childList","characterData","subtree","findClosestKnowSlateNode","useRestoreDom","receivedUserInput","mutatedNodes","handleDOMMutation","restore","mutated","nodesToRestore","m","useTrackUserInput","animationFrameRef","onUserInput","characterDataOldValue","useAndroidInputManager","restoreDom","inputManager","timeoutId","isReconciling","flush","clearTimeout","RESOLVE_DELAY","AndroidEditable","boundary","FocusedContext","useFocused","error","SlateSelectorContext","refEquality","a","useSlateSelector","equalityFn","useReducer","s","addEventListener","latestSubscriptionCallbackError","latestSelector","latestSelectedState","selectedState","getSlate","isError","newSelectedState","forceRender","unsubscribe","checkForUpdates","getSelectorContext","eventListeners","slateRef","onChange","listener","selectorContext","Slate","unmountRef","handleSelectorChange","onContextChange","setContext","setIsFocused","fn","useEditor","doRectsIntersect","middle","compareRect","areRangesSameLine","rect1","rect2","findCurrentLineRange","parentRangeBoundary","positions","parentRange","left","right","withReact","e","parentBlockEntry","parentElementRange","currentLineRange","matches","getMatches","prevPath","commonPath","apply","attach","r","zw","isNewline","span","string","encoded","encodeURIComponent","div","decoded","decodeURIComponent","parsed","lines","split","always","ReactDOM","DefaultEditable"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import React from 'react'\n\nexport const IS_REACT_VERSION_17_OR_ABOVE =\n  parseInt(React.version.split('.')[0], 10) >= 17\n\nexport const IS_IOS =\n  typeof navigator !== 'undefined' &&\n  typeof window !== 'undefined' &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !window.MSStream\n\nexport const IS_APPLE =\n  typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\nexport const IS_ANDROID =\n  typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent)\n\nexport const IS_FIREFOX =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)\n\nexport const IS_SAFARI =\n  typeof navigator !== 'undefined' &&\n  /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\n// \"modern\" Edge was released at 79.x\nexport const IS_EDGE_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])(\\.)/i.test(navigator.userAgent)\n\nexport const IS_CHROME =\n  typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent)\n\n// Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\nexport const IS_CHROME_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])(\\.)/i.test(navigator.userAgent)\n\n// Firefox did not support `beforeInput` until `v87`.\nexport const IS_FIREFOX_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(\n    navigator.userAgent\n  )\n\n// qq browser\nexport const IS_QQBROWSER =\n  typeof navigator !== 'undefined' && /.*QQBrowser/.test(navigator.userAgent)\n\n// UC mobile browser\nexport const IS_UC_MOBILE =\n  typeof navigator !== 'undefined' && /.*UCBrowser/.test(navigator.userAgent)\n\n// Wechat browser\nexport const IS_WECHATBROWSER =\n  typeof navigator !== 'undefined' && /.*Wechat/.test(navigator.userAgent)\n\n// Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const CAN_USE_DOM = !!(\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n)\n\n// COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\nexport const HAS_BEFORE_INPUT_SUPPORT =\n  !IS_CHROME_LEGACY &&\n  !IS_EDGE_LEGACY &&\n  // globalThis is undefined in older browsers\n  typeof globalThis !== 'undefined' &&\n  globalThis.InputEvent &&\n  // @ts-ignore The `getTargetRanges` property isn't recognized.\n  typeof globalThis.InputEvent.prototype.getTargetRanges === 'function'\n","import { useLayoutEffect, useEffect } from 'react'\nimport { CAN_USE_DOM } from '../utils/environment'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\n\nexport const useIsomorphicLayoutEffect = CAN_USE_DOM\n  ? useLayoutEffect\n  : useEffect\n","import React, { useRef } from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useSlateStatic } from '..'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n\n  const ref = useRef<HTMLSpanElement>(null)\n\n  const getTextContent = () => {\n    return `${text ?? ''}${isTrailing ? '\\n' : ''}`\n  }\n\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(() => {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    const textWithTrailing = getTextContent()\n\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing\n    }\n\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  })\n\n  // Render text content immediately if it's the first-time render\n  // Ensure that text content is rendered on server-side rendering\n  if (!ref.current) {\n    return (\n      <span data-slate-string ref={ref}>\n        {getTextContent()}\n      </span>\n    )\n  }\n\n  // the span is intentionally same on every render in virtual DOM, actual rendering happens in the layout effect above\n  return <span data-slate-string ref={ref} />\n}\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nconst ZeroWidthString = (props: { length?: number; isLineBreak?: boolean }) => {\n  const { length = 0, isLineBreak = false } = props\n  return (\n    <span\n      data-slate-zero-width={isLineBreak ? 'n' : 'z'}\n      data-slate-length={length}\n    >\n      {'\\uFEFF'}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import { Ancestor, Editor, Node, RangeRef } from 'slate'\nimport { Key } from './key'\nimport { TextInsertion } from '../components/android/diff-text'\n\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */\n\nexport const NODE_TO_INDEX: WeakMap<Node, number> = new WeakMap()\nexport const NODE_TO_PARENT: WeakMap<Node, Ancestor> = new WeakMap()\n\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */\nexport const EDITOR_TO_WINDOW: WeakMap<Editor, Window> = new WeakMap()\nexport const EDITOR_TO_ELEMENT: WeakMap<Editor, HTMLElement> = new WeakMap()\nexport const EDITOR_TO_PLACEHOLDER: WeakMap<Editor, string> = new WeakMap()\nexport const ELEMENT_TO_NODE: WeakMap<HTMLElement, Node> = new WeakMap()\nexport const NODE_TO_ELEMENT: WeakMap<Node, HTMLElement> = new WeakMap()\nexport const NODE_TO_KEY: WeakMap<Node, Key> = new WeakMap()\nexport const EDITOR_TO_KEY_TO_ELEMENT: WeakMap<\n  Editor,\n  WeakMap<Key, HTMLElement>\n> = new WeakMap()\n\n/**\n * Weak maps for storing editor-related state.\n */\n\nexport const IS_READ_ONLY: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_FOCUSED: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_CLICKING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_COMPOSING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_ON_COMPOSITION_END: WeakMap<Editor, boolean> = new WeakMap()\n\nexport const EDITOR_TO_USER_SELECTION: WeakMap<Editor, RangeRef> = new WeakMap()\n\n/**\n * Weak maps for saving text on composition stage.\n */\n\nexport const EDITOR_ON_COMPOSITION_TEXT: WeakMap<\n  Editor,\n  TextInsertion[]\n> = new WeakMap()\n\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */\n\nexport const EDITOR_TO_ON_CHANGE = new WeakMap<Editor, () => void>()\n\nexport const NODE_TO_RESTORE_DOM = new WeakMap<Node, () => void>()\n\n/**\n * Symbols.\n */\n\nexport const PLACEHOLDER_SYMBOL = (Symbol('placeholder') as unknown) as string\n","import React, { useRef, useEffect } from 'react'\nimport { Element, Text } from 'slate'\nimport String from './string'\nimport { PLACEHOLDER_SYMBOL } from '../utils/weak-maps'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\n\n/**\n * Individual leaves in a text node with unique formatting.\n */\n\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  const placeholderRef = useRef<HTMLSpanElement | null>(null)\n\n  useEffect(() => {\n    const placeholderEl = placeholderRef?.current\n    const editorEl = document.querySelector<HTMLDivElement>(\n      '[data-slate-editor=\"true\"]'\n    )\n\n    if (!placeholderEl || !editorEl) {\n      return\n    }\n\n    editorEl.style.minHeight = `${placeholderEl.clientHeight}px`\n\n    return () => {\n      editorEl.style.minHeight = 'auto'\n    }\n  }, [placeholderRef, leaf])\n\n  let children = (\n    <String isLast={isLast} leaf={leaf} parent={parent} text={text} />\n  )\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    const placeholderProps: RenderPlaceholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n        },\n        contentEditable: false,\n        ref: placeholderRef,\n      },\n    }\n\n    children = (\n      <React.Fragment>\n        {renderPlaceholder(placeholderProps)}\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.renderPlaceholder === prev.renderPlaceholder &&\n    next.text === prev.text &&\n    Text.equals(next.leaf, prev.leaf) &&\n    next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL]\n  )\n})\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","import { Range } from 'slate'\nimport { PLACEHOLDER_SYMBOL } from './weak-maps'\n\nexport const shallowCompare = (obj1: {}, obj2: {}) =>\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every(\n    key => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]\n  )\n\n/**\n * Check if a list of decorator ranges are equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */\n\nexport const isDecoratorRangeListEqual = (\n  list: Range[],\n  another: Range[]\n): boolean => {\n  if (list.length !== another.length) {\n    return false\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i]\n    const other = another[i]\n\n    const { anchor: rangeAnchor, focus: rangeFocus, ...rangeOwnProps } = range\n    const { anchor: otherAnchor, focus: otherFocus, ...otherOwnProps } = other\n\n    if (\n      !Range.equals(range, other) ||\n      range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] ||\n      !shallowCompare(rangeOwnProps, otherOwnProps)\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { Node as SlateNode } from 'slate'\nimport { NODE_TO_RESTORE_DOM } from '../utils/weak-maps'\n\nexport function useContentKey(node: SlateNode) {\n  const contentKeyRef = useRef<number>(0)\n  const updateAnimationFrameRef = useRef<number | null>(null)\n\n  const [, setForceRerenderCounter] = useState(0)\n\n  useEffect(() => {\n    NODE_TO_RESTORE_DOM.set(node, () => {\n      // Update is already queued and node hasn't re-render yet\n      if (updateAnimationFrameRef.current) {\n        return\n      }\n\n      updateAnimationFrameRef.current = requestAnimationFrame(() => {\n        setForceRerenderCounter(state => state + 1)\n        updateAnimationFrameRef.current = null\n      })\n\n      contentKeyRef.current++\n    })\n\n    return () => {\n      NODE_TO_RESTORE_DOM.delete(node)\n    }\n  }, [node])\n\n  // Node was restored => clear scheduled update\n  if (updateAnimationFrameRef.current) {\n    cancelAnimationFrame(updateAnimationFrameRef.current)\n    updateAnimationFrameRef.current = null\n  }\n\n  return contentKeyRef.current\n}\n","import React, { useRef } from 'react'\nimport { Range, Element, Text as SlateText } from 'slate'\n\nimport Leaf from './leaf'\nimport { ReactEditor, useSlateStatic } from '..'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\nimport { useContentKey } from '../hooks/use-content-key'\nimport { IS_ANDROID } from '../utils/environment'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: Range[]\n  isLast: boolean\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text,\n  } = props\n  const editor = useSlateStatic()\n  const ref = useRef<HTMLSpanElement>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        renderPlaceholder={renderPlaceholder}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    if (ref.current) {\n      KEY_TO_ELEMENT?.set(key, ref.current)\n      NODE_TO_ELEMENT.set(text, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, text)\n    } else {\n      KEY_TO_ELEMENT?.delete(key)\n      NODE_TO_ELEMENT.delete(text)\n    }\n  })\n\n  const contentKey = IS_ANDROID ? useContentKey(text) : undefined\n\n  return (\n    <span data-slate-node=\"text\" ref={ref} key={contentKey}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text &&\n    isDecoratorRangeListEqual(next.decorations, prev.decorations)\n  )\n})\n\nexport default MemoizedText\n","import React, { Fragment, useRef } from 'react'\nimport getDirection from 'direction'\nimport { Editor, Node, Range, Element as SlateElement } from 'slate'\n\nimport Text from './text'\nimport useChildren from '../hooks/use-children'\nimport { ReactEditor, useSlateStatic, useReadOnly } from '..'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_PARENT,\n  NODE_TO_INDEX,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from './editable'\nimport { useContentKey } from '../hooks/use-content-key'\nimport { IS_ANDROID } from '../utils/environment'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorations: Range[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const ref = useRef<HTMLElement>(null)\n  const editor = useSlateStatic()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n  let children: React.ReactNode = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  })\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text\n          renderPlaceholder={renderPlaceholder}\n          decorations={[]}\n          isLast={false}\n          parent={element}\n          text={text}\n        />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    if (ref.current) {\n      KEY_TO_ELEMENT?.set(key, ref.current)\n      NODE_TO_ELEMENT.set(element, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, element)\n    } else {\n      KEY_TO_ELEMENT?.delete(key)\n      NODE_TO_ELEMENT.delete(element)\n    }\n  })\n\n  const content = renderElement({ attributes, children, element })\n\n  if (IS_ANDROID) {\n    const contentKey = useContentKey(element)\n    return <Fragment key={contentKey}>{content}</Fragment>\n  }\n\n  return content\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    isDecoratorRangeListEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useSlateStatic()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default MemoizedElement\n","import { createContext, useContext } from 'react'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { Editor } from 'slate'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlateStatic = (): Editor => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useSlateStatic\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import React from 'react'\nimport { Editor, Range, Element, Ancestor, Descendant } from 'slate'\n\nimport ElementComponent from '../components/element'\nimport TextComponent from '../components/text'\nimport { ReactEditor } from '..'\nimport { useSlateStatic } from './use-slate-static'\nimport { NODE_TO_INDEX, NODE_TO_PARENT } from '../utils/weak-maps'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from '../components/editable'\nimport { SelectedContext } from './use-selected'\n\n/**\n * Children.\n */\n\nconst useChildren = (props: {\n  decorations: Range[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n\n    const ds = decorations.reduce<Range[]>((acc, dec) => {\n      const intersection = Range.intersection(dec, range)\n      if (intersection) acc.push(intersection)\n      return acc\n    }, [])\n\n    if (Element.isElement(n)) {\n      children.push(\n        <SelectedContext.Provider key={`provider-${key.id}`} value={!!sel}>\n          <ElementComponent\n            decorations={ds}\n            element={n}\n            key={key.id}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={sel}\n          />\n        </SelectedContext.Provider>\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return children\n}\n\nexport default useChildren\n","import { isKeyHotkey } from 'is-hotkey'\nimport { IS_APPLE } from './environment'\n\n/**\n * Hotkey mappings for each platform.\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  insertSoftBreak: 'shift+enter',\n  splitBlock: 'enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n}\n\n/**\n * Create a platform-aware hotkey checker.\n */\n\nconst create = (key: string) => {\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  return (event: KeyboardEvent) => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (!IS_APPLE && isWindows && isWindows(event)) return true\n    return false\n  }\n}\n\n/**\n * Hotkeys.\n */\n\nexport default {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSoftBreak: create('insertSoftBreak'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo'),\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\nimport { Editor } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport const SlateContext = createContext<[ReactEditor] | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = (): Editor => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  const [editor] = context\n  return editor\n}\n","import { createContext, useContext } from 'react'\nimport { Range, NodeEntry } from 'slate'\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\n\nexport const DecorateContext = createContext<(entry: NodeEntry) => Range[]>(\n  () => []\n)\n\n/**\n * Get the current `decorate` prop of the editable.\n */\n\nexport const useDecorate = (): ((entry: NodeEntry) => Range[]) => {\n  return useContext(DecorateContext)\n}\n","/**\n * Types.\n */\n\n// COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nimport DOMNode = globalThis.Node\nimport DOMComment = globalThis.Comment\nimport DOMElement = globalThis.Element\nimport DOMText = globalThis.Text\nimport DOMRange = globalThis.Range\nimport DOMSelection = globalThis.Selection\nimport DOMStaticRange = globalThis.StaticRange\n\nexport {\n  DOMNode,\n  DOMComment,\n  DOMElement,\n  DOMText,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n}\n\ndeclare global {\n  interface Window {\n    Selection: typeof Selection['constructor']\n    DataTransfer: typeof DataTransfer['constructor']\n    Node: typeof Node['constructor']\n  }\n}\n\nexport type DOMPoint = [Node, number]\n\n/**\n * Returns the host window of a DOM node\n */\n\nexport const getDefaultView = (value: any): Window | null => {\n  return (\n    (value && value.ownerDocument && value.ownerDocument.defaultView) || null\n  )\n}\n\n/**\n * Check if a DOM node is a comment node.\n */\n\nexport const isDOMComment = (value: any): value is DOMComment => {\n  return isDOMNode(value) && value.nodeType === 8\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMElement = (value: any): value is DOMElement => {\n  return isDOMNode(value) && value.nodeType === 1\n}\n\n/**\n * Check if a value is a DOM node.\n */\n\nexport const isDOMNode = (value: any): value is DOMNode => {\n  const window = getDefaultView(value)\n  return !!window && value instanceof window.Node\n}\n\n/**\n * Check if a value is a DOM selection.\n */\n\nexport const isDOMSelection = (value: any): value is DOMSelection => {\n  const window = value && value.anchorNode && getDefaultView(value.anchorNode)\n  return !!window && value instanceof window.Selection\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMText = (value: any): value is DOMText => {\n  return isDOMNode(value) && value.nodeType === 3\n}\n\n/**\n * Checks whether a paste event is a plaintext-only event.\n */\n\nexport const isPlainTextOnlyPaste = (event: ClipboardEvent) => {\n  return (\n    event.clipboardData &&\n    event.clipboardData.getData('text/plain') !== '' &&\n    event.clipboardData.types.length === 1\n  )\n}\n\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */\n\nexport const normalizeDOMPoint = (domPoint: DOMPoint): DOMPoint => {\n  let [node, offset] = domPoint\n\n  // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n  if (isDOMElement(node) && node.childNodes.length) {\n    let isLast = offset === node.childNodes.length\n    let index = isLast ? offset - 1 : offset\n    ;[node, index] = getEditableChildAndIndex(\n      node,\n      index,\n      isLast ? 'backward' : 'forward'\n    )\n    // If the editable child found is in front of input offset, we instead seek to its end\n    isLast = index < offset\n\n    // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n    while (isDOMElement(node) && node.childNodes.length) {\n      const i = isLast ? node.childNodes.length - 1 : 0\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward')\n    }\n\n    // Determine the new offset inside the text node.\n    offset = isLast && node.textContent != null ? node.textContent.length : 0\n  }\n\n  // Return the node and offset.\n  return [node, offset]\n}\n\n/**\n * Determines wether the active element is nested within a shadowRoot\n */\n\nexport const hasShadowRoot = () => {\n  return !!(\n    window.document.activeElement && window.document.activeElement.shadowRoot\n  )\n}\n\n/**\n * Get the nearest editable child and index at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChildAndIndex = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): [DOMNode, number] => {\n  const { childNodes } = parent\n  let child = childNodes[index]\n  let i = index\n  let triedForward = false\n  let triedBackward = false\n\n  // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n  while (\n    isDOMComment(child) ||\n    (isDOMElement(child) && child.childNodes.length === 0) ||\n    (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')\n  ) {\n    if (triedForward && triedBackward) {\n      break\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true\n      i = index - 1\n      direction = 'backward'\n      continue\n    }\n\n    if (i < 0) {\n      triedBackward = true\n      i = index + 1\n      direction = 'forward'\n      continue\n    }\n\n    child = childNodes[i]\n    index = i\n    i += direction === 'forward' ? 1 : -1\n  }\n\n  return [child, index]\n}\n\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChild = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): DOMNode => {\n  const [child] = getEditableChildAndIndex(parent, index, direction)\n  return child\n}\n\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n *\n * The domNode must be attached to the DOM.\n */\n\nexport const getPlainText = (domNode: DOMNode) => {\n  let text = ''\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode)\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display')\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n'\n    }\n  }\n\n  return text\n}\n\n/**\n * Get x-slate-fragment attribute from data-slate-fragment\n */\nconst catchSlateFragment = /data-slate-fragment=\"(.+?)\"/m\nexport const getSlateFragmentAttribute = (\n  dataTransfer: DataTransfer\n): string | void => {\n  const htmlData = dataTransfer.getData('text/html')\n  const [, fragment] = htmlData.match(catchSlateFragment) || []\n  return fragment\n}\n\n/**\n * Get the x-slate-fragment attribute that exist in text/html data\n * and append it to the DataTransfer object\n */\nexport const getClipboardData = (dataTransfer: DataTransfer): DataTransfer => {\n  if (!dataTransfer.getData('application/x-slate-fragment')) {\n    const fragment = getSlateFragmentAttribute(dataTransfer)\n    if (fragment) {\n      const clipboardData = new DataTransfer()\n      dataTransfer.types.forEach(type => {\n        clipboardData.setData(type, dataTransfer.getData(type))\n      })\n      clipboardData.setData('application/x-slate-fragment', fragment)\n      return clipboardData\n    }\n  }\n  return dataTransfer\n}\n","export const TRIPLE_CLICK = 3\n","import React, { useEffect, useRef, useMemo, useCallback, useState } from 'react'\nimport {\n  Editor,\n  Element,\n  NodeEntry,\n  Node,\n  Range,\n  Text,\n  Transforms,\n  Path,\n  RangeRef,\n} from 'slate'\nimport getDirection from 'direction'\nimport debounce from 'lodash/debounce'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport useChildren from '../hooks/use-children'\nimport Hotkeys from '../utils/hotkeys'\nimport {\n  HAS_BEFORE_INPUT_SUPPORT,\n  IS_IOS,\n  IS_CHROME,\n  IS_FIREFOX,\n  IS_FIREFOX_LEGACY,\n  IS_QQBROWSER,\n  IS_SAFARI,\n  IS_UC_MOBILE,\n  IS_WECHATBROWSER,\n  CAN_USE_DOM,\n} from '../utils/environment'\nimport { ReactEditor } from '..'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../hooks/use-decorate'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMRange,\n  getDefaultView,\n  isDOMElement,\n  isDOMNode,\n  isPlainTextOnlyPaste,\n} from '../utils/dom'\n\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  IS_FOCUSED,\n  PLACEHOLDER_SYMBOL,\n  EDITOR_TO_WINDOW,\n  EDITOR_TO_USER_SELECTION,\n} from '../utils/weak-maps'\nimport { TRIPLE_CLICK } from '../utils/constants'\n\ntype DeferredOperation = () => void\n\nconst Children = (props: Parameters<typeof useChildren>[0]) => (\n  <React.Fragment>{useChildren(props)}</React.Fragment>\n)\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => Range[]\n  onDOMBeforeInput?: (event: InputEvent) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  renderPlaceholder?: (props: RenderPlaceholderProps) => JSX.Element\n  scrollSelectionIntoView?: (editor: ReactEditor, domRange: DOMRange) => void\n  as?: React.ElementType\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = (props: EditableProps) => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    scrollSelectionIntoView = defaultScrollSelectionIntoView,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  // Rerender editor when composition status changed\n  const [isComposing, setIsComposing] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n  const deferredOperations = useRef<DeferredOperation[]>([])\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      hasInsertPrefixInCompositon: false,\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n\n    // Make sure the DOM selection state is in sync.\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'\n\n    // If the DOM selection is properly unset, we're done.\n    if (!selection && !hasDomSelection) {\n      return\n    }\n\n    // verify that the dom selection is in the editor\n    const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n    let hasDomSelectionInEditor = false\n    if (\n      editorElement.contains(domSelection.anchorNode) &&\n      editorElement.contains(domSelection.focusNode)\n    ) {\n      hasDomSelectionInEditor = true\n    }\n\n    // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true,\n\n        // domSelection is not necessarily a valid Slate range\n        // (e.g. when clicking on contentEditable:false element)\n        suppressThrow: true,\n      })\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return\n      }\n    }\n\n    // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: false,\n      })\n      return\n    }\n\n    // Otherwise the DOM selection is out of sync, so update it.\n    state.isUpdatingSelection = true\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n    if (newDomRange) {\n      if (Range.isBackward(selection!)) {\n        domSelection.setBaseAndExtent(\n          newDomRange.endContainer,\n          newDomRange.endOffset,\n          newDomRange.startContainer,\n          newDomRange.startOffset\n        )\n      } else {\n        domSelection.setBaseAndExtent(\n          newDomRange.startContainer,\n          newDomRange.startOffset,\n          newDomRange.endContainer,\n          newDomRange.endOffset\n        )\n      }\n      scrollSelectionIntoView(editor, newDomRange)\n    } else {\n      domSelection.removeAllRanges()\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        const el = ReactEditor.toDOMNode(editor, editor)\n        el.focus()\n      }\n\n      state.isUpdatingSelection = false\n    })\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      if (\n        !state.isComposing &&\n        !state.isUpdatingSelection &&\n        !state.isDraggingInternally\n      ) {\n        const root = ReactEditor.findDocumentOrShadowRoot(editor)\n        const { activeElement } = root\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const domSelection = root.getSelection()\n\n        if (activeElement === el) {\n          state.latestElement = activeElement\n          IS_FOCUSED.set(editor, true)\n        } else {\n          IS_FOCUSED.delete(editor)\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor)\n        }\n\n        const { anchorNode, focusNode } = domSelection\n\n        const anchorNodeSelectable =\n          hasEditableTarget(editor, anchorNode) ||\n          isTargetInsideNonReadonlyVoid(editor, anchorNode)\n\n        const focusNodeSelectable =\n          hasEditableTarget(editor, focusNode) ||\n          isTargetInsideNonReadonlyVoid(editor, focusNode)\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          const range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: false,\n          })\n          Transforms.select(editor, range)\n        }\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  const scheduleOnDOMSelectionChange = useMemo(\n    () => debounce(onDOMSelectionChange, 0),\n    [onDOMSelectionChange]\n  )\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n        // triggering a `beforeinput` expecting the change to be applied to the immediately before\n        // set selection.\n        scheduleOnDOMSelectionChange.flush()\n        onDOMSelectionChange.flush()\n\n        const { selection } = editor\n        const { inputType: type } = event\n        const data = (event as any).dataTransfer || event.data || undefined\n\n        // These two types occur while a user is composing text and can't be\n        // cancelled. Let them through and wait for the composition to end.\n        if (\n          type === 'insertCompositionText' ||\n          type === 'deleteCompositionText'\n        ) {\n          return\n        }\n\n        let native = false\n        if (\n          type === 'insertText' &&\n          selection &&\n          Range.isCollapsed(selection) &&\n          // Only use native character insertion for single characters a-z or space for now.\n          // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n          // causes duplicate inserts.\n          event.data &&\n          event.data.length === 1 &&\n          /[a-z ]/i.test(event.data) &&\n          // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n          // When there is an inline element, e.g. a link, and you select\n          // right after it (the start of the next node).\n          selection.anchor.offset !== 0\n        ) {\n          native = true\n\n          // Skip native if there are marks, as\n          // `insertText` will insert a node, not just text.\n          if (editor.marks) {\n            native = false\n          }\n\n          // Chrome also has issues correctly editing the end of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of nodes.\n          const { anchor } = selection\n          const inline = Editor.above(editor, {\n            at: anchor,\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              native = false\n            }\n          }\n        }\n\n        if (!native) {\n          event.preventDefault()\n        }\n\n        // COMPAT: For the deleting forward/backward input types we don't want\n        // to change the selection because it is the range that will be deleted,\n        // and those commands determine that for themselves.\n        if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n          const [targetRange] = (event as any).getTargetRanges()\n\n          if (targetRange) {\n            const range = ReactEditor.toSlateRange(editor, targetRange, {\n              exactMatch: false,\n              suppressThrow: false,\n            })\n\n            if (!selection || !Range.equals(selection, range)) {\n              const selectionRef =\n                editor.selection && Editor.rangeRef(editor, editor.selection)\n\n              Transforms.select(editor, range)\n\n              if (selectionRef) {\n                EDITOR_TO_USER_SELECTION.set(editor, selectionRef)\n              }\n            }\n          }\n        }\n\n        // COMPAT: If the selection is expanded, even if the command seems like\n        // a delete forward/backward command it should delete the selection.\n        if (\n          selection &&\n          Range.isExpanded(selection) &&\n          type.startsWith('delete')\n        ) {\n          const direction = type.endsWith('Backward') ? 'backward' : 'forward'\n          Editor.deleteFragment(editor, { direction })\n          return\n        }\n\n        switch (type) {\n          case 'deleteByComposition':\n          case 'deleteByCut':\n          case 'deleteByDrag': {\n            Editor.deleteFragment(editor)\n            break\n          }\n\n          case 'deleteContent':\n          case 'deleteContentForward': {\n            Editor.deleteForward(editor)\n            break\n          }\n\n          case 'deleteContentBackward': {\n            Editor.deleteBackward(editor)\n            break\n          }\n\n          case 'deleteEntireSoftLine': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineForward': {\n            Editor.deleteForward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineForward': {\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteWordBackward': {\n            Editor.deleteBackward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'deleteWordForward': {\n            Editor.deleteForward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'insertLineBreak':\n            Editor.insertSoftBreak(editor)\n            break\n\n          case 'insertParagraph': {\n            Editor.insertBreak(editor)\n            break\n          }\n\n          case 'insertFromComposition':\n          case 'insertFromDrop':\n          case 'insertFromPaste':\n          case 'insertFromYank':\n          case 'insertReplacementText':\n          case 'insertText': {\n            const { selection } = editor\n            if (selection) {\n              if (Range.isExpanded(selection)) {\n                Editor.deleteFragment(editor)\n              }\n            }\n\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              state.isComposing && setIsComposing(false)\n              state.isComposing = false\n            }\n\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if (data?.constructor.name === 'DataTransfer') {\n              ReactEditor.insertData(editor, data)\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(() =>\n                  Editor.insertText(editor, data)\n                )\n              } else {\n                Editor.insertText(editor, data)\n              }\n            }\n\n            break\n          }\n        }\n\n        // Restore the actual user section if nothing manually set it.\n        const toRestore = EDITOR_TO_USER_SELECTION.get(editor)?.unref()\n        EDITOR_TO_USER_SELECTION.delete(editor)\n\n        if (\n          toRestore &&\n          (!editor.selection || !Range.equals(editor.selection, toRestore))\n        ) {\n          Transforms.select(editor, toRestore)\n        }\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput)\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n      }\n    }\n  }, [onDOMBeforeInput])\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener(\n      'selectionchange',\n      scheduleOnDOMSelectionChange\n    )\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        scheduleOnDOMSelectionChange\n      )\n    }\n  }, [scheduleOnDOMSelectionChange])\n\n  const decorations = [...Node.nodes(editor)].flatMap(([n, p]) =>\n    decorate([n, p])\n  )\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === '' &&\n    !isComposing\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n          // have to use hacks to make these replacement-based features work.\n          // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n          // mismatch warning app moves to browser. Pass-through consumer props when\n          // not CAN_USE_DOM (SSR) and default to falsy value\n          spellCheck={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.spellCheck\n              : false\n          }\n          autoCorrect={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.autoCorrect\n              : 'false'\n          }\n          autoCapitalize={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.autoCapitalize\n              : 'false'\n          }\n          data-slate-editor\n          data-slate-node=\"value\"\n          // explicitly set this\n          contentEditable={!readOnly}\n          // in some cases, a decoration needs access to the range / selection to decorate a text node,\n          // then you will select the whole text node when you select part the of text\n          // this magic zIndex=\"-1\" will fix it\n          zindex={-1}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onBeforeInput={useCallback(\n            (event: React.FormEvent<HTMLDivElement>) => {\n              // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n              // fall back to React's leaky polyfill instead just for it. It\n              // only works for the `insertText` input type.\n              if (\n                !HAS_BEFORE_INPUT_SUPPORT &&\n                !readOnly &&\n                !isEventHandled(event, attributes.onBeforeInput) &&\n                hasEditableTarget(editor, event.target)\n              ) {\n                event.preventDefault()\n                if (!state.isComposing) {\n                  const text = (event as any).data as string\n                  Editor.insertText(editor, text)\n                }\n              }\n            },\n            [readOnly]\n          )}\n          onInput={useCallback((event: React.SyntheticEvent) => {\n            // Flush native operations, as native events will have propogated\n            // and we can correctly compare DOM text values in components\n            // to stop rendering, so that browser functions like autocorrect\n            // and spellcheck work as expected.\n            for (const op of deferredOperations.current) {\n              op()\n            }\n            deferredOperations.current = []\n          }, [])}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              // COMPAT: Safari doesn't always remove the selection even if the content-\n              // editable element no longer has focus. Refer to:\n              // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n              if (IS_SAFARI) {\n                const domSelection = root.getSelection()\n                domSelection?.removeAllRanges()\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onClick={useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onClick) &&\n                isDOMNode(event.target)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                if (event.detail === TRIPLE_CLICK) {\n                  const start = Editor.start(editor, [path[0]])\n                  const end = Editor.end(editor, [path[0]])\n                  const range = Editor.range(editor, start, end)\n                  Transforms.select(editor, range)\n                  return\n                }\n\n                if (readOnly) {\n                  return\n                }\n\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (Editor.hasPath(editor, path)) {\n                  const lookupNode = Node.get(editor, path)\n                  if (lookupNode === node) {\n                    const start = Editor.start(editor, path)\n                    const end = Editor.end(editor, path)\n                    const startVoid = Editor.void(editor, { at: start })\n                    const endVoid = Editor.void(editor, { at: end })\n\n                    if (\n                      startVoid &&\n                      endVoid &&\n                      Path.equals(startVoid[1], endVoid[1])\n                    ) {\n                      const range = Editor.range(editor, start)\n                      Transforms.select(editor, range)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onClick]\n          )}\n          onCompositionEnd={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionEnd)\n              ) {\n                state.isComposing && setIsComposing(false)\n                state.isComposing = false\n\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (\n                  !IS_SAFARI &&\n                  !IS_FIREFOX_LEGACY &&\n                  !IS_IOS &&\n                  !IS_QQBROWSER &&\n                  !IS_WECHATBROWSER &&\n                  !IS_UC_MOBILE &&\n                  event.data\n                ) {\n                  Editor.insertText(editor, event.data)\n                }\n\n                if (editor.selection && Range.isCollapsed(editor.selection)) {\n                  const leafPath = editor.selection.anchor.path\n                  const currentTextNode = Node.leaf(editor, leafPath)\n                  if (state.hasInsertPrefixInCompositon) {\n                    state.hasInsertPrefixInCompositon = false\n                    Editor.withoutNormalizing(editor, () => {\n                      // remove Unicode BOM prefix added in `onCompositionStart`\n                      const text = currentTextNode.text.replace(/^\\uFEFF/, '')\n                      Transforms.delete(editor, {\n                        distance: currentTextNode.text.length,\n                        reverse: true,\n                      })\n                      Editor.insertText(editor, text)\n                    })\n                  }\n                }\n              }\n            },\n            [attributes.onCompositionEnd]\n          )}\n          onCompositionUpdate={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionUpdate)\n              ) {\n                !state.isComposing && setIsComposing(true)\n                state.isComposing = true\n              }\n            },\n            [attributes.onCompositionUpdate]\n          )}\n          onCompositionStart={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionStart)\n              ) {\n                const { selection, marks } = editor\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                    return\n                  }\n                  const inline = Editor.above(editor, {\n                    match: n => Editor.isInline(editor, n),\n                    mode: 'highest',\n                  })\n                  if (inline) {\n                    const [, inlinePath] = inline\n                    if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n                      const point = Editor.after(editor, inlinePath)!\n                      Transforms.setSelection(editor, {\n                        anchor: point,\n                        focus: point,\n                      })\n                    }\n                  }\n                  // insert new node in advance to ensure composition text will insert\n                  // along with final input text\n                  // add Unicode BOM prefix to avoid normalize removing this node\n                  if (marks) {\n                    state.hasInsertPrefixInCompositon = true\n                    Transforms.insertNodes(\n                      editor,\n                      {\n                        text: '\\uFEFF',\n                        ...marks,\n                      },\n                      {\n                        select: true,\n                      }\n                    )\n                  }\n                }\n              }\n            },\n            [attributes.onCompositionStart]\n          )}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'copy')\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'cut')\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onDragOver={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragOver)\n              ) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                const node = ReactEditor.toSlateNode(editor, event.target)\n\n                if (Editor.isVoid(editor, node)) {\n                  event.preventDefault()\n                }\n              }\n            },\n            [attributes.onDragOver]\n          )}\n          onDragStart={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragStart)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                const voidMatch =\n                  Editor.isVoid(editor, node) ||\n                  Editor.void(editor, { at: path, voids: true })\n\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                  const range = Editor.range(editor, path)\n                  Transforms.select(editor, range)\n                }\n\n                state.isDraggingInternally = true\n\n                ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag')\n              }\n            },\n            [readOnly, attributes.onDragStart]\n          )}\n          onDrop={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDrop)\n              ) {\n                event.preventDefault()\n\n                // Keep a reference to the dragged range before updating selection\n                const draggedRange = editor.selection\n\n                // Find the range where the drop happened\n                const range = ReactEditor.findEventRange(editor, event)\n                const data = event.dataTransfer\n\n                Transforms.select(editor, range)\n\n                if (state.isDraggingInternally) {\n                  if (\n                    draggedRange &&\n                    !Range.equals(draggedRange, range) &&\n                    !Editor.void(editor, { at: range, voids: true })\n                  ) {\n                    Transforms.delete(editor, {\n                      at: draggedRange,\n                    })\n                  }\n                }\n\n                ReactEditor.insertData(editor, data)\n\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                  ReactEditor.focus(editor)\n                }\n              }\n\n              state.isDraggingInternally = false\n            },\n            [readOnly, attributes.onDrop]\n          )}\n          onDragEnd={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                state.isDraggingInternally &&\n                attributes.onDragEnd &&\n                hasTarget(editor, event.target)\n              ) {\n                attributes.onDragEnd(event)\n              }\n\n              // When dropping on a different droppable element than the current editor,\n              // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n              // Note: `onDragEnd` is only called when `onDrop` is not called\n              state.isDraggingInternally = false\n            },\n            [readOnly, attributes.onDragEnd]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const el = ReactEditor.toDOMNode(editor, editor)\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (IS_FIREFOX && event.target !== el) {\n                  el.focus()\n                  return\n                }\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onKeyDown={useCallback(\n            (event: React.KeyboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onKeyDown) &&\n                !state.isComposing\n              ) {\n                const { nativeEvent } = event\n                const { selection } = editor\n\n                const element =\n                  editor.children[\n                    selection !== null ? selection.focus.path[0] : 0\n                  ]\n                const isRTL = getDirection(Node.string(element)) === 'rtl'\n\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (Hotkeys.isRedo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.redo === 'function') {\n                    maybeHistoryEditor.redo()\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isUndo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.undo === 'function') {\n                    maybeHistoryEditor.undo()\n                  }\n\n                  return\n                }\n\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', reverse: true })\n                  return\n                }\n\n                if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line' })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, {\n                    unit: 'line',\n                    edge: 'focus',\n                    reverse: true,\n                  })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                  return\n                }\n\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (Hotkeys.isMoveBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: !isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'start' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'end' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: !isRTL })\n                  return\n                }\n\n                if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: isRTL })\n                  return\n                }\n\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!HAS_BEFORE_INPUT_SUPPORT) {\n                  // We don't have a core behavior for these, but they change the\n                  // DOM if we don't prevent them, so we have to.\n                  if (\n                    Hotkeys.isBold(nativeEvent) ||\n                    Hotkeys.isItalic(nativeEvent) ||\n                    Hotkeys.isTransposeCharacter(nativeEvent)\n                  ) {\n                    event.preventDefault()\n                    return\n                  }\n\n                  if (Hotkeys.isSoftBreak(nativeEvent)) {\n                    event.preventDefault()\n                    Editor.insertSoftBreak(editor)\n                    return\n                  }\n\n                  if (Hotkeys.isSplitBlock(nativeEvent)) {\n                    event.preventDefault()\n                    Editor.insertBreak(editor)\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n                } else {\n                  if (IS_CHROME || IS_SAFARI) {\n                    // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                    // an event when deleting backwards in a selected void inline node\n                    if (\n                      selection &&\n                      (Hotkeys.isDeleteBackward(nativeEvent) ||\n                        Hotkeys.isDeleteForward(nativeEvent)) &&\n                      Range.isCollapsed(selection)\n                    ) {\n                      const currentNode = Node.parent(\n                        editor,\n                        selection.anchor.path\n                      )\n\n                      if (\n                        Element.isElement(currentNode) &&\n                        Editor.isVoid(editor, currentNode) &&\n                        Editor.isInline(editor, currentNode)\n                      ) {\n                        event.preventDefault()\n                        Editor.deleteBackward(editor, { unit: 'block' })\n\n                        return\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onKeyDown]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste)\n              ) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                if (\n                  !HAS_BEFORE_INPUT_SUPPORT ||\n                  isPlainTextOnlyPaste(event.nativeEvent)\n                ) {\n                  event.preventDefault()\n                  ReactEditor.insertData(editor, event.clipboardData)\n                }\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          <Children\n            decorations={decorations}\n            node={editor}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={editor.selection}\n          />\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n\n/**\n * The props that get passed to renderPlaceholder\n */\nexport type RenderPlaceholderProps = {\n  children: any\n  attributes: {\n    'data-slate-placeholder': boolean\n    dir?: 'rtl'\n    contentEditable: boolean\n    ref: React.RefObject<any>\n    style: React.CSSProperties\n  }\n}\n\n/**\n * The default placeholder element\n */\n\nexport const DefaultPlaceholder = ({\n  attributes,\n  children,\n}: RenderPlaceholderProps) => <span {...attributes}>{children}</span>\n\n/**\n * A default memoized decorate function.\n */\n\nexport const defaultDecorate: (entry: NodeEntry) => Range[] = () => []\n\n/**\n * A default implement to scroll dom range into view.\n */\n\nconst defaultScrollSelectionIntoView = (\n  editor: ReactEditor,\n  domRange: DOMRange\n) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (\n    !editor.selection ||\n    (editor.selection && Range.isCollapsed(editor.selection))\n  ) {\n    const leafEl = domRange.startContainer.parentElement!\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange)\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed',\n    })\n    delete leafEl.getBoundingClientRect\n  }\n}\n\n/**\n * Check if the target is in the editor.\n */\n\nexport const hasTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target)\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\n\nexport const hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return (\n    isDOMNode(target) &&\n    ReactEditor.hasDOMNode(editor, target, { editable: true })\n  )\n}\n\n/**\n * Check if the target is inside void and in an non-readonly editor.\n */\n\nexport const isTargetInsideNonReadonlyVoid = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): boolean => {\n  if (IS_READ_ONLY.get(editor)) return false\n\n  const slateNode =\n    hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target)\n  return Editor.isVoid(editor, slateNode)\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>\n>(\n  event: EventType,\n  handler?: (event: EventType) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nexport const isDOMEventHandled = <E extends Event>(\n  event: E,\n  handler?: (event: E) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.defaultPrevented\n}\n","import { Editor, Path, Range, Text } from 'slate'\n\nimport { ReactEditor } from '../../'\nimport { DOMNode } from '../../utils/dom'\n\nexport type Diff = {\n  start: number\n  end: number\n  insertText: string\n  removeText: string\n}\n\nexport interface TextInsertion {\n  text: Diff\n  path: Path\n}\n\ntype TextRange = {\n  start: number\n  end: number\n}\n\n/**\n * Returns the number of characters that are the same at the beginning of the\n * String.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the offset of the start of the difference; null if there is no difference\n */\nfunction getDiffStart(prev: string, next: string): number | null {\n  const length = Math.min(prev.length, next.length)\n\n  for (let i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Returns the number of characters that are the same at the end of the String\n * up to `max`. Max prevents double-counting characters when there are\n * multiple duplicate characters around the diff area.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @param max  the max length to test.\n * @returns number of characters that are the same at the end of the string\n */\nfunction getDiffEnd(prev: string, next: string, max: number): number | null {\n  const prevLength = prev.length\n  const nextLength = next.length\n  const length = Math.min(prevLength, nextLength, max)\n\n  for (let i = 0; i < length; i++) {\n    const prevChar = prev.charAt(prevLength - i - 1)\n    const nextChar = next.charAt(nextLength - i - 1)\n    if (prevChar !== nextChar) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Takes two strings and returns an object representing two offsets. The\n * first, `start` represents the number of characters that are the same at\n * the front of the String. The `end` represents the number of characters\n * that are the same at the end of the String.\n *\n * Returns null if they are identical.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the difference text range; null if there are no differences.\n */\nfunction getDiffOffsets(prev: string, next: string): TextRange | null {\n  if (prev === next) return null\n  const start = getDiffStart(prev, next)\n  if (start === null) return null\n  const maxEnd = Math.min(prev.length - start, next.length - start)\n  const end = getDiffEnd(prev, next, maxEnd)!\n  if (end === null) return null\n  return { start, end }\n}\n\n/**\n * Takes a text string and returns a slice from the string at the given text range\n *\n * @param text  the text\n * @param offsets  the text range\n * @returns the text slice at text range\n */\nfunction sliceText(text: string, offsets: TextRange): string {\n  return text.slice(offsets.start, text.length - offsets.end)\n}\n\n/**\n * Takes two strings and returns a smart diff that can be used to describe the\n * change in a way that can be used as operations like inserting, removing or\n * replacing text.\n *\n * @param prev the previous text\n * @param next the next text\n * @returns the text difference\n */\nexport function diffText(prev?: string, next?: string): Diff | null {\n  if (prev === undefined || next === undefined) return null\n  const offsets = getDiffOffsets(prev, next)\n  if (offsets == null) return null\n  const insertText = sliceText(next, offsets)\n  const removeText = sliceText(prev, offsets)\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText,\n    removeText,\n  }\n}\n\nexport function combineInsertedText(insertedText: TextInsertion[]): string {\n  return insertedText.reduce((acc, { text }) => `${acc}${text.insertText}`, '')\n}\n\nexport function getTextInsertion<T extends Editor>(\n  editor: T,\n  domNode: DOMNode\n): TextInsertion | undefined {\n  const node = ReactEditor.toSlateNode(editor, domNode)\n\n  if (!Text.isText(node)) {\n    return undefined\n  }\n\n  const prevText = node.text\n  let nextText = domNode.textContent!\n\n  // textContent will pad an extra \\n when the textContent ends with an \\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1)\n  }\n\n  // If the text is no different, there is no diff.\n  if (nextText !== prevText) {\n    const textDiff = diffText(prevText, nextText)\n    if (textDiff !== null) {\n      const textPath = ReactEditor.findPath(editor, node)\n\n      return {\n        text: textDiff,\n        path: textPath,\n      }\n    }\n  }\n\n  return undefined\n}\n\nexport function normalizeTextInsertionRange(\n  editor: Editor,\n  range: Range | null,\n  { path, text }: TextInsertion\n) {\n  const insertionRange = {\n    anchor: { path, offset: text.start },\n    focus: { path, offset: text.end },\n  }\n\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange\n  }\n\n  const { insertText, removeText } = text\n  const isSingleCharacterInsertion =\n    insertText.length === 1 || removeText.length === 1\n\n  /**\n   * This code handles edge cases that arise from text diffing when the\n   * inserted or removed character is a single character, and the character\n   * right before or after the anchor is the same as the one being inserted or\n   * removed.\n   *\n   * Take this example: hello|o\n   *\n   * If another `o` is inserted at the selection's anchor in the example above,\n   * it should be inserted at the anchor, but using text diffing, we actually\n   * detect that the character was inserted after the second `o`:\n   *\n   * helloo[o]|\n   *\n   * Instead, in these very specific edge cases, we assume that the character\n   * needs to be inserted after the anchor rather than where the diff was found:\n   *\n   * hello[o]|o\n   */\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    const [text] = Array.from(\n      Editor.nodes(editor, { at: range, match: Text.isText })\n    )\n\n    if (text) {\n      const [node] = text\n      const { anchor } = range\n      const characterBeforeAnchor = node.text[anchor.offset - 1]\n      const characterAfterAnchor = node.text[anchor.offset]\n\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range\n      }\n\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: { path, offset: anchor.offset - 1 },\n          focus: { path, offset: anchor.offset },\n        }\n      }\n    }\n  }\n\n  return insertionRange\n}\n","/**\n * An auto-incrementing identifier for keys.\n */\n\nlet n = 0\n\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */\n\nexport class Key {\n  id: string\n\n  constructor() {\n    this.id = `${n++}`\n  }\n}\n","import { Editor, Node, Path, Point, Range, Transforms, BaseEditor } from 'slate'\n\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_INDEX,\n  NODE_TO_KEY,\n  NODE_TO_PARENT,\n  EDITOR_TO_WINDOW,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMPoint,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n  isDOMElement,\n  isDOMSelection,\n  normalizeDOMPoint,\n  hasShadowRoot,\n} from '../utils/dom'\nimport { IS_CHROME, IS_FIREFOX } from '../utils/environment'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends BaseEditor {\n  insertData: (data: DataTransfer) => void\n  insertFragmentData: (data: DataTransfer) => boolean\n  insertTextData: (data: DataTransfer) => boolean\n  setFragmentData: (\n    data: DataTransfer,\n    originEvent?: 'drag' | 'copy' | 'cut'\n  ) => void\n  hasRange: (editor: ReactEditor, range: Range) => boolean\n}\n\nexport const ReactEditor = {\n  /**\n   * Return the host window of the current editor.\n   */\n\n  getWindow(editor: ReactEditor): Window {\n    const window = EDITOR_TO_WINDOW.get(editor)\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor')\n    }\n    return window\n  },\n\n  /**\n   * Find a key for a Slate node.\n   */\n\n  findKey(editor: ReactEditor, node: Node): Key {\n    let key = NODE_TO_KEY.get(node)\n\n    if (!key) {\n      key = new Key()\n      NODE_TO_KEY.set(node, key)\n    }\n\n    return key\n  },\n\n  /**\n   * Find the path of Slate node.\n   */\n\n  findPath(editor: ReactEditor, node: Node): Path {\n    const path: Path = []\n    let child = node\n\n    while (true) {\n      const parent = NODE_TO_PARENT.get(child)\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path\n        } else {\n          break\n        }\n      }\n\n      const i = NODE_TO_INDEX.get(child)\n\n      if (i == null) {\n        break\n      }\n\n      path.unshift(i)\n      child = parent\n    }\n\n    throw new Error(\n      `Unable to find the path for Slate node: ${JSON.stringify(node)}`\n    )\n  },\n\n  /**\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\n   */\n\n  findDocumentOrShadowRoot(editor: ReactEditor): Document | ShadowRoot {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = el.getRootNode()\n\n    if (\n      (root instanceof Document || root instanceof ShadowRoot) &&\n      root.getSelection != null\n    ) {\n      return root\n    }\n\n    return el.ownerDocument\n  },\n\n  /**\n   * Check if the editor is focused.\n   */\n\n  isFocused(editor: ReactEditor): boolean {\n    return !!IS_FOCUSED.get(editor)\n  },\n\n  /**\n   * Check if the editor is in read-only mode.\n   */\n\n  isReadOnly(editor: ReactEditor): boolean {\n    return !!IS_READ_ONLY.get(editor)\n  },\n\n  /**\n   * Blur the editor.\n   */\n\n  blur(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, false)\n\n    if (root.activeElement === el) {\n      el.blur()\n    }\n  },\n\n  /**\n   * Focus the editor.\n   */\n\n  focus(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, true)\n\n    if (root.activeElement !== el) {\n      el.focus({ preventScroll: true })\n    }\n  },\n\n  /**\n   * Deselect the editor.\n   */\n\n  deselect(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges()\n    }\n\n    if (selection) {\n      Transforms.deselect(editor)\n    }\n  },\n\n  /**\n   * Check if a DOM node is within the editor.\n   */\n\n  hasDOMNode(\n    editor: ReactEditor,\n    target: DOMNode,\n    options: { editable?: boolean } = {}\n  ): boolean {\n    const { editable = false } = options\n    const editorEl = ReactEditor.toDOMNode(editor, editor)\n    let targetEl\n\n    // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n    try {\n      targetEl = (isDOMElement(target)\n        ? target\n        : target.parentElement) as HTMLElement\n    } catch (err) {\n      if (\n        !err.message.includes('Permission denied to access property \"nodeType\"')\n      ) {\n        throw err\n      }\n    }\n\n    if (!targetEl) {\n      return false\n    }\n\n    return (\n      targetEl.closest(`[data-slate-editor]`) === editorEl &&\n      (!editable || targetEl.isContentEditable\n        ? true\n        : (typeof targetEl.isContentEditable === 'boolean' && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined\n            // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable=\"false\"(readOnly)\n            targetEl.closest('[contenteditable=\"false\"]') === editorEl) ||\n          !!targetEl.getAttribute('data-slate-zero-width'))\n    )\n  },\n\n  /**\n   * Insert data from a `DataTransfer` into the editor.\n   */\n\n  insertData(editor: ReactEditor, data: DataTransfer): void {\n    editor.insertData(data)\n  },\n\n  /**\n   * Insert fragment data from a `DataTransfer` into the editor.\n   */\n\n  insertFragmentData(editor: ReactEditor, data: DataTransfer): boolean {\n    return editor.insertFragmentData(data)\n  },\n\n  /**\n   * Insert text data from a `DataTransfer` into the editor.\n   */\n\n  insertTextData(editor: ReactEditor, data: DataTransfer): boolean {\n    return editor.insertTextData(data)\n  },\n\n  /**\n   * Sets data from the currently selected fragment on a `DataTransfer`.\n   */\n\n  setFragmentData(\n    editor: ReactEditor,\n    data: DataTransfer,\n    originEvent?: 'drag' | 'copy' | 'cut'\n  ): void {\n    editor.setFragmentData(data, originEvent)\n  },\n\n  /**\n   * Find the native DOM element from a Slate node.\n   */\n\n  toDOMNode(editor: ReactEditor, node: Node): HTMLElement {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    const domNode = Editor.isEditor(node)\n      ? EDITOR_TO_ELEMENT.get(editor)\n      : KEY_TO_ELEMENT?.get(ReactEditor.findKey(editor, node))\n\n    if (!domNode) {\n      throw new Error(\n        `Cannot resolve a DOM node from Slate node: ${JSON.stringify(node)}`\n      )\n    }\n\n    return domNode\n  },\n\n  /**\n   * Find a native DOM selection point from a Slate point.\n   */\n\n  toDOMPoint(editor: ReactEditor, point: Point): DOMPoint {\n    const [node] = Editor.node(editor, point.path)\n    const el = ReactEditor.toDOMNode(editor, node)\n    let domPoint: DOMPoint | undefined\n\n    // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n    if (Editor.void(editor, { at: point })) {\n      point = { path: point.path, offset: 0 }\n    }\n\n    // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n    const selector = `[data-slate-string], [data-slate-zero-width]`\n    const texts = Array.from(el.querySelectorAll(selector))\n    let start = 0\n\n    for (const text of texts) {\n      const domNode = text.childNodes[0] as HTMLElement\n\n      if (domNode == null || domNode.textContent == null) {\n        continue\n      }\n\n      const { length } = domNode.textContent\n      const attr = text.getAttribute('data-slate-length')\n      const trueLength = attr == null ? length : parseInt(attr, 10)\n      const end = start + trueLength\n\n      if (point.offset <= end) {\n        const offset = Math.min(length, Math.max(0, point.offset - start))\n        domPoint = [domNode, offset]\n        break\n      }\n\n      start = end\n    }\n\n    if (!domPoint) {\n      throw new Error(\n        `Cannot resolve a DOM point from Slate point: ${JSON.stringify(point)}`\n      )\n    }\n\n    return domPoint\n  },\n\n  /**\n   * Find a native DOM range from a Slate `range`.\n   *\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\n   *\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\n   */\n\n  toDOMRange(editor: ReactEditor, range: Range): DOMRange {\n    const { anchor, focus } = range\n    const isBackward = Range.isBackward(range)\n    const domAnchor = ReactEditor.toDOMPoint(editor, anchor)\n    const domFocus = Range.isCollapsed(range)\n      ? domAnchor\n      : ReactEditor.toDOMPoint(editor, focus)\n\n    const window = ReactEditor.getWindow(editor)\n    const domRange = window.document.createRange()\n    const [startNode, startOffset] = isBackward ? domFocus : domAnchor\n    const [endNode, endOffset] = isBackward ? domAnchor : domFocus\n\n    // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n    const startEl = (isDOMElement(startNode)\n      ? startNode\n      : startNode.parentElement) as HTMLElement\n    const isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width')\n    const endEl = (isDOMElement(endNode)\n      ? endNode\n      : endNode.parentElement) as HTMLElement\n    const isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width')\n\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset)\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset)\n    return domRange\n  },\n\n  /**\n   * Find a Slate node from a native DOM `element`.\n   */\n\n  toSlateNode(editor: ReactEditor, domNode: DOMNode): Node {\n    let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(`[data-slate-node]`)\n    }\n\n    const node = domEl ? ELEMENT_TO_NODE.get(domEl as HTMLElement) : null\n\n    if (!node) {\n      throw new Error(`Cannot resolve a Slate node from DOM node: ${domEl}`)\n    }\n\n    return node\n  },\n\n  /**\n   * Get the target range from a DOM `event`.\n   */\n\n  findEventRange(editor: ReactEditor, event: any): Range {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent\n    }\n\n    const { clientX: x, clientY: y, target } = event\n\n    if (x == null || y == null) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    const node = ReactEditor.toSlateNode(editor, event.target)\n    const path = ReactEditor.findPath(editor, node)\n\n    // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n    if (Editor.isVoid(editor, node)) {\n      const rect = target.getBoundingClientRect()\n      const isPrev = editor.isInline(node)\n        ? x - rect.left < rect.left + rect.width - x\n        : y - rect.top < rect.top + rect.height - y\n\n      const edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end',\n      })\n      const point = isPrev\n        ? Editor.before(editor, edge)\n        : Editor.after(editor, edge)\n\n      if (point) {\n        const range = Editor.range(editor, point)\n        return range\n      }\n    }\n\n    // Else resolve a range from the caret position where the drop occured.\n    let domRange\n    const { document } = ReactEditor.getWindow(editor)\n\n    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y)\n    } else {\n      const position = document.caretPositionFromPoint(x, y)\n\n      if (position) {\n        domRange = document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    // Resolve a Slate range from the DOM range.\n    const range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      suppressThrow: false,\n    })\n    return range\n  },\n\n  /**\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\n   */\n\n  toSlatePoint<T extends boolean>(\n    editor: ReactEditor,\n    domPoint: DOMPoint,\n    options: {\n      exactMatch: T\n      suppressThrow: T\n    }\n  ): T extends true ? Point | null : Point {\n    const { exactMatch, suppressThrow } = options\n    const [nearestNode, nearestOffset] = exactMatch\n      ? domPoint\n      : normalizeDOMPoint(domPoint)\n    const parentNode = nearestNode.parentNode as DOMElement\n    let textNode: DOMElement | null = null\n    let offset = 0\n\n    if (parentNode) {\n      const editorEl = ReactEditor.toDOMNode(editor, editor)\n      const potentialVoidNode = parentNode.closest('[data-slate-void=\"true\"]')\n      // Need to ensure that the closest void node is actually a void node\n      // within this editor, and not a void node within some parent editor. This can happen\n      // if this editor is within a void node of another editor (\"nested editors\", like in\n      // the \"Editable Voids\" example on the docs site).\n      const voidNode =\n        potentialVoidNode && editorEl.contains(potentialVoidNode)\n          ? potentialVoidNode\n          : null\n      let leafNode = parentNode.closest('[data-slate-leaf]')\n      let domNode: DOMElement | null = null\n\n      // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')\n\n        if (textNode) {\n          const window = ReactEditor.getWindow(editor)\n          const range = window.document.createRange()\n          range.setStart(textNode, 0)\n          range.setEnd(nearestNode, nearestOffset)\n\n          const contents = range.cloneContents()\n          const removals = [\n            ...Array.prototype.slice.call(\n              contents.querySelectorAll('[data-slate-zero-width]')\n            ),\n            ...Array.prototype.slice.call(\n              contents.querySelectorAll('[contenteditable=false]')\n            ),\n          ]\n\n          removals.forEach(el => {\n            el!.parentNode!.removeChild(el)\n          })\n\n          // COMPAT: Edge has a bug where Range.prototype.toString() will\n          // convert \\n into \\r\\n. The bug causes a loop when slate-react\n          // attempts to reposition its cursor to match the native position. Use\n          // textContent.length instead.\n          // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n          offset = contents.textContent!.length\n          domNode = textNode\n        }\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]')!\n\n        // COMPAT: In read-only editors the leaf is not rendered.\n        if (!leafNode) {\n          offset = 1\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n          domNode = leafNode\n          offset = domNode.textContent!.length\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(el => {\n            offset -= el.textContent!.length\n          })\n        }\n      }\n\n      if (\n        domNode &&\n        offset === domNode.textContent!.length &&\n        // COMPAT: If the parent node is a Slate zero-width space, editor is\n        // because the text node should have no characters. However, during IME\n        // composition the ASCII characters will be prepended to the zero-width\n        // space, so subtract 1 from the offset to account for the zero-width\n        // space character.\n        (parentNode.hasAttribute('data-slate-zero-width') ||\n          // COMPAT: In Firefox, `range.cloneContents()` returns an extra trailing '\\n'\n          // when the document ends with a new-line character. This results in the offset\n          // length being off by one, so we need to subtract one to account for this.\n          (IS_FIREFOX && domNode.textContent?.endsWith('\\n\\n')))\n      ) {\n        offset--\n      }\n    }\n\n    if (!textNode) {\n      if (suppressThrow) {\n        return null as T extends true ? Point | null : Point\n      }\n      throw new Error(\n        `Cannot resolve a Slate point from DOM point: ${domPoint}`\n      )\n    }\n\n    // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n    const slateNode = ReactEditor.toSlateNode(editor, textNode!)\n    const path = ReactEditor.findPath(editor, slateNode)\n    return { path, offset } as T extends true ? Point | null : Point\n  },\n\n  /**\n   * Find a Slate range from a DOM range or selection.\n   */\n\n  toSlateRange<T extends boolean>(\n    editor: ReactEditor,\n    domRange: DOMRange | DOMStaticRange | DOMSelection,\n    options: {\n      exactMatch: T\n      suppressThrow: T\n    }\n  ): T extends true ? Range | null : Range {\n    const { exactMatch, suppressThrow } = options\n    const el = isDOMSelection(domRange)\n      ? domRange.anchorNode\n      : domRange.startContainer\n    let anchorNode\n    let anchorOffset\n    let focusNode\n    let focusOffset\n    let isCollapsed\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode\n        anchorOffset = domRange.anchorOffset\n        focusNode = domRange.focusNode\n        focusOffset = domRange.focusOffset\n        // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed =\n            domRange.anchorNode === domRange.focusNode &&\n            domRange.anchorOffset === domRange.focusOffset\n        } else {\n          isCollapsed = domRange.isCollapsed\n        }\n      } else {\n        anchorNode = domRange.startContainer\n        anchorOffset = domRange.startOffset\n        focusNode = domRange.endContainer\n        focusOffset = domRange.endOffset\n        isCollapsed = domRange.collapsed\n      }\n    }\n\n    if (\n      anchorNode == null ||\n      focusNode == null ||\n      anchorOffset == null ||\n      focusOffset == null\n    ) {\n      throw new Error(\n        `Cannot resolve a Slate range from DOM range: ${domRange}`\n      )\n    }\n\n    const anchor = ReactEditor.toSlatePoint(\n      editor,\n      [anchorNode, anchorOffset],\n      { exactMatch, suppressThrow }\n    )\n    if (!anchor) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    const focus = isCollapsed\n      ? anchor\n      : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {\n          exactMatch,\n          suppressThrow,\n        })\n    if (!focus) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    let range: Range = { anchor: anchor as Point, focus: focus as Point }\n    // if the selection is a hanging range that ends in a void\n    // and the DOM focus is an Element\n    // (meaning that the selection ends before the element)\n    // unhang the range to avoid mistakenly including the void\n    if (\n      Range.isExpanded(range) &&\n      Range.isForward(range) &&\n      isDOMElement(focusNode) &&\n      Editor.void(editor, { at: range.focus, mode: 'highest' })\n    ) {\n      range = Editor.unhangRange(editor, range, { voids: true })\n    }\n\n    return (range as unknown) as T extends true ? Range | null : Range\n  },\n\n  hasRange(editor: ReactEditor, range: Range): boolean {\n    const { anchor, focus } = range\n    return (\n      Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path)\n    )\n  },\n}\n","import { Editor, Node, Path, Range } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\nimport { ReactEditor } from '../..'\nimport { TextInsertion, getTextInsertion } from './diff-text'\n\ninterface MutationData {\n  addedNodes: DOMNode[]\n  removedNodes: DOMNode[]\n  insertedText: TextInsertion[]\n  characterDataMutations: MutationRecord[]\n}\n\ntype MutationDetection = (editor: Editor, mutationData: MutationData) => boolean\n\nexport function gatherMutationData(\n  editor: Editor,\n  mutations: MutationRecord[]\n): MutationData {\n  const addedNodes: DOMNode[] = []\n  const removedNodes: DOMNode[] = []\n  const insertedText: TextInsertion[] = []\n  const characterDataMutations: MutationRecord[] = []\n\n  mutations.forEach(mutation => {\n    switch (mutation.type) {\n      case 'childList': {\n        if (mutation.addedNodes.length) {\n          mutation.addedNodes.forEach(addedNode => {\n            addedNodes.push(addedNode)\n          })\n        }\n\n        mutation.removedNodes.forEach(removedNode => {\n          removedNodes.push(removedNode)\n        })\n\n        break\n      }\n      case 'characterData': {\n        characterDataMutations.push(mutation)\n\n        // Changes to text nodes should consider the parent element\n        const { parentNode } = mutation.target\n\n        if (!parentNode) {\n          return\n        }\n\n        const textInsertion = getTextInsertion(editor, parentNode)\n\n        if (!textInsertion) {\n          return\n        }\n\n        // If we've already detected a diff at that path, we can return early\n        if (\n          insertedText.some(({ path }) => Path.equals(path, textInsertion.path))\n        ) {\n          return\n        }\n\n        // Add the text diff to the array of detected text insertions that need to be reconciled\n        insertedText.push(textInsertion)\n      }\n    }\n  })\n\n  return { addedNodes, removedNodes, insertedText, characterDataMutations }\n}\n\n/**\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\n *\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\n * `addedNodes`.\n *\n * To account for these edge cases, the most reliable strategy to detect line break mutations\n * is to check whether a new block was inserted of the same type as the current block.\n */\nexport const isLineBreak: MutationDetection = (editor, { addedNodes }) => {\n  const { selection } = editor\n  const parentNode = selection\n    ? Node.parent(editor, selection.anchor.path)\n    : null\n  const parentDOMNode = parentNode\n    ? ReactEditor.toDOMNode(editor, parentNode)\n    : null\n\n  if (!parentDOMNode) {\n    return false\n  }\n\n  return addedNodes.some(\n    addedNode =>\n      addedNode instanceof HTMLElement &&\n      addedNode.tagName === parentDOMNode?.tagName\n  )\n}\n\n/**\n * So long as we check for line break mutations before deletion mutations,\n * we can safely assume that a set of mutations was a deletion if there are\n * removed nodes.\n */\nexport const isDeletion: MutationDetection = (_, { removedNodes }) => {\n  return removedNodes.length > 0\n}\n\n/**\n * If the selection was expanded and there are removed nodes,\n * the contents of the selection need to be replaced with the diff\n */\nexport const isReplaceExpandedSelection: MutationDetection = (\n  { selection },\n  { removedNodes }\n) => {\n  return selection\n    ? Range.isExpanded(selection) && removedNodes.length > 0\n    : false\n}\n\n/**\n * Plain text insertion\n */\nexport const isTextInsertion: MutationDetection = (_, { insertedText }) => {\n  return insertedText.length > 0\n}\n\n/**\n * Edge case. Detect mutations that remove leaf nodes and also update character data\n */\nexport const isRemoveLeafNodes: MutationDetection = (\n  _,\n  { addedNodes, characterDataMutations, removedNodes }\n) => {\n  return (\n    removedNodes.length > 0 &&\n    addedNodes.length === 0 &&\n    characterDataMutations.length > 0\n  )\n}\n","import { ReactEditor } from '../../plugin/react-editor'\nimport { Editor, Range, Transforms, Text } from 'slate'\nimport {\n  IS_COMPOSING,\n  IS_ON_COMPOSITION_END,\n  EDITOR_ON_COMPOSITION_TEXT,\n} from '../../utils/weak-maps'\n\nimport { DOMNode } from '../../utils/dom'\n\nimport {\n  normalizeTextInsertionRange,\n  combineInsertedText,\n  TextInsertion,\n} from './diff-text'\nimport {\n  gatherMutationData,\n  isDeletion,\n  isLineBreak,\n  isRemoveLeafNodes,\n  isReplaceExpandedSelection,\n  isTextInsertion,\n} from './mutation-detection'\n\n// Replace with `const debug = console.log` to debug\nconst debug = (...message: any[]) => {}\n\n/**\n * Based loosely on:\n *\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\n *\n * The input manager attempts to map observed mutations on the document to a\n * set of operations in order to reconcile Slate's internal value with the DOM.\n *\n * Mutations are processed synchronously as they come in. Only mutations that occur\n * during a user input loop are processed, as other mutations can occur within the\n * document that were not initiated by user input.\n *\n * The mutation reconciliation process attempts to match mutations to the following\n * patterns:\n *\n * - Text updates\n * - Deletions\n * - Line breaks\n *\n * @param editor\n * @param restoreDOM\n */\n\nexport class AndroidInputManager {\n  constructor(private editor: ReactEditor, private restoreDOM: () => void) {\n    this.editor = editor\n    this.restoreDOM = restoreDOM\n  }\n\n  /**\n   * Handle MutationObserver flush\n   *\n   * @param mutations\n   */\n\n  flush = (mutations: MutationRecord[]) => {\n    debug('flush')\n\n    try {\n      this.reconcileMutations(mutations)\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err)\n\n      // Failed to reconcile mutations, restore DOM to its previous state\n      this.restoreDOM()\n    }\n  }\n\n  /**\n   * Reconcile a batch of mutations\n   *\n   * @param mutations\n   */\n\n  private reconcileMutations = (mutations: MutationRecord[]) => {\n    const mutationData = gatherMutationData(this.editor, mutations)\n    const { insertedText, removedNodes } = mutationData\n\n    debug('processMutations', mutations, mutationData)\n\n    if (isReplaceExpandedSelection(this.editor, mutationData)) {\n      const text = combineInsertedText(insertedText)\n      this.replaceExpandedSelection(text)\n    } else if (isLineBreak(this.editor, mutationData)) {\n      this.insertBreak()\n    } else if (isRemoveLeafNodes(this.editor, mutationData)) {\n      this.removeLeafNodes(removedNodes)\n    } else if (isDeletion(this.editor, mutationData)) {\n      this.deleteBackward()\n    } else if (isTextInsertion(this.editor, mutationData)) {\n      this.insertText(insertedText)\n    }\n  }\n\n  /**\n   * Apply text diff\n   */\n\n  private insertText = (insertedText: TextInsertion[]) => {\n    debug('insertText')\n\n    const { selection } = this.editor\n\n    // If it is in composing or after `onCompositionend`, set `EDITOR_ON_COMPOSITION_TEXT` and return.\n    // Text will be inserted on compositionend event.\n    if (\n      IS_COMPOSING.get(this.editor) ||\n      IS_ON_COMPOSITION_END.get(this.editor)\n    ) {\n      EDITOR_ON_COMPOSITION_TEXT.set(this.editor, insertedText)\n      IS_ON_COMPOSITION_END.set(this.editor, false)\n      return\n    }\n\n    // Insert the batched text diffs\n    insertedText.forEach(insertion => {\n      const text = insertion.text.insertText\n      const at = normalizeTextInsertionRange(this.editor, selection, insertion)\n      Transforms.setSelection(this.editor, at)\n      Editor.insertText(this.editor, text)\n    })\n  }\n\n  /**\n   * Handle line breaks\n   */\n\n  private insertBreak = () => {\n    debug('insertBreak')\n\n    const { selection } = this.editor\n\n    Editor.insertBreak(this.editor)\n\n    this.restoreDOM()\n\n    if (selection) {\n      // Compat: Move selection to the newly inserted block if it has not moved\n      setTimeout(() => {\n        if (\n          this.editor.selection &&\n          Range.equals(selection, this.editor.selection)\n        ) {\n          Transforms.move(this.editor)\n        }\n      }, 100)\n    }\n  }\n\n  /**\n   * Handle expanded selection being deleted or replaced by text\n   */\n\n  private replaceExpandedSelection = (text: string) => {\n    debug('replaceExpandedSelection')\n\n    // Delete expanded selection\n    Editor.deleteFragment(this.editor)\n\n    if (text.length) {\n      // Selection was replaced by text, insert the entire text diff\n      Editor.insertText(this.editor, text)\n    }\n\n    this.restoreDOM()\n  }\n\n  /**\n   * Handle `backspace` that merges blocks\n   */\n\n  private deleteBackward = () => {\n    debug('deleteBackward')\n\n    Editor.deleteBackward(this.editor)\n    ReactEditor.focus(this.editor)\n\n    this.restoreDOM()\n  }\n\n  /**\n   * Handle mutations that remove specific leaves\n   */\n  private removeLeafNodes = (nodes: DOMNode[]) => {\n    for (const node of nodes) {\n      const slateNode = ReactEditor.toSlateNode(this.editor, node)\n\n      if (slateNode) {\n        const path = ReactEditor.findPath(this.editor, slateNode)\n\n        Transforms.delete(this.editor, { at: path })\n        this.restoreDOM()\n      }\n    }\n  }\n}\n\nexport default AndroidInputManager\n","import { RefObject, useEffect, useState } from 'react'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\n\nexport function useMutationObserver(\n  node: RefObject<HTMLElement>,\n  callback: MutationCallback,\n  options: MutationObserverInit\n) {\n  const [mutationObserver] = useState(() => new MutationObserver(callback))\n\n  useIsomorphicLayoutEffect(() => {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect()\n  })\n\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined')\n    }\n\n    // Attach mutation observer after render phase has finished\n    mutationObserver.observe(node.current, options)\n\n    // Clean up after effect\n    return mutationObserver.disconnect.bind(mutationObserver)\n  })\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Node as SlateNode, Path } from 'slate'\nimport { ReactEditor, useSlateStatic } from '../..'\nimport { DOMNode, isDOMElement } from '../../utils/dom'\nimport { ELEMENT_TO_NODE, NODE_TO_RESTORE_DOM } from '../../utils/weak-maps'\nimport { useMutationObserver } from './use-mutation-observer'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  childList: true,\n  characterData: true,\n  subtree: true,\n}\n\nfunction findClosestKnowSlateNode(domNode: DOMNode): SlateNode | null {\n  let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n  if (domEl && !domEl.hasAttribute('data-slate-node')) {\n    domEl = domEl.closest(`[data-slate-node]`)\n  }\n\n  const slateNode = domEl && ELEMENT_TO_NODE.get(domEl as HTMLElement)\n  if (slateNode) {\n    return slateNode\n  }\n\n  // Unknown dom element with a slate-slate-node attribute => the IME\n  // most likely duplicated the node so we have to restore the parent\n  return domEl?.parentElement\n    ? findClosestKnowSlateNode(domEl.parentElement)\n    : null\n}\n\nexport function useRestoreDom(\n  node: React.RefObject<HTMLElement>,\n  receivedUserInput: React.RefObject<boolean>\n) {\n  const editor = useSlateStatic()\n  const mutatedNodes = useRef<Set<SlateNode>>(new Set())\n\n  const handleDOMMutation = useCallback((mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    mutations.forEach(({ target }) => {\n      const slateNode = findClosestKnowSlateNode(target)\n      if (!slateNode) {\n        return\n      }\n\n      return mutatedNodes.current.add(slateNode)\n    })\n  }, [])\n\n  useMutationObserver(node, handleDOMMutation, MUTATION_OBSERVER_CONFIG)\n\n  // Clear mutated nodes on every render\n  mutatedNodes.current.clear()\n  const restore = useCallback(() => {\n    const mutated = Array.from(mutatedNodes.current.values())\n\n    // Filter out child nodes of nodes that will be restored anyway\n    const nodesToRestore = mutated.filter(\n      n =>\n        !mutated.some(m =>\n          Path.isParent(\n            ReactEditor.findPath(editor, m),\n            ReactEditor.findPath(editor, n)\n          )\n        )\n    )\n\n    nodesToRestore.forEach(n => {\n      NODE_TO_RESTORE_DOM.get(n)?.()\n    })\n\n    mutatedNodes.current.clear()\n  }, [])\n\n  return restore\n}\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport { ReactEditor } from '../..'\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nexport function useTrackUserInput() {\n  const editor = useSlateStatic()\n  const receivedUserInput = useRef<boolean>(false)\n  const animationFrameRef = useRef<number | null>(null)\n  const onUserInput = useCallback(() => {\n    if (receivedUserInput.current === false) {\n      const window = ReactEditor.getWindow(editor)\n\n      receivedUserInput.current = true\n\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current)\n      }\n\n      animationFrameRef.current = window.requestAnimationFrame(() => {\n        receivedUserInput.current = false\n        animationFrameRef.current = null\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false\n    }\n  })\n\n  return {\n    receivedUserInput,\n    onUserInput,\n  }\n}\n","import { RefObject, useCallback, useMemo, useRef, useState } from 'react'\n\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nimport { AndroidInputManager } from './android-input-manager'\nimport { useRestoreDom } from './use-restore-dom'\nimport { useMutationObserver } from './use-mutation-observer'\nimport { useTrackUserInput } from './use-track-user-input'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true,\n}\n\nexport function useAndroidInputManager(node: RefObject<HTMLElement>) {\n  const editor = useSlateStatic()\n\n  const { receivedUserInput, onUserInput } = useTrackUserInput()\n  const restoreDom = useRestoreDom(node, receivedUserInput)\n\n  const inputManager = useMemo(\n    () => new AndroidInputManager(editor, restoreDom),\n    [restoreDom, editor]\n  )\n\n  const timeoutId = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const isReconciling = useRef(false)\n  const flush = useCallback((mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    isReconciling.current = true\n    inputManager.flush(mutations)\n\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current)\n    }\n\n    timeoutId.current = setTimeout(() => {\n      isReconciling.current = false\n      timeoutId.current = null\n    }, 250)\n  }, [])\n\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG)\n\n  return {\n    isReconciling,\n    onUserInput,\n  }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Editor, Element, Node, Range, Transforms, Path, Text } from 'slate'\nimport throttle from 'lodash/throttle'\nimport debounce from 'lodash/debounce'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport { DefaultPlaceholder, ReactEditor } from '../..'\nimport { ReadOnlyContext } from '../../hooks/use-read-only'\nimport { useSlate } from '../../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../../hooks/use-decorate'\nimport {\n  DOMElement,\n  isDOMElement,\n  isDOMNode,\n  getDefaultView,\n  getClipboardData,\n} from '../../utils/dom'\nimport {\n  EDITOR_TO_ELEMENT,\n  EDITOR_TO_WINDOW,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  PLACEHOLDER_SYMBOL,\n  IS_COMPOSING,\n  IS_ON_COMPOSITION_END,\n  EDITOR_ON_COMPOSITION_TEXT,\n} from '../../utils/weak-maps'\nimport { normalizeTextInsertionRange } from './diff-text'\n\nimport { EditableProps, hasTarget } from '../editable'\nimport useChildren from '../../hooks/use-children'\nimport {\n  defaultDecorate,\n  hasEditableTarget,\n  isEventHandled,\n  isDOMEventHandled,\n  isTargetInsideNonReadonlyVoid,\n} from '../editable'\n\nimport { useAndroidInputManager } from './use-android-input-manager'\nimport { useContentKey } from '../../hooks/use-content-key'\n\n/**\n * Editable.\n */\n\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nconst RESOLVE_DELAY = 20\n\nexport const AndroidEditable = (props: EditableProps): JSX.Element => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  // Rerender editor when composition status changed\n  const [isComposing, setIsComposing] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n  const inputManager = useAndroidInputManager(ref)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  const contentKey = useContentKey(editor)\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n\n    try {\n      // Make sure the DOM selection state is in sync.\n      const { selection } = editor\n      const root = ReactEditor.findDocumentOrShadowRoot(editor)\n      const domSelection = root.getSelection()\n\n      if (\n        state.isComposing ||\n        !domSelection ||\n        !ReactEditor.isFocused(editor)\n      ) {\n        return\n      }\n\n      const hasDomSelection = domSelection.type !== 'None'\n\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return\n      }\n\n      // verify that the dom selection is in the editor\n      const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n      let hasDomSelectionInEditor = false\n      if (\n        editorElement.contains(domSelection.anchorNode) &&\n        editorElement.contains(domSelection.focusNode)\n      ) {\n        hasDomSelectionInEditor = true\n      }\n\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          suppressThrow: true,\n        })\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return\n        }\n      }\n\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: false,\n        })\n        return\n      }\n\n      // Otherwise the DOM selection is out of sync, so update it.\n      const el = ReactEditor.toDOMNode(editor, editor)\n      state.isUpdatingSelection = true\n\n      const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n      if (newDomRange) {\n        if (Range.isBackward(selection!)) {\n          domSelection.setBaseAndExtent(\n            newDomRange.endContainer,\n            newDomRange.endOffset,\n            newDomRange.startContainer,\n            newDomRange.startOffset\n          )\n        } else {\n          domSelection.setBaseAndExtent(\n            newDomRange.startContainer,\n            newDomRange.startOffset,\n            newDomRange.endContainer,\n            newDomRange.endOffset\n          )\n        }\n        const leafEl = newDomRange.startContainer.parentElement!\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(\n          newDomRange\n        )\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el,\n        })\n        // @ts-ignore\n        delete leafEl.getBoundingClientRect\n      } else {\n        domSelection.removeAllRanges()\n      }\n\n      setTimeout(() => {\n        state.isUpdatingSelection = false\n      })\n    } catch {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false\n    }\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      try {\n        if (\n          !state.isComposing &&\n          !state.isUpdatingSelection &&\n          !inputManager.isReconciling.current\n        ) {\n          const root = ReactEditor.findDocumentOrShadowRoot(editor)\n          const { activeElement } = root\n          const el = ReactEditor.toDOMNode(editor, editor)\n          const domSelection = root.getSelection()\n\n          if (activeElement === el) {\n            state.latestElement = activeElement\n            IS_FOCUSED.set(editor, true)\n          } else {\n            IS_FOCUSED.delete(editor)\n          }\n\n          if (!domSelection) {\n            return Transforms.deselect(editor)\n          }\n\n          const { anchorNode, focusNode } = domSelection\n\n          const anchorNodeSelectable =\n            hasEditableTarget(editor, anchorNode) ||\n            isTargetInsideNonReadonlyVoid(editor, anchorNode)\n\n          const focusNodeSelectable =\n            hasEditableTarget(editor, focusNode) ||\n            isTargetInsideNonReadonlyVoid(editor, focusNode)\n\n          if (anchorNodeSelectable && focusNodeSelectable) {\n            const range = ReactEditor.toSlateRange(editor, domSelection, {\n              exactMatch: false,\n              suppressThrow: false,\n            })\n            Transforms.select(editor, range)\n          } else {\n            Transforms.deselect(editor)\n          }\n        }\n      } catch {\n        // Failed to update selection, likely due to reconciliation error\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  const scheduleOnDOMSelectionChange = useMemo(\n    () => debounce(onDOMSelectionChange, 0),\n    [onDOMSelectionChange]\n  )\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n        // triggering a `beforeinput` expecting the change to be applied to the immediately before\n        // set selection.\n        scheduleOnDOMSelectionChange.flush()\n\n        inputManager.onUserInput()\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  useIsomorphicLayoutEffect(() => {\n    const node = ref.current\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    node?.addEventListener('beforeinput', onDOMBeforeInput)\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    return () => node?.removeEventListener('beforeinput', onDOMBeforeInput)\n  }, [contentKey, propsOnDOMBeforeInput])\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener(\n      'selectionchange',\n      scheduleOnDOMSelectionChange\n    )\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        scheduleOnDOMSelectionChange\n      )\n    }\n  }, [scheduleOnDOMSelectionChange])\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === '' &&\n    !isComposing\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          key={contentKey}\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          spellCheck={attributes.spellCheck}\n          autoCorrect={attributes.autoCorrect}\n          autoCapitalize={attributes.autoCapitalize}\n          data-slate-editor\n          data-slate-node=\"value\"\n          contentEditable={readOnly ? undefined : true}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'copy')\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData, 'cut')\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onClick={useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onClick) &&\n                isDOMNode(event.target)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (Editor.hasPath(editor, path)) {\n                  const lookupNode = Node.get(editor, path)\n                  if (lookupNode === node) {\n                    const start = Editor.start(editor, path)\n                    const end = Editor.end(editor, path)\n\n                    const startVoid = Editor.void(editor, { at: start })\n                    const endVoid = Editor.void(editor, { at: end })\n\n                    if (\n                      startVoid &&\n                      endVoid &&\n                      Path.equals(startVoid[1], endVoid[1])\n                    ) {\n                      const range = Editor.range(editor, start)\n                      Transforms.select(editor, range)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onClick]\n          )}\n          onCompositionEnd={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionEnd)\n              ) {\n                scheduleOnDOMSelectionChange.flush()\n                setTimeout(() => {\n                  state.isComposing && setIsComposing(false)\n                  state.isComposing = false\n\n                  IS_COMPOSING.set(editor, false)\n                  IS_ON_COMPOSITION_END.set(editor, true)\n\n                  const insertedText =\n                    EDITOR_ON_COMPOSITION_TEXT.get(editor) || []\n\n                  // `insertedText` is set in `MutationObserver` constructor.\n                  // If open phone keyboard association function, `CompositionEvent` will be triggered.\n                  if (!insertedText.length) {\n                    return\n                  }\n\n                  EDITOR_ON_COMPOSITION_TEXT.set(editor, [])\n\n                  const { selection } = editor\n\n                  insertedText.forEach(insertion => {\n                    const text = insertion.text.insertText\n                    const at = normalizeTextInsertionRange(\n                      editor,\n                      selection,\n                      insertion\n                    )\n                    Transforms.setSelection(editor, at)\n                    Editor.insertText(editor, text)\n                  })\n                }, RESOLVE_DELAY)\n              }\n            },\n            [attributes.onCompositionEnd]\n          )}\n          onCompositionUpdate={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionUpdate)\n              ) {\n                !state.isComposing && setIsComposing(true)\n                state.isComposing = true\n                IS_COMPOSING.set(editor, true)\n              }\n            },\n            [attributes.onCompositionUpdate]\n          )}\n          onCompositionStart={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionStart)\n              ) {\n                !state.isComposing && setIsComposing(true)\n                state.isComposing = true\n                IS_COMPOSING.set(editor, true)\n              }\n            },\n            [attributes.onCompositionStart]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              // this will make application/x-slate-fragment exist when onPaste attributes is passed\n              event.clipboardData = getClipboardData(event.clipboardData)\n              // This unfortunately needs to be handled with paste events instead.\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste) &&\n                !readOnly\n              ) {\n                event.preventDefault()\n                ReactEditor.insertData(editor, event.clipboardData)\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          {useChildren({\n            decorations,\n            node: editor,\n            renderElement,\n            renderPlaceholder,\n            renderLeaf,\n            selection: editor.selection,\n          })}\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react'\nimport { Editor } from 'slate'\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect'\n\nfunction isError(error: any): error is Error {\n  return error instanceof Error\n}\n\ntype EditorChangeHandler = (editor: Editor) => void\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */\n\nexport const SlateSelectorContext = createContext<{\n  getSlate: () => Editor\n  addEventListener: (callback: EditorChangeHandler) => () => void\n}>({} as any)\n\nconst refEquality = (a: any, b: any) => a === b\n\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */\nexport function useSlateSelector<T>(\n  selector: (editor: Editor) => T,\n  equalityFn: (a: T, b: T) => boolean = refEquality\n) {\n  const [, forceRender] = useReducer(s => s + 1, 0)\n  const context = useContext(SlateSelectorContext)\n  if (!context) {\n    throw new Error(\n      `The \\`useSlateSelector\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n  const { getSlate, addEventListener } = context\n\n  const latestSubscriptionCallbackError = useRef<Error | undefined>()\n  const latestSelector = useRef<(editor: Editor) => T>(() => null as any)\n  const latestSelectedState = useRef<T>((null as any) as T)\n  let selectedState: T\n\n  try {\n    if (\n      selector !== latestSelector.current ||\n      latestSubscriptionCallbackError.current\n    ) {\n      selectedState = selector(getSlate())\n    } else {\n      selectedState = latestSelectedState.current\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\n    }\n\n    throw err\n  }\n  useIsomorphicLayoutEffect(() => {\n    latestSelector.current = selector\n    latestSelectedState.current = selectedState\n    latestSubscriptionCallbackError.current = undefined\n  })\n\n  useIsomorphicLayoutEffect(\n    () => {\n      function checkForUpdates() {\n        try {\n          const newSelectedState = latestSelector.current(getSlate())\n\n          if (equalityFn(newSelectedState, latestSelectedState.current)) {\n            return\n          }\n\n          latestSelectedState.current = newSelectedState\n        } catch (err) {\n          // we ignore all errors here, since when the component\n          // is re-rendered, the selectors are called again, and\n          // will throw again, if neither props nor store state\n          // changed\n          latestSubscriptionCallbackError.current = err\n        }\n\n        forceRender()\n      }\n\n      const unsubscribe = addEventListener(checkForUpdates)\n\n      checkForUpdates()\n\n      return () => unsubscribe()\n    },\n    // don't rerender on equalityFn change since we want to be able to define it inline\n    [addEventListener, getSlate]\n  )\n\n  return selectedState\n}\n\n/**\n * Create selector context with editor updating on every editor change\n */\nexport function getSelectorContext(editor: Editor) {\n  const eventListeners = useRef<EditorChangeHandler[]>([]).current\n  const slateRef = useRef<{\n    editor: Editor\n  }>({\n    editor,\n  }).current\n  const onChange = useCallback((editor: Editor) => {\n    slateRef.editor = editor\n    eventListeners.forEach((listener: EditorChangeHandler) => listener(editor))\n  }, [])\n\n  const selectorContext = useMemo(() => {\n    return {\n      getSlate: () => slateRef.editor,\n      addEventListener: (callback: EditorChangeHandler) => {\n        eventListeners.push(callback)\n        return () => {\n          eventListeners.splice(eventListeners.indexOf(callback), 1)\n        }\n      },\n    }\n  }, [eventListeners, slateRef])\n  return { selectorContext, onChange }\n}\n","import React, { useMemo, useState, useCallback, useEffect, useRef } from 'react'\nimport { Editor, Node, Element, Descendant } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { EditorContext } from '../hooks/use-slate-static'\nimport { SlateContext } from '../hooks/use-slate'\nimport {\n  getSelectorContext,\n  SlateSelectorContext,\n} from '../hooks/use-slate-selector'\nimport { EDITOR_TO_ON_CHANGE } from '../utils/weak-maps'\nimport { IS_REACT_VERSION_17_OR_ABOVE } from '../utils/environment'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  value: Descendant[]\n  children: React.ReactNode\n  onChange?: (value: Descendant[]) => void\n}) => {\n  const { editor, children, onChange, value, ...rest } = props\n  const unmountRef = useRef(false)\n\n  const [context, setContext] = React.useState<[ReactEditor]>(() => {\n    if (!Node.isNodeList(value)) {\n      throw new Error(\n        `[Slate] value is invalid! Expected a list of elements` +\n          `but got: ${JSON.stringify(value)}`\n      )\n    }\n    if (!Editor.isEditor(editor)) {\n      throw new Error(\n        `[Slate] editor is invalid! you passed:` + `${JSON.stringify(editor)}`\n      )\n    }\n    editor.children = value\n    Object.assign(editor, rest)\n    return [editor]\n  })\n\n  const {\n    selectorContext,\n    onChange: handleSelectorChange,\n  } = getSelectorContext(editor)\n\n  const onContextChange = useCallback(() => {\n    if (onChange) {\n      onChange(editor.children)\n    }\n\n    setContext([editor])\n    handleSelectorChange(editor)\n  }, [onChange])\n\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n  useEffect(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {})\n      unmountRef.current = true\n    }\n  }, [])\n\n  const [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor))\n\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor))\n  })\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    if (IS_REACT_VERSION_17_OR_ABOVE) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn)\n      document.addEventListener('focusout', fn)\n      return () => {\n        document.removeEventListener('focusin', fn)\n        document.removeEventListener('focusout', fn)\n      }\n    } else {\n      document.addEventListener('focus', fn, true)\n      document.addEventListener('blur', fn, true)\n      return () => {\n        document.removeEventListener('focus', fn, true)\n        document.removeEventListener('blur', fn, true)\n      }\n    }\n  }, [])\n\n  return (\n    <SlateSelectorContext.Provider value={selectorContext}>\n      <SlateContext.Provider value={context}>\n        <EditorContext.Provider value={editor}>\n          <FocusedContext.Provider value={isFocused}>\n            {children}\n          </FocusedContext.Provider>\n        </EditorContext.Provider>\n      </SlateContext.Provider>\n    </SlateSelectorContext.Provider>\n  )\n}\n","import { useContext } from 'react'\n\nimport { EditorContext } from './use-slate-static'\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\n\nexport const useEditor = () => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useEditor\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","/**\n * Utilities for single-line deletion\n */\n\nimport { Range, Editor } from 'slate'\nimport { ReactEditor } from '..'\n\nconst doRectsIntersect = (rect: DOMRect, compareRect: DOMRect) => {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n\nconst areRangesSameLine = (\n  editor: ReactEditor,\n  range1: Range,\n  range2: Range\n) => {\n  const rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1)\n}\n\n/**\n * A helper utility that returns the end portion of a `Range`\n * which is located on a single line.\n *\n * @param {Editor} editor The editor object to compare against\n * @param {Range} parentRange The parent range to compare against\n * @returns {Range} A valid portion of the parentRange which is one a single line\n */\nexport const findCurrentLineRange = (\n  editor: ReactEditor,\n  parentRange: Range\n): Range => {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, { at: parentRange }))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    areRangesSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      areRangesSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary)\n}\n","import ReactDOM from 'react-dom'\nimport { Editor, Node, Path, Operation, Transforms, Range } from 'slate'\n\nimport { ReactEditor } from './react-editor'\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_KEY_TO_ELEMENT,\n  EDITOR_TO_ON_CHANGE,\n  NODE_TO_KEY,\n  EDITOR_TO_USER_SELECTION,\n} from '../utils/weak-maps'\nimport {\n  isDOMText,\n  getPlainText,\n  getSlateFragmentAttribute,\n} from '../utils/dom'\nimport { findCurrentLineRange } from '../utils/lines'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withReact = <T extends Editor>(editor: T) => {\n  const e = editor as T & ReactEditor\n  const { apply, onChange, deleteBackward } = e\n\n  // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to\n  // avoid collisions between editors in the DOM that share the same value.\n  EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap())\n\n  e.deleteBackward = unit => {\n    if (unit !== 'line') {\n      return deleteBackward(unit)\n    }\n\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      const parentBlockEntry = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: editor.selection,\n      })\n\n      if (parentBlockEntry) {\n        const [, parentBlockPath] = parentBlockEntry\n        const parentElementRange = Editor.range(\n          editor,\n          parentBlockPath,\n          editor.selection.anchor\n        )\n\n        const currentLineRange = findCurrentLineRange(e, parentElementRange)\n\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms.delete(editor, { at: currentLineRange })\n        }\n      }\n    }\n  }\n\n  // This attempts to reset the NODE_TO_KEY entry to the correct value\n  // as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry\n  e.apply = (op: Operation) => {\n    const matches: [Path, Key][] = []\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n      case 'split_node': {\n        matches.push(...getMatches(e, op.path))\n        break\n      }\n\n      case 'set_selection': {\n        // Selection was manually set, don't restore the user selection after the change.\n        EDITOR_TO_USER_SELECTION.get(editor)?.unref()\n        EDITOR_TO_USER_SELECTION.delete(editor)\n        break\n      }\n\n      case 'insert_node':\n      case 'remove_node': {\n        matches.push(...getMatches(e, Path.parent(op.path)))\n        break\n      }\n\n      case 'merge_node': {\n        const prevPath = Path.previous(op.path)\n        matches.push(...getMatches(e, prevPath))\n        break\n      }\n\n      case 'move_node': {\n        const commonPath = Path.common(\n          Path.parent(op.path),\n          Path.parent(op.newPath)\n        )\n        matches.push(...getMatches(e, commonPath))\n        break\n      }\n    }\n\n    apply(op)\n\n    for (const [path, key] of matches) {\n      const [node] = Editor.node(e, path)\n      NODE_TO_KEY.set(node, key)\n    }\n  }\n\n  e.setFragmentData = (data: Pick<DataTransfer, 'getData' | 'setData'>) => {\n    const { selection } = e\n\n    if (!selection) {\n      return\n    }\n\n    const [start, end] = Range.edges(selection)\n    const startVoid = Editor.void(e, { at: start.path })\n    const endVoid = Editor.void(e, { at: end.path })\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return\n    }\n\n    // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n    const domRange = ReactEditor.toDOMRange(e, selection)\n    let contents = domRange.cloneContents()\n    let attach = contents.childNodes[0] as HTMLElement\n\n    // Make sure attach is non-empty, since empty nodes will not get copied.\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node as HTMLElement\n      }\n    })\n\n    // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n    if (endVoid) {\n      const [voidNode] = endVoid\n      const r = domRange.cloneRange()\n      const domNode = ReactEditor.toDOMNode(e, voidNode)\n      r.setEndAfter(domNode)\n      contents = r.cloneContents()\n    }\n\n    // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]')! as HTMLElement\n    }\n\n    // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n      zw => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      }\n    )\n\n    // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n    if (isDOMText(attach)) {\n      const span = attach.ownerDocument.createElement('span')\n      // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n      span.style.whiteSpace = 'pre'\n      span.appendChild(attach)\n      contents.appendChild(span)\n      attach = span\n    }\n\n    const fragment = e.getFragment()\n    const string = JSON.stringify(fragment)\n    const encoded = window.btoa(encodeURIComponent(string))\n    attach.setAttribute('data-slate-fragment', encoded)\n    data.setData('application/x-slate-fragment', encoded)\n\n    // Add the content to a <div> so that we can get its inner HTML.\n    const div = contents.ownerDocument.createElement('div')\n    div.appendChild(contents)\n    div.setAttribute('hidden', 'true')\n    contents.ownerDocument.body.appendChild(div)\n    data.setData('text/html', div.innerHTML)\n    data.setData('text/plain', getPlainText(div))\n    contents.ownerDocument.body.removeChild(div)\n    return data\n  }\n\n  e.insertData = (data: DataTransfer) => {\n    if (!e.insertFragmentData(data)) {\n      e.insertTextData(data)\n    }\n  }\n\n  e.insertFragmentData = (data: DataTransfer): boolean => {\n    /**\n     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment\n     */\n    const fragment =\n      data.getData('application/x-slate-fragment') ||\n      getSlateFragmentAttribute(data)\n\n    if (fragment) {\n      const decoded = decodeURIComponent(window.atob(fragment))\n      const parsed = JSON.parse(decoded) as Node[]\n      e.insertFragment(parsed)\n      return true\n    }\n    return false\n  }\n\n  e.insertTextData = (data: DataTransfer): boolean => {\n    const text = data.getData('text/plain')\n\n    if (text) {\n      const lines = text.split(/\\r\\n|\\r|\\n/)\n      let split = false\n\n      for (const line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, { always: true })\n        }\n\n        e.insertText(line)\n        split = true\n      }\n      return true\n    }\n    return false\n  }\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      const onContextChange = EDITOR_TO_ON_CHANGE.get(e)\n\n      if (onContextChange) {\n        onContextChange()\n      }\n\n      onChange()\n    })\n  }\n\n  return e\n}\n\nconst getMatches = (e: Editor, path: Path) => {\n  const matches: [Path, Key][] = []\n  for (const [n, p] of Editor.levels(e, { at: path })) {\n    const key = ReactEditor.findKey(e, n)\n    matches.push([p, key])\n  }\n  return matches\n}\n","// Components\n// Environment-dependent Editable\nimport { Editable as DefaultEditable } from './components/editable'\nimport { AndroidEditable } from './components/android/android-editable'\nimport { IS_ANDROID } from './utils/environment'\n\nexport const Editable = IS_ANDROID ? AndroidEditable : DefaultEditable\nexport {\n  Editable as DefaultEditable,\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n  DefaultPlaceholder,\n} from './components/editable'\nexport { AndroidEditable } from './components/android/android-editable'\nexport { DefaultElement } from './components/element'\nexport { DefaultLeaf } from './components/leaf'\nexport { Slate } from './components/slate'\n\n// Hooks\nexport { useEditor } from './hooks/use-editor'\nexport { useSlateStatic } from './hooks/use-slate-static'\nexport { useFocused } from './hooks/use-focused'\nexport { useReadOnly } from './hooks/use-read-only'\nexport { useSelected } from './hooks/use-selected'\nexport { useSlate } from './hooks/use-slate'\nexport { useSlateSelector } from './hooks/use-slate-selector'\n\n// Plugin\nexport { ReactEditor } from './plugin/react-editor'\nexport { withReact } from './plugin/with-react'\n"]},"metadata":{},"sourceType":"module"}