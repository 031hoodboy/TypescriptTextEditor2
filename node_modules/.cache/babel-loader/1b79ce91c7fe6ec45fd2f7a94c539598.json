{"ast":null,"code":"import { merge } from 'uinix-fp';\nimport { createTheme as createUinixUiTheme } from 'uinix-theme';\nexport { createConfig, createIcons, createStyles, createSystem, createTheme };\n/**\n * @typedef {import('../types.js').Config} Config\n * @typedef {import('../types.js').System} System\n * @typedef {import('../types.js').SystemIcons} SystemIcons\n * @typedef {import('../types.js').SystemStyles} SystemStyles\n */\n\n/**\n * Creates configuration for the system and components.\n *\n * @param {Partial<Config>} [config]\n * @returns {Config}\n */\n\nvar createConfig = function createConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return merge({\n    elementShorthandPropsMapping: {},\n    elementStyles: [],\n    enableAtomicCss: false,\n    responsiveCssProperties: []\n  })(config);\n};\n/**\n * Creates and defines all SVG icons for the system.\n *\n * @param {SystemIcons} [icons]\n * @returns {SystemIcons}\n */\n\n\nvar createIcons = function createIcons() {\n  var icons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return icons;\n};\n/**\n * Creates all styles for the system.\n *\n * @param {Partial<SystemStyles>} [styles]\n * @returns {SystemStyles}\n */\n\n\nvar createStyles = function createStyles() {\n  var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return merge({\n    breakpoints: [],\n    global: {},\n    typography: {\n      fontFaces: {},\n      global: {},\n      variants: {}\n    },\n    variants: {}\n  })(styles);\n};\n/**\n * Creates the source of truth for the `icons`, `styles`, `theme` spec.\n *\n * @param {Partial<System>} [system]\n * @returns {System}\n */\n\n\nvar createSystem = function createSystem() {\n  var system = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var icons = createIcons(system.icons);\n  var styles = createStyles(system.styles);\n  var theme = createTheme(system.theme);\n  return {\n    icons: icons,\n    styles: styles,\n    theme: theme\n  };\n};\n\nvar createTheme = createUinixUiTheme;","map":{"version":3,"names":["merge","createTheme","createUinixUiTheme","createConfig","createIcons","createStyles","createSystem","config","elementShorthandPropsMapping","elementStyles","enableAtomicCss","responsiveCssProperties","icons","styles","breakpoints","global","typography","fontFaces","variants","system","theme"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/uinix-ui/lib/system/create.js"],"sourcesContent":["import {merge} from 'uinix-fp';\nimport {createTheme as createUinixUiTheme} from 'uinix-theme';\n\nexport {createConfig, createIcons, createStyles, createSystem, createTheme};\n\n/**\n * @typedef {import('../types.js').Config} Config\n * @typedef {import('../types.js').System} System\n * @typedef {import('../types.js').SystemIcons} SystemIcons\n * @typedef {import('../types.js').SystemStyles} SystemStyles\n */\n\n/**\n * Creates configuration for the system and components.\n *\n * @param {Partial<Config>} [config]\n * @returns {Config}\n */\nconst createConfig = (config = {}) =>\n  merge({\n    elementShorthandPropsMapping: {},\n    elementStyles: [],\n    enableAtomicCss: false,\n    responsiveCssProperties: [],\n  })(config);\n\n/**\n * Creates and defines all SVG icons for the system.\n *\n * @param {SystemIcons} [icons]\n * @returns {SystemIcons}\n */\nconst createIcons = (icons = {}) => icons;\n\n/**\n * Creates all styles for the system.\n *\n * @param {Partial<SystemStyles>} [styles]\n * @returns {SystemStyles}\n */\nconst createStyles = (styles = {}) =>\n  merge({\n    breakpoints: [],\n    global: {},\n    typography: {\n      fontFaces: {},\n      global: {},\n      variants: {},\n    },\n    variants: {},\n  })(styles);\n\n/**\n * Creates the source of truth for the `icons`, `styles`, `theme` spec.\n *\n * @param {Partial<System>} [system]\n * @returns {System}\n */\nconst createSystem = (system = {}) => {\n  const icons = createIcons(system.icons);\n  const styles = createStyles(system.styles);\n  const theme = createTheme(system.theme);\n  return {\n    icons,\n    styles,\n    theme,\n  };\n};\n\nconst createTheme = createUinixUiTheme;\n"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,UAApB;AACA,SAAQC,WAAW,IAAIC,kBAAvB,QAAgD,aAAhD;AAEA,SAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,YAAjD,EAA+DL,WAA/D;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAME,YAAY,GAAG,SAAfA,YAAe;EAAA,IAACI,MAAD,uEAAU,EAAV;EAAA,OACnBP,KAAK,CAAC;IACJQ,4BAA4B,EAAE,EAD1B;IAEJC,aAAa,EAAE,EAFX;IAGJC,eAAe,EAAE,KAHb;IAIJC,uBAAuB,EAAE;EAJrB,CAAD,CAAL,CAKGJ,MALH,CADmB;AAAA,CAArB;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMH,WAAW,GAAG,SAAdA,WAAc;EAAA,IAACQ,KAAD,uEAAS,EAAT;EAAA,OAAgBA,KAAhB;AAAA,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMP,YAAY,GAAG,SAAfA,YAAe;EAAA,IAACQ,MAAD,uEAAU,EAAV;EAAA,OACnBb,KAAK,CAAC;IACJc,WAAW,EAAE,EADT;IAEJC,MAAM,EAAE,EAFJ;IAGJC,UAAU,EAAE;MACVC,SAAS,EAAE,EADD;MAEVF,MAAM,EAAE,EAFE;MAGVG,QAAQ,EAAE;IAHA,CAHR;IAQJA,QAAQ,EAAE;EARN,CAAD,CAAL,CASGL,MATH,CADmB;AAAA,CAArB;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMP,YAAY,GAAG,SAAfA,YAAe,GAAiB;EAAA,IAAhBa,MAAgB,uEAAP,EAAO;EACpC,IAAMP,KAAK,GAAGR,WAAW,CAACe,MAAM,CAACP,KAAR,CAAzB;EACA,IAAMC,MAAM,GAAGR,YAAY,CAACc,MAAM,CAACN,MAAR,CAA3B;EACA,IAAMO,KAAK,GAAGnB,WAAW,CAACkB,MAAM,CAACC,KAAR,CAAzB;EACA,OAAO;IACLR,KAAK,EAALA,KADK;IAELC,MAAM,EAANA,MAFK;IAGLO,KAAK,EAALA;EAHK,CAAP;AAKD,CATD;;AAWA,IAAMnB,WAAW,GAAGC,kBAApB"},"metadata":{},"sourceType":"module"}