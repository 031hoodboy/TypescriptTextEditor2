{"ast":null,"code":"// import { useEffect, useRef } from \"react\";\n// import { Editor, Range } from \"slate\";\n// import { ReactEditor } from \"slate-react\";\n// import { insertMention } from \"./utils\";\n// export const useMatchMention = ({ editor, setSearch, setTarget }) => {\n//   useEffect(() => {\n//     const { selection } = editor;\n//     if (selection && Range.isCollapsed(selection)) {\n//       const [start] = Range.edges(selection);\n//       const wordBefore = Editor.before(editor, start, { unit: \"word\" });\n//       const before = wordBefore && Editor.before(editor, wordBefore);\n//       const beforeRange = before && Editor.range(editor, before, start);\n//       const beforeText = beforeRange && Editor.string(editor, beforeRange);\n//       const beforeMatch = beforeText && beforeText.match(/^@(\\w+)$/);\n//       const after = Editor.after(editor, start);\n//       const afterRange = Editor.range(editor, start, after);\n//       const afterText = Editor.string(editor, afterRange);\n//       const afterMatch = afterText.match(/^(\\s|$)/);\n//       if (beforeMatch && afterMatch) {\n//         setTarget(beforeRange);\n//         setSearch(beforeMatch[1]);\n//         return;\n//       }\n//     }\n//     setTarget(null);\n//   });\n// };\n// export const useNavigateMention = ({\n//   editor,\n//   index,\n//   suggestions,\n//   target,\n//   setIndex,\n//   setTarget,\n// }) => {\n//   useEffect(() => {\n//     const handleNavigateMention = (event) => {\n//       if (target) {\n//         switch (event.key) {\n//           case \"ArrowDown\":\n//             event.preventDefault();\n//             const prevIndex = index >= suggestions.length - 1 ? 0 : index + 1;\n//             setIndex(prevIndex);\n//             break;\n//           case \"ArrowUp\":\n//             event.preventDefault();\n//             const nextIndex = index <= 0 ? suggestions.length - 1 : index - 1;\n//             setIndex(nextIndex);\n//             break;\n//           case \"Tab\":\n//           case \"Enter\": {\n//             event.preventDefault();\n//             const entity = { id: suggestions[index], type: \"user\" }; // TODO: derive from upstream\n//             insertMention(editor, target, suggestions[index], entity);\n//             setIndex(0);\n//             setTarget(null);\n//             break;\n//           }\n//           case \"Escape\":\n//             event.preventDefault();\n//             setIndex(0);\n//             setTarget(null);\n//             break;\n//         }\n//       }\n//     };\n//     document.addEventListener(\"keydown\", handleNavigateMention);\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleNavigateMention);\n//     };\n//   }, [editor, index, suggestions, target, setIndex, setTarget]);\n// };\n// export const usePopover = ({ count, editor, index, search, target }) => {\n//   const popoverRef = useRef<HTMLDivElement>(null);\n//   useEffect(() => {\n//     if (target && count > 0) {\n//       const element = popoverRef.current;\n//       if (element) {\n//         const domRange = ReactEditor.toDOMRange(editor, target);\n//         const rect = domRange.getBoundingClientRect();\n//         element.style.top = `${rect.top + window.pageYOffset + 24}px`;\n//         element.style.left = `${rect.left + window.pageXOffset}px`;\n//       }\n//     }\n//   }, [count, editor, index, popoverRef, search, target]);\n//   return popoverRef;\n// };","map":{"version":3,"names":[],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/src/TextEditor/mention/hooks.ts"],"sourcesContent":["// import { useEffect, useRef } from \"react\";\n// import { Editor, Range } from \"slate\";\n// import { ReactEditor } from \"slate-react\";\n\n// import { insertMention } from \"./utils\";\n\n// export const useMatchMention = ({ editor, setSearch, setTarget }) => {\n//   useEffect(() => {\n//     const { selection } = editor;\n\n//     if (selection && Range.isCollapsed(selection)) {\n//       const [start] = Range.edges(selection);\n//       const wordBefore = Editor.before(editor, start, { unit: \"word\" });\n//       const before = wordBefore && Editor.before(editor, wordBefore);\n//       const beforeRange = before && Editor.range(editor, before, start);\n//       const beforeText = beforeRange && Editor.string(editor, beforeRange);\n//       const beforeMatch = beforeText && beforeText.match(/^@(\\w+)$/);\n//       const after = Editor.after(editor, start);\n//       const afterRange = Editor.range(editor, start, after);\n//       const afterText = Editor.string(editor, afterRange);\n//       const afterMatch = afterText.match(/^(\\s|$)/);\n\n//       if (beforeMatch && afterMatch) {\n//         setTarget(beforeRange);\n//         setSearch(beforeMatch[1]);\n//         return;\n//       }\n//     }\n//     setTarget(null);\n//   });\n// };\n\n// export const useNavigateMention = ({\n//   editor,\n//   index,\n//   suggestions,\n//   target,\n//   setIndex,\n//   setTarget,\n// }) => {\n//   useEffect(() => {\n//     const handleNavigateMention = (event) => {\n//       if (target) {\n//         switch (event.key) {\n//           case \"ArrowDown\":\n//             event.preventDefault();\n//             const prevIndex = index >= suggestions.length - 1 ? 0 : index + 1;\n//             setIndex(prevIndex);\n//             break;\n//           case \"ArrowUp\":\n//             event.preventDefault();\n//             const nextIndex = index <= 0 ? suggestions.length - 1 : index - 1;\n//             setIndex(nextIndex);\n//             break;\n//           case \"Tab\":\n//           case \"Enter\": {\n//             event.preventDefault();\n//             const entity = { id: suggestions[index], type: \"user\" }; // TODO: derive from upstream\n//             insertMention(editor, target, suggestions[index], entity);\n//             setIndex(0);\n//             setTarget(null);\n//             break;\n//           }\n//           case \"Escape\":\n//             event.preventDefault();\n//             setIndex(0);\n//             setTarget(null);\n//             break;\n//         }\n//       }\n//     };\n\n//     document.addEventListener(\"keydown\", handleNavigateMention);\n\n//     return () => {\n//       document.removeEventListener(\"keydown\", handleNavigateMention);\n//     };\n//   }, [editor, index, suggestions, target, setIndex, setTarget]);\n// };\n\n// export const usePopover = ({ count, editor, index, search, target }) => {\n//   const popoverRef = useRef<HTMLDivElement>(null);\n\n//   useEffect(() => {\n//     if (target && count > 0) {\n//       const element = popoverRef.current;\n//       if (element) {\n//         const domRange = ReactEditor.toDOMRange(editor, target);\n//         const rect = domRange.getBoundingClientRect();\n//         element.style.top = `${rect.top + window.pageYOffset + 24}px`;\n//         element.style.left = `${rect.left + window.pageXOffset}px`;\n//       }\n//     }\n//   }, [count, editor, index, popoverRef, search, target]);\n\n//   return popoverRef;\n// };\n"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}