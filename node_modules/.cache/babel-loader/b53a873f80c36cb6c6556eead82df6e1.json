{"ast":null,"code":"import _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/src/TextEditor/mention/MentionSuggestions.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { memo, useState } from \"react\";\nimport { useSlate } from \"slate-react\";\nimport { MenuOption, Portal } from \"../../ui\";\nimport { useMatchMention, useNavigateMention, usePopover } from \"./hooks\";\nimport { insertMention } from \"./utils\"; // TODO: Refactor to support async + options-based API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var MentionSuggestions = /*#__PURE__*/memo(_c = _s(function (_ref) {\n  _s();\n\n  var mentions = _ref.mentions;\n  var editor = useSlate();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      search = _useState4[0],\n      setSearch = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      target = _useState6[0],\n      setTarget = _useState6[1];\n\n  var suggestions = (search ? mentions.filter(function (mention) {\n    return mention.toLowerCase().startsWith(search.toLowerCase());\n  }) : mentions).slice(0, 10);\n  var popoverRef = usePopover({\n    count: suggestions.length,\n    editor: editor,\n    index: index,\n    search: search,\n    target: target\n  });\n  useNavigateMention({\n    editor: editor,\n    index: index,\n    suggestions: suggestions,\n    target: target,\n    setIndex: setIndex,\n    setTarget: setTarget\n  });\n  useMatchMention({\n    editor: editor,\n    setSearch: setSearch,\n    setTarget: setTarget\n  });\n\n  var handleSelectSuggestion = function handleSelectSuggestion(suggestion) {\n    return function () {\n      var entity = {\n        id: suggestion,\n        type: \"user\"\n      }; // TODO: derive this from upstream\n\n      insertMention(editor, target, suggestion, entity);\n    };\n  };\n\n  if (!target || suggestions.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Portal, {\n    children: suggestions.map(function (suggestion, i) {\n      return /*#__PURE__*/_jsxDEV(MenuOption, {\n        isFocused: i === index,\n        option: {\n          label: suggestion,\n          value: suggestion\n        },\n        onClick: handleSelectSuggestion(suggestion)\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, _this);\n}, \"0SID4UWkc1Ddk1FfQw6Dj99da3Y=\", false, function () {\n  return [useSlate, usePopover, useNavigateMention, useMatchMention];\n}));\n_c2 = MentionSuggestions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MentionSuggestions$memo\");\n$RefreshReg$(_c2, \"MentionSuggestions\");","map":{"version":3,"names":["React","memo","useState","useSlate","MenuOption","Portal","useMatchMention","useNavigateMention","usePopover","insertMention","MentionSuggestions","mentions","editor","index","setIndex","search","setSearch","target","setTarget","suggestions","filter","mention","toLowerCase","startsWith","slice","popoverRef","count","length","handleSelectSuggestion","suggestion","entity","id","type","map","i","label","value"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/src/TextEditor/mention/MentionSuggestions.tsx"],"sourcesContent":["import React, { memo, useState } from \"react\";\nimport { Range } from \"slate\";\nimport { useSlate } from \"slate-react\";\n\nimport { MenuOption, Portal } from \"../../ui\";\nimport { useMatchMention, useNavigateMention, usePopover } from \"./hooks\";\nimport { insertMention } from \"./utils\";\n\n// TODO: Refactor to support async + options-based API\nexport const MentionSuggestions = memo(({ mentions }) => {\n  const editor = useSlate();\n  const [index, setIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n  const [target, setTarget] = useState<Range | null>(null);\n\n  const suggestions = (\n    search\n      ? mentions.filter((mention) =>\n          mention.toLowerCase().startsWith(search.toLowerCase())\n        )\n      : mentions\n  ).slice(0, 10);\n\n  const popoverRef = usePopover({\n    count: suggestions.length,\n    editor,\n    index,\n    search,\n    target,\n  });\n\n  useNavigateMention({\n    editor,\n    index,\n    suggestions,\n    target,\n    setIndex,\n    setTarget,\n  });\n\n  useMatchMention({ editor, setSearch, setTarget });\n\n  const handleSelectSuggestion = (suggestion) => () => {\n    const entity = { id: suggestion, type: \"user\" }; // TODO: derive this from upstream\n    insertMention(editor, target, suggestion, entity);\n  };\n\n  if (!target || suggestions.length === 0) {\n    return null;\n  }\n\n  return (\n    <Portal>\n      {/* <div\n        ref={popoverRef}\n        style={{\n          top: '-9999px',\n          left: '-9999px',\n          position: 'absolute',\n          zIndex: 1,\n          padding: '3px',\n          background: 'white',\n          borderRadius: '4px',\n          boxShadow: '0 1px 5px rgba(0,0,0,.2)',\n        }}> */}\n      {suggestions.map((suggestion, i) => (\n        <MenuOption\n          key={suggestion}\n          isFocused={i === index}\n          option={{ label: suggestion, value: suggestion }}\n          onClick={handleSelectSuggestion(suggestion)}\n        />\n      ))}\n      {/* </div> */}\n    </Portal>\n  );\n});\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,UAAnC;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,UAA9C,QAAgE,SAAhE;AACA,SAASC,aAAT,QAA8B,SAA9B,C,CAEA;;;AACA,OAAO,IAAMC,kBAAkB,gBAAGT,IAAI,SAAC,gBAAkB;EAAA;;EAAA,IAAfU,QAAe,QAAfA,QAAe;EACvD,IAAMC,MAAM,GAAGT,QAAQ,EAAvB;;EACA,gBAA0BD,QAAQ,CAAC,CAAD,CAAlC;EAAA;EAAA,IAAOW,KAAP;EAAA,IAAcC,QAAd;;EACA,iBAA4BZ,QAAQ,CAAC,EAAD,CAApC;EAAA;EAAA,IAAOa,MAAP;EAAA,IAAeC,SAAf;;EACA,iBAA4Bd,QAAQ,CAAe,IAAf,CAApC;EAAA;EAAA,IAAOe,MAAP;EAAA,IAAeC,SAAf;;EAEA,IAAMC,WAAW,GAAG,CAClBJ,MAAM,GACFJ,QAAQ,CAACS,MAAT,CAAgB,UAACC,OAAD;IAAA,OACdA,OAAO,CAACC,WAAR,GAAsBC,UAAtB,CAAiCR,MAAM,CAACO,WAAP,EAAjC,CADc;EAAA,CAAhB,CADE,GAIFX,QALc,EAMlBa,KANkB,CAMZ,CANY,EAMT,EANS,CAApB;EAQA,IAAMC,UAAU,GAAGjB,UAAU,CAAC;IAC5BkB,KAAK,EAAEP,WAAW,CAACQ,MADS;IAE5Bf,MAAM,EAANA,MAF4B;IAG5BC,KAAK,EAALA,KAH4B;IAI5BE,MAAM,EAANA,MAJ4B;IAK5BE,MAAM,EAANA;EAL4B,CAAD,CAA7B;EAQAV,kBAAkB,CAAC;IACjBK,MAAM,EAANA,MADiB;IAEjBC,KAAK,EAALA,KAFiB;IAGjBM,WAAW,EAAXA,WAHiB;IAIjBF,MAAM,EAANA,MAJiB;IAKjBH,QAAQ,EAARA,QALiB;IAMjBI,SAAS,EAATA;EANiB,CAAD,CAAlB;EASAZ,eAAe,CAAC;IAAEM,MAAM,EAANA,MAAF;IAAUI,SAAS,EAATA,SAAV;IAAqBE,SAAS,EAATA;EAArB,CAAD,CAAf;;EAEA,IAAMU,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,UAAD;IAAA,OAAgB,YAAM;MACnD,IAAMC,MAAM,GAAG;QAAEC,EAAE,EAAEF,UAAN;QAAkBG,IAAI,EAAE;MAAxB,CAAf,CADmD,CACF;;MACjDvB,aAAa,CAACG,MAAD,EAASK,MAAT,EAAiBY,UAAjB,EAA6BC,MAA7B,CAAb;IACD,CAH8B;EAAA,CAA/B;;EAKA,IAAI,CAACb,MAAD,IAAWE,WAAW,CAACQ,MAAZ,KAAuB,CAAtC,EAAyC;IACvC,OAAO,IAAP;EACD;;EAED,oBACE,QAAC,MAAD;IAAA,UAaGR,WAAW,CAACc,GAAZ,CAAgB,UAACJ,UAAD,EAAaK,CAAb;MAAA,oBACf,QAAC,UAAD;QAEE,SAAS,EAAEA,CAAC,KAAKrB,KAFnB;QAGE,MAAM,EAAE;UAAEsB,KAAK,EAAEN,UAAT;UAAqBO,KAAK,EAAEP;QAA5B,CAHV;QAIE,OAAO,EAAED,sBAAsB,CAACC,UAAD;MAJjC,GACOA,UADP;QAAA;QAAA;QAAA;MAAA,SADe;IAAA,CAAhB;EAbH;IAAA;IAAA;IAAA;EAAA,SADF;AAyBD,CAnEqC;EAAA,QACrB1B,QADqB,EAcjBK,UAdiB,EAsBpCD,kBAtBoC,EA+BpCD,eA/BoC;AAAA,GAA/B;MAAMI,kB"},"metadata":{},"sourceType":"module"}