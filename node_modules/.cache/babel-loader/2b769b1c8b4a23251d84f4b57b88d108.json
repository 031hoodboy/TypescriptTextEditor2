{"ast":null,"code":"import _objectSpread from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"as\", \"children\", \"className\", \"styleProps\", \"styles\", \"variant\"];\nimport { useConfig, useCss, useH, useVariant } from '../system/hooks.js';\nimport { mergeClassNames } from '../util/merge-class-names.js';\nimport { mergeStyles } from '../util/merge-styles.js';\nimport { resolveShorthandProps } from '../util/resolve-shorthand-props.js';\nexport { Element };\n/**\n * @typedef {import('../types.js').AnyProps} AnyProps\n * @typedef {import('../types.js').CustomElement} CustomElement\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Styles} Styles\n *\n * @typedef ElementProps\n * @property {string | CustomElement} [as=\"div\"]\n *    Renders `Element` as the specified HTML element or `CustomElement`.\n *    Renders as a `HTMLDivElement` by default.\n * @property {string} [variant=\"\"]\n *    A variant is a property path that accesses a style in\n *    `system.styles.variants[variant]`.\n * @property {AnyProps} [styleProps]\n *    Style props are used by style functions provided in the `styles` prop.\n * @property {Styles} [styles]\n *    Style objects or style functions can be provided as a single value or in\n *    array-form for composition.\n */\n\n/**\n * `Element` is the elementary building block in uinix-ui.\n *\n * It implements the other uinix-ui components (`Layout`, `Icon`, `Text`).\n * It functions essentially as a passthrough to a `HTMLElement`, with a minimal\n * API of just a few additional props that allow access to the UI system.\n *\n * @param {AnyProps & ElementProps} props\n * @returns {ReturnType<H>}\n */\n\nvar Element = function Element(props) {\n  var _props$as = props.as,\n      as = _props$as === void 0 ? 'div' : _props$as,\n      children = props.children,\n      _props$className = props.className,\n      className = _props$className === void 0 ? '' : _props$className,\n      styleProps = props.styleProps,\n      styles = props.styles,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? '' : _props$variant,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var config = useConfig();\n  var elementCss = useCss(props);\n  var styleCss = useCss(styleProps);\n  var h = useH();\n  var variantStyle = useVariant(variant);\n  var elementShorthandPropsMapping = config.elementShorthandPropsMapping,\n      elementStyles = config.elementStyles;\n\n  var _resolveShorthandProp = resolveShorthandProps(elementShorthandPropsMapping)(restProps),\n      nonShorthandProps = _resolveShorthandProp.nonShorthandProps,\n      shorthandPropsStyle = _resolveShorthandProp.shorthandPropsStyle;\n\n  var mergedStyles = mergeStyles([styles, shorthandPropsStyle, variantStyle]);\n  var mergedClassNames = mergeClassNames([elementCss(elementStyles), styleCss(mergedStyles), className]);\n\n  var elementProps = _objectSpread(_objectSpread({}, nonShorthandProps), {}, {\n    className: mergedClassNames\n  });\n\n  return typeof as === 'string' ? h(as, elementProps, children) : as(elementProps, children);\n};","map":{"version":3,"names":["useConfig","useCss","useH","useVariant","mergeClassNames","mergeStyles","resolveShorthandProps","Element","props","as","children","className","styleProps","styles","variant","restProps","config","elementCss","styleCss","h","variantStyle","elementShorthandPropsMapping","elementStyles","nonShorthandProps","shorthandPropsStyle","mergedStyles","mergedClassNames","elementProps"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/uinix-ui/lib/components/element.js"],"sourcesContent":["import {useConfig, useCss, useH, useVariant} from '../system/hooks.js';\nimport {mergeClassNames} from '../util/merge-class-names.js';\nimport {mergeStyles} from '../util/merge-styles.js';\nimport {resolveShorthandProps} from '../util/resolve-shorthand-props.js';\n\nexport {Element};\n\n/**\n * @typedef {import('../types.js').AnyProps} AnyProps\n * @typedef {import('../types.js').CustomElement} CustomElement\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Styles} Styles\n *\n * @typedef ElementProps\n * @property {string | CustomElement} [as=\"div\"]\n *    Renders `Element` as the specified HTML element or `CustomElement`.\n *    Renders as a `HTMLDivElement` by default.\n * @property {string} [variant=\"\"]\n *    A variant is a property path that accesses a style in\n *    `system.styles.variants[variant]`.\n * @property {AnyProps} [styleProps]\n *    Style props are used by style functions provided in the `styles` prop.\n * @property {Styles} [styles]\n *    Style objects or style functions can be provided as a single value or in\n *    array-form for composition.\n */\n\n/**\n * `Element` is the elementary building block in uinix-ui.\n *\n * It implements the other uinix-ui components (`Layout`, `Icon`, `Text`).\n * It functions essentially as a passthrough to a `HTMLElement`, with a minimal\n * API of just a few additional props that allow access to the UI system.\n *\n * @param {AnyProps & ElementProps} props\n * @returns {ReturnType<H>}\n */\nconst Element = (props) => {\n  const {\n    as = 'div',\n    children,\n    className = '',\n    styleProps,\n    styles,\n    variant = '',\n    ...restProps\n  } = props;\n\n  const config = useConfig();\n  const elementCss = useCss(props);\n  const styleCss = useCss(styleProps);\n  const h = useH();\n  const variantStyle = useVariant(variant);\n\n  const {elementShorthandPropsMapping, elementStyles} = config;\n  const {nonShorthandProps, shorthandPropsStyle} = resolveShorthandProps(\n    elementShorthandPropsMapping,\n  )(restProps);\n\n  const mergedStyles = mergeStyles([styles, shorthandPropsStyle, variantStyle]);\n  const mergedClassNames = mergeClassNames([\n    elementCss(elementStyles),\n    styleCss(mergedStyles),\n    className,\n  ]);\n\n  const elementProps = {\n    ...nonShorthandProps,\n    className: mergedClassNames,\n  };\n\n  return typeof as === 'string'\n    ? h(as, elementProps, children)\n    : as(elementProps, children);\n};\n"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC,UAAjC,QAAkD,oBAAlD;AACA,SAAQC,eAAR,QAA8B,8BAA9B;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,SAAQC,qBAAR,QAAoC,oCAApC;AAEA,SAAQC,OAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;EACzB,gBAQIA,KARJ,CACEC,EADF;EAAA,IACEA,EADF,0BACO,KADP;EAAA,IAEEC,QAFF,GAQIF,KARJ,CAEEE,QAFF;EAAA,uBAQIF,KARJ,CAGEG,SAHF;EAAA,IAGEA,SAHF,iCAGc,EAHd;EAAA,IAIEC,UAJF,GAQIJ,KARJ,CAIEI,UAJF;EAAA,IAKEC,MALF,GAQIL,KARJ,CAKEK,MALF;EAAA,qBAQIL,KARJ,CAMEM,OANF;EAAA,IAMEA,OANF,+BAMY,EANZ;EAAA,IAOKC,SAPL,4BAQIP,KARJ;;EAUA,IAAMQ,MAAM,GAAGhB,SAAS,EAAxB;EACA,IAAMiB,UAAU,GAAGhB,MAAM,CAACO,KAAD,CAAzB;EACA,IAAMU,QAAQ,GAAGjB,MAAM,CAACW,UAAD,CAAvB;EACA,IAAMO,CAAC,GAAGjB,IAAI,EAAd;EACA,IAAMkB,YAAY,GAAGjB,UAAU,CAACW,OAAD,CAA/B;EAEA,IAAOO,4BAAP,GAAsDL,MAAtD,CAAOK,4BAAP;EAAA,IAAqCC,aAArC,GAAsDN,MAAtD,CAAqCM,aAArC;;EACA,4BAAiDhB,qBAAqB,CACpEe,4BADoE,CAArB,CAE/CN,SAF+C,CAAjD;EAAA,IAAOQ,iBAAP,yBAAOA,iBAAP;EAAA,IAA0BC,mBAA1B,yBAA0BA,mBAA1B;;EAIA,IAAMC,YAAY,GAAGpB,WAAW,CAAC,CAACQ,MAAD,EAASW,mBAAT,EAA8BJ,YAA9B,CAAD,CAAhC;EACA,IAAMM,gBAAgB,GAAGtB,eAAe,CAAC,CACvCa,UAAU,CAACK,aAAD,CAD6B,EAEvCJ,QAAQ,CAACO,YAAD,CAF+B,EAGvCd,SAHuC,CAAD,CAAxC;;EAMA,IAAMgB,YAAY,mCACbJ,iBADa;IAEhBZ,SAAS,EAAEe;EAFK,EAAlB;;EAKA,OAAO,OAAOjB,EAAP,KAAc,QAAd,GACHU,CAAC,CAACV,EAAD,EAAKkB,YAAL,EAAmBjB,QAAnB,CADE,GAEHD,EAAE,CAACkB,YAAD,EAAejB,QAAf,CAFN;AAGD,CArCD"},"metadata":{},"sourceType":"module"}