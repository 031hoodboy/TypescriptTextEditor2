{"ast":null,"code":"import _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { i } from './i.js';\nimport { isPlainObject } from './is-plain-object.js';\nexport { filter };\n/**\n * Filters an array or object by their values using the provided predicate.\n *\n * The identity function is used as the default 'truthy' predicate.\n *\n * @template A\n * @param {(value: A) => A | boolean} predicate predicate to run on a value\n * @returns {(x: Record<string, A> | A[]) => Partial<Record<string, A>> | A[]}\n */\n\nvar filter = function filter() {\n  var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : i;\n  return function (x) {\n    if (isPlainObject(x)) {\n      return Object.fromEntries(Object.entries(x).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            _ = _ref2[0],\n            value = _ref2[1];\n\n        return predicate(value);\n      }));\n    }\n\n    if (Array.isArray(x)) {\n      return x.filter(predicate);\n    }\n\n    return x;\n  };\n};","map":{"version":3,"names":["i","isPlainObject","filter","predicate","x","Object","fromEntries","entries","_","value","Array","isArray"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/uinix-fp/lib/filter.js"],"sourcesContent":["import {i} from './i.js';\nimport {isPlainObject} from './is-plain-object.js';\n\nexport {filter};\n\n/**\n * Filters an array or object by their values using the provided predicate.\n *\n * The identity function is used as the default 'truthy' predicate.\n *\n * @template A\n * @param {(value: A) => A | boolean} predicate predicate to run on a value\n * @returns {(x: Record<string, A> | A[]) => Partial<Record<string, A>> | A[]}\n */\nconst filter =\n  (predicate = i) =>\n  (x) => {\n    if (isPlainObject(x)) {\n      return Object.fromEntries(\n        Object.entries(x).filter(([_, value]) => predicate(value)),\n      );\n    }\n\n    if (Array.isArray(x)) {\n      return x.filter(predicate);\n    }\n\n    return x;\n  };\n"],"mappings":";AAAA,SAAQA,CAAR,QAAgB,QAAhB;AACA,SAAQC,aAAR,QAA4B,sBAA5B;AAEA,SAAQC,MAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,MAAM,GACV,SADIA,MACJ;EAAA,IAACC,SAAD,uEAAaH,CAAb;EAAA,OACA,UAACI,CAAD,EAAO;IACL,IAAIH,aAAa,CAACG,CAAD,CAAjB,EAAsB;MACpB,OAAOC,MAAM,CAACC,WAAP,CACLD,MAAM,CAACE,OAAP,CAAeH,CAAf,EAAkBF,MAAlB,CAAyB;QAAA;QAAA,IAAEM,CAAF;QAAA,IAAKC,KAAL;;QAAA,OAAgBN,SAAS,CAACM,KAAD,CAAzB;MAAA,CAAzB,CADK,CAAP;IAGD;;IAED,IAAIC,KAAK,CAACC,OAAN,CAAcP,CAAd,CAAJ,EAAsB;MACpB,OAAOA,CAAC,CAACF,MAAF,CAASC,SAAT,CAAP;IACD;;IAED,OAAOC,CAAP;EACD,CAbD;AAAA,CADF"},"metadata":{},"sourceType":"module"}