{"ast":null,"code":"import _objectSpread from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"as\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontVariant\", \"fontWeight\", \"letterSpacing\", \"lineHeight\", \"textAlign\", \"textDecoration\", \"textOverflow\", \"textShadow\", \"textTransform\", \"styleProps\", \"styles\", \"variant\", \"whiteSpace\", \"wordBreak\", \"wordSpacing\"];\nimport { filter } from 'uinix-fp';\nimport { useTypographyVariant } from '../system/hooks.js';\nimport { mergeStyles } from '../util/merge-styles.js';\nimport { Element } from './element.js';\nexport { Text };\n/**\n * @typedef {import('../types.js').AnyProps} AnyProps\n * @typedef {import('../types.js').CustomElement} CustomElement\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').ResponsiveStyleValue} ResponsiveStyleValue\n * @typedef {import('../types.js').Styles} Styles\n *\n * @typedef TextProps\n * @property {string | CustomElement} [as=\"span\"]\n *    Renders `Text` as the specified HTML element or `CustomElement`.\n *    Renders as a `HTMLSpanElement` by default.\n * @property {string} [variant='']\n *    A text variant is a property path that accesses a style in\n *    `system.styles.typography.variants[variant]`.\n * @property {AnyProps} [styleProps]\n *    Style props are used by style functions provided in the `styles` prop.\n * @property {Styles} [styles]\n *    Style objects or style functions can be provided as a single value or in\n *    array-form for composition.\n * @property {ResponsiveStyleValue} [fontFamily]\n *    Sets the `fontFamily` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [fontSize]\n *    Sets the `fontFamily` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [fontStyle]\n *    Sets the `fontStyle` CSS property.\n * @property {ResponsiveStyleValue} [fontVariant]\n *    Sets the `fontVariant` CSS property.\n * @property {ResponsiveStyleValue} [fontWeight]\n *    Sets the `fontWeight` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [letterSpacing]\n *    Sets the `letterSpacing` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [lineHeight]\n *    Sets the `lineHeight` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [textAlign]\n *    Sets the `textAlign` CSS property.\n * @property {ResponsiveStyleValue} [textDecoration]\n *    Sets the `textDecoration` CSS property.\n * @property {ResponsiveStyleValue} [textOverflow]\n *    Sets the `textOverflow` CSS property.\n * @property {ResponsiveStyleValue} [textShadow]\n *    Sets the `textShadow` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [textTransform]\n *    Sets the `textTransform` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [whiteSpace]\n *    Sets the `whiteSpace` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [wordBreak]\n *    Sets the `wordBreak` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [wordSpacing]\n *    Sets the `wordSpacing` CSS property.  You can use a theme-based value.\n */\n\n/**\n * `Text` is a component primitive interoperating with the\n * `system.styles.typography` spec.\n *\n * It provides an easy way to render and apply text styles defined by the\n * system's typography rules, and convenient typography props to further\n * configure text styles.  Whenever possible, we recommend organizing text\n * styles in `system.styles.typography`.\n *\n * `Text` is composed from `Element`, and therefore inherits all properties and\n * configurations from `Element`.\n *\n * @param {AnyProps & TextProps} props\n * @returns {ReturnType<H>}\n */\n\nvar Text = function Text(props) {\n  var _props$as = props.as,\n      as = _props$as === void 0 ? 'span' : _props$as,\n      fontFamily = props.fontFamily,\n      fontSize = props.fontSize,\n      fontStyle = props.fontStyle,\n      fontVariant = props.fontVariant,\n      fontWeight = props.fontWeight,\n      letterSpacing = props.letterSpacing,\n      lineHeight = props.lineHeight,\n      textAlign = props.textAlign,\n      textDecoration = props.textDecoration,\n      textOverflow = props.textOverflow,\n      textShadow = props.textShadow,\n      textTransform = props.textTransform,\n      styleProps = props.styleProps,\n      styles = props.styles,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? '' : _props$variant,\n      whiteSpace = props.whiteSpace,\n      wordBreak = props.wordBreak,\n      wordSpacing = props.wordSpacing,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var style = filter(function (x) {\n    return x !== undefined;\n  })({\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fontStyle: fontStyle,\n    fontVariant: fontVariant,\n    fontWeight: fontWeight,\n    letterSpacing: letterSpacing,\n    lineHeight: lineHeight,\n    textAlign: textAlign,\n    textDecoration: textDecoration,\n    textOverflow: textOverflow,\n    textShadow: textShadow,\n    textTransform: textTransform,\n    whiteSpace: whiteSpace,\n    wordBreak: wordBreak,\n    wordSpacing: wordSpacing\n  });\n  var variantStyle = useTypographyVariant(variant);\n  return Element(_objectSpread(_objectSpread({}, restProps), {}, {\n    as: as,\n    styleProps: styleProps,\n    styles: mergeStyles([variantStyle, style, styles])\n  }));\n};","map":{"version":3,"names":["filter","useTypographyVariant","mergeStyles","Element","Text","props","as","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","textAlign","textDecoration","textOverflow","textShadow","textTransform","styleProps","styles","variant","whiteSpace","wordBreak","wordSpacing","restProps","style","x","undefined","variantStyle"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor/node_modules/uinix-ui/lib/components/text.js"],"sourcesContent":["import {filter} from 'uinix-fp';\n\nimport {useTypographyVariant} from '../system/hooks.js';\nimport {mergeStyles} from '../util/merge-styles.js';\nimport {Element} from './element.js';\n\nexport {Text};\n\n/**\n * @typedef {import('../types.js').AnyProps} AnyProps\n * @typedef {import('../types.js').CustomElement} CustomElement\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').ResponsiveStyleValue} ResponsiveStyleValue\n * @typedef {import('../types.js').Styles} Styles\n *\n * @typedef TextProps\n * @property {string | CustomElement} [as=\"span\"]\n *    Renders `Text` as the specified HTML element or `CustomElement`.\n *    Renders as a `HTMLSpanElement` by default.\n * @property {string} [variant='']\n *    A text variant is a property path that accesses a style in\n *    `system.styles.typography.variants[variant]`.\n * @property {AnyProps} [styleProps]\n *    Style props are used by style functions provided in the `styles` prop.\n * @property {Styles} [styles]\n *    Style objects or style functions can be provided as a single value or in\n *    array-form for composition.\n * @property {ResponsiveStyleValue} [fontFamily]\n *    Sets the `fontFamily` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [fontSize]\n *    Sets the `fontFamily` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [fontStyle]\n *    Sets the `fontStyle` CSS property.\n * @property {ResponsiveStyleValue} [fontVariant]\n *    Sets the `fontVariant` CSS property.\n * @property {ResponsiveStyleValue} [fontWeight]\n *    Sets the `fontWeight` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [letterSpacing]\n *    Sets the `letterSpacing` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [lineHeight]\n *    Sets the `lineHeight` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [textAlign]\n *    Sets the `textAlign` CSS property.\n * @property {ResponsiveStyleValue} [textDecoration]\n *    Sets the `textDecoration` CSS property.\n * @property {ResponsiveStyleValue} [textOverflow]\n *    Sets the `textOverflow` CSS property.\n * @property {ResponsiveStyleValue} [textShadow]\n *    Sets the `textShadow` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [textTransform]\n *    Sets the `textTransform` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [whiteSpace]\n *    Sets the `whiteSpace` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [wordBreak]\n *    Sets the `wordBreak` CSS property.  You can use a theme-based value.\n * @property {ResponsiveStyleValue} [wordSpacing]\n *    Sets the `wordSpacing` CSS property.  You can use a theme-based value.\n */\n\n/**\n * `Text` is a component primitive interoperating with the\n * `system.styles.typography` spec.\n *\n * It provides an easy way to render and apply text styles defined by the\n * system's typography rules, and convenient typography props to further\n * configure text styles.  Whenever possible, we recommend organizing text\n * styles in `system.styles.typography`.\n *\n * `Text` is composed from `Element`, and therefore inherits all properties and\n * configurations from `Element`.\n *\n * @param {AnyProps & TextProps} props\n * @returns {ReturnType<H>}\n */\nconst Text = (props) => {\n  const {\n    as = 'span',\n    fontFamily,\n    fontSize,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    letterSpacing,\n    lineHeight,\n    textAlign,\n    textDecoration,\n    textOverflow,\n    textShadow,\n    textTransform,\n    styleProps,\n    styles,\n    variant = '',\n    whiteSpace,\n    wordBreak,\n    wordSpacing,\n    ...restProps\n  } = props;\n\n  const style = filter((x) => x !== undefined)({\n    fontFamily,\n    fontSize,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    letterSpacing,\n    lineHeight,\n    textAlign,\n    textDecoration,\n    textOverflow,\n    textShadow,\n    textTransform,\n    whiteSpace,\n    wordBreak,\n    wordSpacing,\n  });\n\n  const variantStyle = useTypographyVariant(variant);\n\n  return Element({\n    ...restProps,\n    as,\n    styleProps,\n    styles: mergeStyles([variantStyle, style, styles]),\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}