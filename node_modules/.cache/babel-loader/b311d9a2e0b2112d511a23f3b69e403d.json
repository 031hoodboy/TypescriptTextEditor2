{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nimport _toConsumableArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/src/TextEditor/TextEditor.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport React, { memo, useCallback, useState } from \"react\";\nimport { Slate, Editable } from \"slate-react\";\nimport styled from \"styled-components\";\nimport { Layout } from \"../ui\";\nimport { ActionsBar } from \"./actions\";\nimport { Element, Leaf, editor } from \"./editor\";\nimport { FormatBar, handleFormatHotkey, useToggleFormat } from \"./format\";\nimport { v4 as uuidv4 } from \"uuid\";\n/**\n * TODOs\n * - [HARD] support multiple mentions and triggers e.g. `@` (user), `#` (field), `:` (emoji)\n * - [HARD] update component signatures to use use `Option`-based interface and async `mentionResolvers`\n * - add types\n * - productionize\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var TextEditor = /*#__PURE__*/memo(_c = _s(function (props) {\n  _s();\n\n  var _props$formats = props.formats,\n      formats = _props$formats === void 0 ? [] : _props$formats,\n      value = props.value,\n      onChange = props.onChange,\n      onPost = props.onPost;\n  var renderElement = useCallback(Element, []);\n  var renderLeaf = useCallback(Leaf, []);\n\n  var _useToggleFormat = useToggleFormat(formats),\n      _useToggleFormat2 = _slicedToArray(_useToggleFormat, 2),\n      enableFormat = _useToggleFormat2[0],\n      toggleFormat = _useToggleFormat2[1];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      texts = _useState2[0],\n      setTexts = _useState2[1];\n\n  var onCreateText = function onCreateText() {\n    console.log(\"텍스트 블록이 추가되었습니다.\");\n    setTexts([uuidv4()].concat(_toConsumableArray(texts)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Slate, {\n    editor: editor,\n    value: coerce(value),\n    onChange: onChange,\n    children: [/*#__PURE__*/_jsxDEV(AddBlock, {\n      onClick: onCreateText,\n      children: \"Add Text Block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Layout, {\n      border: \"border\",\n      borderRadius: \"m\",\n      direction: \"column\",\n      p: 2,\n      spacing: 2,\n      children: enableFormat && /*#__PURE__*/_jsxDEV(FormatBar, {\n        formats: formats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 26\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, _this), texts.map(function (text) {\n      return /*#__PURE__*/_jsxDEV(Editable, {\n        renderElement: renderElement,\n        renderLeaf: renderLeaf,\n        placeholder: \"Enter some rich text\\u2026\",\n        spellCheck: true,\n        autoFocus: true,\n        onKeyDown: handleFormatHotkey(editor)\n      }, text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(ActionsBar, {\n      onPost: onPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, _this);\n}, \"FliKRDqwxusK2HYD4L43iWpDQD8=\", false, function () {\n  return [useToggleFormat];\n}));\n/**\n * Initializes a node if AST is empty, returns the provided AST otherwise.\n */\n\n_c2 = TextEditor;\nexport var coerce = function coerce(ast) {\n  if (ast.length === 0) {\n    return [{\n      type: \"p\",\n      children: [{\n        text: \"\"\n      }]\n    }];\n  } else {\n    return ast;\n  }\n};\nvar AddBlock = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  width: 200px;\\n  padding: 10px;\\n  background-color: #5e09dc;\\n  cursor: pointer;\\n  margin: 0 10px;\\n  font-size: 12px;\\n  border-radius: 1rem;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  color: #fff;\\n  &:active {\\n    transform: scale(0.97);\\n  }\\n\"])));\n_c3 = AddBlock;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TextEditor$memo\");\n$RefreshReg$(_c2, \"TextEditor\");\n$RefreshReg$(_c3, \"AddBlock\");","map":{"version":3,"names":["React","memo","useCallback","useState","Slate","Editable","styled","Layout","ActionsBar","Element","Leaf","editor","FormatBar","handleFormatHotkey","useToggleFormat","v4","uuidv4","TextEditor","props","formats","value","onChange","onPost","renderElement","renderLeaf","enableFormat","toggleFormat","texts","setTexts","onCreateText","console","log","coerce","map","text","ast","length","type","children","AddBlock","div"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/src/TextEditor/TextEditor.tsx"],"sourcesContent":["import React, { memo, useCallback, useState } from \"react\";\nimport { Slate, Editable } from \"slate-react\";\nimport styled from \"styled-components\";\nimport { Layout } from \"../ui\";\nimport { ActionsBar } from \"./actions\";\nimport { Element, Leaf, editor } from \"./editor\";\nimport { FormatBar, handleFormatHotkey, useToggleFormat } from \"./format\";\nimport { ContentAst } from \"./types\";\nimport { Rnd } from \"react-rnd\";\nimport { v4 as uuidv4 } from \"uuid\";\n/**\n * TODOs\n * - [HARD] support multiple mentions and triggers e.g. `@` (user), `#` (field), `:` (emoji)\n * - [HARD] update component signatures to use use `Option`-based interface and async `mentionResolvers`\n * - add types\n * - productionize\n */\ntype Props = {\n  formats: any;\n  value: any;\n  onChange: any;\n  onPost: any;\n};\n\nexport const TextEditor = memo((props: Props) => {\n  const { formats = [], value, onChange, onPost } = props;\n  const renderElement = useCallback(Element, []);\n  const renderLeaf = useCallback(Leaf, []);\n  const [enableFormat, toggleFormat] = useToggleFormat(formats);\n  const [texts, setTexts] = useState([]);\n\n  const onCreateText = () => {\n    console.log(\"텍스트 블록이 추가되었습니다.\");\n    setTexts([uuidv4(), ...texts]);\n  };\n\n  return (\n    <Slate editor={editor} value={coerce(value)} onChange={onChange}>\n      <AddBlock onClick={onCreateText}>Add Text Block</AddBlock>\n\n      <Layout\n        border=\"border\"\n        borderRadius=\"m\"\n        direction=\"column\"\n        p={2}\n        spacing={2}\n      >\n        {enableFormat && <FormatBar formats={formats} />}\n      </Layout>\n      {texts.map((text) => (\n        <Editable\n          renderElement={renderElement}\n          renderLeaf={renderLeaf}\n          placeholder=\"Enter some rich text…\"\n          spellCheck\n          autoFocus\n          onKeyDown={handleFormatHotkey(editor)}\n          key={text}\n        />\n      ))}\n\n      <ActionsBar onPost={onPost} />\n    </Slate>\n  );\n});\n\n/**\n * Initializes a node if AST is empty, returns the provided AST otherwise.\n */\nexport const coerce = (ast: ContentAst): ContentAst => {\n  if (ast.length === 0) {\n    return [\n      {\n        type: \"p\",\n        children: [\n          {\n            text: \"\",\n          },\n        ],\n      },\n    ];\n  } else {\n    return ast;\n  }\n};\n\nconst AddBlock = styled.div`\n  width: 200px;\n  padding: 10px;\n  background-color: #5e09dc;\n  cursor: pointer;\n  margin: 0 10px;\n  font-size: 12px;\n  border-radius: 1rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  &:active {\n    transform: scale(0.97);\n  }\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}