{"ast":null,"code":"import _slicedToArray from \"/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { isPlainObject, props } from 'uinix-fp';\nimport { themeMapping } from 'uinix-theme';\nexport { themeValue };\nexport { resolveThemeValues as _resolveThemeValues };\n/**\n * @typedef {import('fela').IStyle} IStyle\n * @typedef {import('uinix-theme').ThemeMapping} UinixThemeThemeMapping\n * @typedef {import('../types.js').AnyProps} AnyProps\n * @typedef {import('../types.js').StyleObject} StyleObject\n * @typedef {import('../types.js').SystemTheme} SystemTheme\n *\n * @callback Plugin\n *    Customized (fela) Plugin interface\n * @param {IStyle} style\n *    A style object\n * @param {any} _type\n *    Unused\n * @param {any} _renderer\n *    Unused\n * @param {AnyProps} props\n *    Style props\n * @returns {IStyle}\n */\n\n/**\n * Fela plugin to handle theme values.\n *\n * Based on the official fela-plugin-theme-value with some differences:\n * - Uses a static mapping based on uinix-theme's themeMapping.\n * - resolves negative theme values.\n *\n * See https://github.com/robinweser/fela/tree/master/packages/fela-plugin-theme-value\n *\n * This method is a workaround and will be removed when the formal\n * `fela-plugin-theme-value` supports negative theme values.\n *\n * @returns {Plugin}\n */\n\nvar themeValue = function themeValue() {\n  return function (style, _type, _renderer, props) {\n    return resolveThemeValues(style, props.theme);\n  };\n};\n/**\n * Resolves theme values in a style by referncing the `theme`.\n *\n * @param {IStyle} style\n * @param {SystemTheme} theme\n * @returns {IStyle}\n */\n\n\nvar resolveThemeValues = function resolveThemeValues(style, theme) {\n  var NEGATIVE_REGEXP = /^\\s*-/;\n  var mapping = createThemeMapping(themeMapping);\n  Object.entries(style).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        property = _ref2[0],\n        styleValue = _ref2[1];\n\n    var resolveThemeValue = mapping[property];\n\n    if (resolveThemeValue) {\n      var isNegative = NEGATIVE_REGEXP.test(styleValue);\n\n      if (isNegative) {\n        styleValue = String(styleValue).split(NEGATIVE_REGEXP)[1].trim();\n      }\n\n      var resolvedValue = props(String(styleValue))(resolveThemeValue(theme)) || styleValue;\n      var isNumber = !Number.isNaN(Number(resolvedValue)); // @ts-ignore: we CAN access from IStyle\n\n      style[property] = isNegative ? isNumber ? -resolvedValue : \"-\".concat(resolvedValue) : resolvedValue;\n    } else if (isPlainObject(styleValue)) {\n      // @ts-ignore: we CAN access from IStyle\n      style[property] = resolveThemeValues(style[property], theme);\n    }\n  });\n  return style;\n};\n/**\n * Creates a theme mapping from a `UinixThemeThemeMapping`.\n *\n * The keys are CSS property names, and the values are callbacks that will\n * return the nested object based on the attached theme property.\n *\n * @param {UinixThemeThemeMapping} themeMapping\n * @returns {Object<string, (style: IStyle) => IStyle>}\n */\n\n\nvar createThemeMapping = function createThemeMapping(themeMapping) {\n  /** @type {Object<string, (style: IStyle) => IStyle>} */\n  var initialAcc = {};\n  return Object.entries(themeMapping).reduce(function (acc, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        themeProperty = _ref4[0],\n        cssProperties = _ref4[1];\n\n    cssProperties.forEach(function (cssProperty) {\n      acc[cssProperty] = props(themeProperty);\n    });\n    return acc;\n  }, initialAcc);\n};","map":{"version":3,"names":["isPlainObject","props","themeMapping","themeValue","resolveThemeValues","_resolveThemeValues","style","_type","_renderer","theme","NEGATIVE_REGEXP","mapping","createThemeMapping","Object","entries","forEach","property","styleValue","resolveThemeValue","isNegative","test","String","split","trim","resolvedValue","isNumber","Number","isNaN","initialAcc","reduce","acc","themeProperty","cssProperties","cssProperty"],"sources":["/Users/hoodboy/Documents/htdocs/TypescriptTextEditor2/node_modules/uinix-ui/lib/renderer/plugin-theme-value.js"],"sourcesContent":["import {isPlainObject, props} from 'uinix-fp';\nimport {themeMapping} from 'uinix-theme';\n\nexport {themeValue};\nexport {resolveThemeValues as _resolveThemeValues};\n\n/**\n * @typedef {import('fela').IStyle} IStyle\n * @typedef {import('uinix-theme').ThemeMapping} UinixThemeThemeMapping\n * @typedef {import('../types.js').AnyProps} AnyProps\n * @typedef {import('../types.js').StyleObject} StyleObject\n * @typedef {import('../types.js').SystemTheme} SystemTheme\n *\n * @callback Plugin\n *    Customized (fela) Plugin interface\n * @param {IStyle} style\n *    A style object\n * @param {any} _type\n *    Unused\n * @param {any} _renderer\n *    Unused\n * @param {AnyProps} props\n *    Style props\n * @returns {IStyle}\n */\n\n/**\n * Fela plugin to handle theme values.\n *\n * Based on the official fela-plugin-theme-value with some differences:\n * - Uses a static mapping based on uinix-theme's themeMapping.\n * - resolves negative theme values.\n *\n * See https://github.com/robinweser/fela/tree/master/packages/fela-plugin-theme-value\n *\n * This method is a workaround and will be removed when the formal\n * `fela-plugin-theme-value` supports negative theme values.\n *\n * @returns {Plugin}\n */\nconst themeValue = () => (style, _type, _renderer, props) =>\n  resolveThemeValues(style, props.theme);\n\n/**\n * Resolves theme values in a style by referncing the `theme`.\n *\n * @param {IStyle} style\n * @param {SystemTheme} theme\n * @returns {IStyle}\n */\nconst resolveThemeValues = (style, theme) => {\n  const NEGATIVE_REGEXP = /^\\s*-/;\n  const mapping = createThemeMapping(themeMapping);\n\n  Object.entries(style).forEach(([property, styleValue]) => {\n    const resolveThemeValue = mapping[property];\n    if (resolveThemeValue) {\n      const isNegative = NEGATIVE_REGEXP.test(styleValue);\n      if (isNegative) {\n        styleValue = String(styleValue).split(NEGATIVE_REGEXP)[1].trim();\n      }\n\n      const resolvedValue =\n        props(String(styleValue))(resolveThemeValue(theme)) || styleValue;\n      const isNumber = !Number.isNaN(Number(resolvedValue));\n      // @ts-ignore: we CAN access from IStyle\n      style[property] = isNegative\n        ? isNumber\n          ? -resolvedValue\n          : `-${resolvedValue}`\n        : resolvedValue;\n    } else if (isPlainObject(styleValue)) {\n      // @ts-ignore: we CAN access from IStyle\n      style[property] = resolveThemeValues(style[property], theme);\n    }\n  });\n\n  return style;\n};\n\n/**\n * Creates a theme mapping from a `UinixThemeThemeMapping`.\n *\n * The keys are CSS property names, and the values are callbacks that will\n * return the nested object based on the attached theme property.\n *\n * @param {UinixThemeThemeMapping} themeMapping\n * @returns {Object<string, (style: IStyle) => IStyle>}\n */\nconst createThemeMapping = (themeMapping) => {\n  /** @type {Object<string, (style: IStyle) => IStyle>} */\n  const initialAcc = {};\n  return Object.entries(themeMapping).reduce(\n    (acc, [themeProperty, cssProperties]) => {\n      cssProperties.forEach((cssProperty) => {\n        acc[cssProperty] = props(themeProperty);\n      });\n      return acc;\n    },\n    initialAcc,\n  );\n};\n"],"mappings":";AAAA,SAAQA,aAAR,EAAuBC,KAAvB,QAAmC,UAAnC;AACA,SAAQC,YAAR,QAA2B,aAA3B;AAEA,SAAQC,UAAR;AACA,SAAQC,kBAAkB,IAAIC,mBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMF,UAAU,GAAG,SAAbA,UAAa;EAAA,OAAM,UAACG,KAAD,EAAQC,KAAR,EAAeC,SAAf,EAA0BP,KAA1B;IAAA,OACvBG,kBAAkB,CAACE,KAAD,EAAQL,KAAK,CAACQ,KAAd,CADK;EAAA,CAAN;AAAA,CAAnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAML,kBAAkB,GAAG,SAArBA,kBAAqB,CAACE,KAAD,EAAQG,KAAR,EAAkB;EAC3C,IAAMC,eAAe,GAAG,OAAxB;EACA,IAAMC,OAAO,GAAGC,kBAAkB,CAACV,YAAD,CAAlC;EAEAW,MAAM,CAACC,OAAP,CAAeR,KAAf,EAAsBS,OAAtB,CAA8B,gBAA4B;IAAA;IAAA,IAA1BC,QAA0B;IAAA,IAAhBC,UAAgB;;IACxD,IAAMC,iBAAiB,GAAGP,OAAO,CAACK,QAAD,CAAjC;;IACA,IAAIE,iBAAJ,EAAuB;MACrB,IAAMC,UAAU,GAAGT,eAAe,CAACU,IAAhB,CAAqBH,UAArB,CAAnB;;MACA,IAAIE,UAAJ,EAAgB;QACdF,UAAU,GAAGI,MAAM,CAACJ,UAAD,CAAN,CAAmBK,KAAnB,CAAyBZ,eAAzB,EAA0C,CAA1C,EAA6Ca,IAA7C,EAAb;MACD;;MAED,IAAMC,aAAa,GACjBvB,KAAK,CAACoB,MAAM,CAACJ,UAAD,CAAP,CAAL,CAA0BC,iBAAiB,CAACT,KAAD,CAA3C,KAAuDQ,UADzD;MAEA,IAAMQ,QAAQ,GAAG,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,aAAD,CAAnB,CAAlB,CARqB,CASrB;;MACAlB,KAAK,CAACU,QAAD,CAAL,GAAkBG,UAAU,GACxBM,QAAQ,GACN,CAACD,aADK,cAEFA,aAFE,CADgB,GAIxBA,aAJJ;IAKD,CAfD,MAeO,IAAIxB,aAAa,CAACiB,UAAD,CAAjB,EAA+B;MACpC;MACAX,KAAK,CAACU,QAAD,CAAL,GAAkBZ,kBAAkB,CAACE,KAAK,CAACU,QAAD,CAAN,EAAkBP,KAAlB,CAApC;IACD;EACF,CArBD;EAuBA,OAAOH,KAAP;AACD,CA5BD;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAACV,YAAD,EAAkB;EAC3C;EACA,IAAM0B,UAAU,GAAG,EAAnB;EACA,OAAOf,MAAM,CAACC,OAAP,CAAeZ,YAAf,EAA6B2B,MAA7B,CACL,UAACC,GAAD,SAAyC;IAAA;IAAA,IAAlCC,aAAkC;IAAA,IAAnBC,aAAmB;;IACvCA,aAAa,CAACjB,OAAd,CAAsB,UAACkB,WAAD,EAAiB;MACrCH,GAAG,CAACG,WAAD,CAAH,GAAmBhC,KAAK,CAAC8B,aAAD,CAAxB;IACD,CAFD;IAGA,OAAOD,GAAP;EACD,CANI,EAOLF,UAPK,CAAP;AASD,CAZD"},"metadata":{},"sourceType":"module"}