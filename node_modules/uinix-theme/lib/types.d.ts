/**
 * A valid JS-named CSS property (e.g. color, marginBottom, alignItems).
 */
export type CssProperty = string;
/**
 * A valid `CssProperty` value (e.g. "center", "10px", 10).
 */
export type CssPropertyValue = string | number;
/**
 * A valid CSS keyframes rule value expressed as a JS object.
 * e.g. {from: {...}, to: {...}}
 */
export type CssKeyframesRuleValue = object;
/**
 * The possible value types a theme property vale can assume.
 */
export type ThemePropertyValue = CssPropertyValue | CssKeyframesRuleValue;
/**
 * A `ThemePropertyDefinition` can be recursively nested to organize
 * evenutally-resolved `ThemePropertyValue`s.
 * A recursively nested definition for a `ThemeProperty` that eventually
 * resolves to a `ThemePropertyValue`.
 */
export type ThemePropertyDefinition = {
    [key: string]: ThemePropertyValue | ThemePropertyDefinition;
};
/**
 * Theme property values
 */
export type ThemeProperty = ('animations' | 'borders' | 'borderStyles' | 'borderWidths' | 'colors' | 'fontFamilies' | 'fontSizes' | 'fontWeights' | 'keyframes' | 'letterSpacings' | 'lineHeights' | 'opacities' | 'radii' | 'shadows' | 'sizes' | 'spacings' | 'transforms' | 'transitions' | 'zIndices');
/**
 * A mapping of `ThemeProperty` to `ThemePropertyDefinition`.
 */
export type Theme = {
    animations: ThemePropertyDefinition;
    borders: ThemePropertyDefinition;
    borderStyles: ThemePropertyDefinition;
    borderWidths: ThemePropertyDefinition;
    colors: ThemePropertyDefinition;
    fontFamilies: ThemePropertyDefinition;
    fontSizes: ThemePropertyDefinition;
    fontWeights: ThemePropertyDefinition;
    keyframes: ThemePropertyDefinition;
    letterSpacings: ThemePropertyDefinition;
    lineHeights: ThemePropertyDefinition;
    opacities: ThemePropertyDefinition;
    radii: ThemePropertyDefinition;
    shadows: ThemePropertyDefinition;
    sizes: ThemePropertyDefinition;
    spacings: ThemePropertyDefinition;
    transforms: ThemePropertyDefinition;
    transitions: ThemePropertyDefinition;
    zIndices: ThemePropertyDefinition;
};
/**
 * A mapping of `ThemeProperty` to one or more `CssProperty`.
 */
export type ThemeMapping = {
    animations: CssProperty[];
    borders: CssProperty[];
    borderStyles: CssProperty[];
    borderWidths: CssProperty[];
    colors: CssProperty[];
    fontFamilies: CssProperty[];
    fontSizes: CssProperty[];
    fontWeights: CssProperty[];
    keyframes: CssProperty[];
    letterSpacings: CssProperty[];
    lineHeights: CssProperty[];
    opacities: CssProperty[];
    radii: CssProperty[];
    shadows: CssProperty[];
    sizes: CssProperty[];
    spacings: CssProperty[];
    transforms: CssProperty[];
    transitions: CssProperty[];
    zIndices: CssProperty[];
};
