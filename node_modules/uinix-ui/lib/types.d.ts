/**
 * An object of any properties.
 */
export type AnyProps = {
    [x: string]: any;
};
export type CustomElement = (props?: {
    [x: string]: any;
} | undefined, children?: CustomElement | CustomElement[] | undefined) => ReturnType<H>;
/**
 * Hyperscript's `h` interface.
 */
export type H = (name: string, attributes?: {
    [x: string]: any;
} | undefined, children?: any[] | undefined) => any;
/**
 * A valid `CssProperty` value (e.g. "center", "10px", 10).
 */
export type StyleValue = string | number;
/**
 * Responsive style values are StyleValue expressed in array-form.
 */
export type ResponsiveStyleValue = StyleValue | StyleValue[];
/**
 * An object representing a style.
 * - Keys: CSS property names and pseudo-classes/selectors.
 * - Values: CSSProperties or theme property keys specified as single
 * values or in array form (i.e. responsive values).
 */
export type StyleObject = {
    [key: string]: ResponsiveStyleValue | StyleObject;
};
/**
 * A style function is an unary function taking `StyleProps` as args
 * and returns a `StyleObject`.
 */
export type StyleFunction = (props: AnyProps) => StyleObject | null;
/**
 * A `Style` interface may refer to a `StyleObject`, `StyleFunction`,
 * `null`, or `undefined`.
 */
export type Style = StyleObject | StyleFunction | null | undefined;
/**
 * `Styles` may be provided as a single `Style` or an array of `Style`s.
 */
export type Styles = Style | Style[];
/**
 * A `StyleDefinition` can be recursively nested to organize
 * eventually-resolved `StyleObjects`.
 */
export type StyleDefinition = {
    [key: string]: StyleObject | StyleDefinition;
};
/**
 * Recursively nestable map of icon name to its svg contents.
 */
export type SystemIcons = {
    [key: string]: string | SystemIcons;
};
/**
 * A uinix-theme complient object to manage theme values.
 */
export type SystemTheme = import('uinix-theme').Theme;
/**
 * A representation of a CSS font-face
 */
export type FontFace = {
    /**
     *    The font-face resource.  Can be a relative path or an absolute url.
     */
    src: string;
};
export type TypographyStyles = {
    /**
     *    Define all font-face resources.
     *    The keys are the font-face name that may be referenced by
     *    `system.theme.fontFamilies`
     */
    fontFaces: {
        [x: string]: FontFace;
    };
    /**
     *    See Styles.global.
     *    Global styles should only apply to typographic HTML elements.
     */
    global: StyleDefinition;
    /**
     *    See Styles.variants.
     *    Typography style variants can only be used by the `Text` component.
     */
    variants: StyleDefinition;
};
/**
 * (Typescript declaration workaround JSDoc not supporting generic typedefs)
 *   A typed object defining style breakpoints, global styles, variant
 *   styles, typography styles, custom styles (objects/functions) for
 *   the system.
 */
export type SystemStyles = {
    [key: string]: any;
    breakpoints: string[];
    global: StyleDefinition;
    variants: StyleDefinition;
    typography: TypographyStyles;
};
/**
 * The source of truth for the `icons`, `styles`, `theme` specs.
 */
export type System = {
    icons: SystemIcons;
    styles: SystemStyles;
    theme: SystemTheme;
};
/**
 * A mapping of CSS property names to an array of shorthand prop names.
 */
export type ShorthandPropsMapping = {
    [x: string]: string[];
};
/**
 * A configuration for the system and components.
 */
export type Config = {
    /**
     *    Configures the `Element` component with shorthand props that support
     *    theme-based styling.
     */
    elementShorthandPropsMapping: ShorthandPropsMapping;
    /**
     *    Configures the `Element` component and applies the provided style
     *    functions.
     */
    elementStyles: StyleFunction[];
    /**
     *    Renders atomic CSS if set to true.
     */
    enableAtomicCss: boolean;
    /**
     *    Whitelists responsive CSS properties.
     */
    responsiveCssProperties: string[];
};
/**
 * Renders an `Style`s into CSS
 */
export type CssRenderer = (styles: Styles) => string;
/**
 * ;
 *    Creates a CSS renderer, given style props and style functions.
 */
export type CreateCssRenderer = (props?: {
    [x: string]: any;
} | undefined) => CssRenderer;
/**
 * ;
 *    Stores the system instance.
 */
export type Store = {
    /**
     *    System configuration.
     */
    config: Config;
    /**
     *    Creates a CSS renderer.
     */
    createCssRenderer: CreateCssRenderer;
    /**
     *    Hyperscript h function.
     */
    h: H;
    /**
     *    The system source of truth.
     */
    system: System;
};
