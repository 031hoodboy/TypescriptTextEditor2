export type AnyProps = import('../types.js').AnyProps;
export type H = import('../types.js').H;
export type ResponsiveStyleValue = import('../types.js').ResponsiveStyleValue;
export type Styles = import('../types.js').Styles;
export type IconProps = {
    /**
     * Sets the icon SVG container's `color`.  You can use a theme-based value.
     * If an icon SVG is using `'currentColor'` for appropriate color attributes
     * (e.g. `stroke`, `fill`), the `Icon will apply the specified color to the
     * rendered `HTMLSVGElement`.
     */
    color?: import("../types.js").ResponsiveStyleValue | undefined;
    /**
     * Renders the specified icon from `system.icons[icon]` as an
     * `HTMLSVGElement`.
     */
    icon?: string | undefined;
    /**
     * A variant is a property path that accesses a style in
     * `system.styles.variants[variant]`.
     */
    variant?: string | undefined;
    /**
     * Click handler for the icon.  If specified, will render `Icon` as
     * a semantic `HTMLButtonElement` instead of a `HTMLDivElement`.
     */
    onClick?: Function | undefined;
    /**
     * Style props are used by style functions provided in the `styles` prop.
     */
    styleProps?: {
        [x: string]: any;
    } | undefined;
    /**
     * Style objects or style functions can be provided as a single value or in
     * array-form for composition.
     */
    styles?: Styles;
    /**
     * Sets the icon SVG's `height`.  You can use a theme-based value.
     */
    height?: import("../types.js").ResponsiveStyleValue | undefined;
    /**
     * Sets the icon SVG's `height` and `width`.  You can use a theme-based
     * value.
     */
    size?: import("../types.js").ResponsiveStyleValue | undefined;
    /**
     * Sets the icon SVG's `width`.  You can use a theme-based value.
     */
    width?: import("../types.js").ResponsiveStyleValue | undefined;
};
/**
 * @typedef {import('../types.js').AnyProps} AnyProps
 * @typedef {import('../types.js').H} H
 * @typedef {import('../types.js').ResponsiveStyleValue} ResponsiveStyleValue
 * @typedef {import('../types.js').Styles} Styles
 *
 * @typedef IconProps
 * @property {ResponsiveStyleValue} [color='currentColor']
 *    Sets the icon SVG container's `color`.  You can use a theme-based value.
 *    If an icon SVG is using `'currentColor'` for appropriate color attributes
 *    (e.g. `stroke`, `fill`), the `Icon will apply the specified color to the
 *    rendered `HTMLSVGElement`.
 * @property {string} [icon='']
 *    Renders the specified icon from `system.icons[icon]` as an
 *    `HTMLSVGElement`.
 * @property {string} [variant]
 *    A variant is a property path that accesses a style in
 *    `system.styles.variants[variant]`.
 * @property {function} [onClick]
 *    Click handler for the icon.  If specified, will render `Icon` as
 *    a semantic `HTMLButtonElement` instead of a `HTMLDivElement`.
 * @property {AnyProps} [styleProps]
 *    Style props are used by style functions provided in the `styles` prop.
 * @property {Styles} [styles]
 *    Style objects or style functions can be provided as a single value or in
 *    array-form for composition.
 * @property {ResponsiveStyleValue} [color]
 *    Sets the icon SVG's `color`.  You can use a theme-based value.
 *    `'currentColor'` is supported.
 * @property {ResponsiveStyleValue} [height]
 *    Sets the icon SVG's `height`.  You can use a theme-based value.
 * @property {ResponsiveStyleValue} [size]
 *    Sets the icon SVG's `height` and `width`.  You can use a theme-based
 *    value.
 * @property {ResponsiveStyleValue} [width]
 *    Sets the icon SVG's `width`.  You can use a theme-based value.
 */
/**
 * `Icon` is a component primitive interoperating with the `system.icons` spec.
 *
 * It provides easy ways to render and configure SVG icons.
 *
 * `Icon` is composed from `Element`, and therefore inherits all properties and
 * configurations from `Element`.
 *
 * @param {AnyProps & IconProps} props
 * @returns {ReturnType<H>}
 */
export function Icon(props: AnyProps & IconProps): ReturnType<H>;
