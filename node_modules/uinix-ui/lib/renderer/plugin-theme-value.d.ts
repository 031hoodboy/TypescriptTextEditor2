export type IStyle = import('fela').IStyle;
export type UinixThemeThemeMapping = import('uinix-theme').ThemeMapping;
export type AnyProps = import('../types.js').AnyProps;
export type StyleObject = import('../types.js').StyleObject;
export type SystemTheme = import('../types.js').SystemTheme;
/**
 * Customized (fela) Plugin interface
 */
export type Plugin = (style: IStyle, _type: any, _renderer: any, props: AnyProps) => IStyle;
/**
 * @typedef {import('fela').IStyle} IStyle
 * @typedef {import('uinix-theme').ThemeMapping} UinixThemeThemeMapping
 * @typedef {import('../types.js').AnyProps} AnyProps
 * @typedef {import('../types.js').StyleObject} StyleObject
 * @typedef {import('../types.js').SystemTheme} SystemTheme
 *
 * @callback Plugin
 *    Customized (fela) Plugin interface
 * @param {IStyle} style
 *    A style object
 * @param {any} _type
 *    Unused
 * @param {any} _renderer
 *    Unused
 * @param {AnyProps} props
 *    Style props
 * @returns {IStyle}
 */
/**
 * Fela plugin to handle theme values.
 *
 * Based on the official fela-plugin-theme-value with some differences:
 * - Uses a static mapping based on uinix-theme's themeMapping.
 * - resolves negative theme values.
 *
 * See https://github.com/robinweser/fela/tree/master/packages/fela-plugin-theme-value
 *
 * This method is a workaround and will be removed when the formal
 * `fela-plugin-theme-value` supports negative theme values.
 *
 * @returns {Plugin}
 */
export function themeValue(): Plugin;
/**
 * Resolves theme values in a style by referncing the `theme`.
 *
 * @param {IStyle} style
 * @param {SystemTheme} theme
 * @returns {IStyle}
 */
declare function resolveThemeValues(style: IStyle, theme: SystemTheme): IStyle;
export { resolveThemeValues as _resolveThemeValues };
